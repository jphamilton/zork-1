using Zork1.Rooms;
using Zork1.Scenic;
using Zork1.Things;

namespace Tests.Handlers;

public class OpenTests : BaseTestFixture
{
	[Fact]
	public void already_open()
	{
		var bottle = Inv<GlassBottle>();
		bottle.Open = true;
		Execute("open bottle");
		Assert.Contains("It is already open.", ConsoleOut);
	}

	[Fact]
	public void should_open()
	{
        var bottle = Inv<GlassBottle>();
        bottle.Open = false;
        Execute("open bottle");
        Assert.Contains("Opened.", ConsoleOut);
		Assert.True(bottle.Open);
    }

    [Fact]
	public void should_open_and_reveal()
	{
		var mailbox = Get<Mailbox>();
		Assert.False(mailbox.Open);
		Execute("open mailbox");
        Assert.Contains($"Opening the small mailbox reveals a leaflet.", ConsoleOut);
		Assert.True(mailbox.Open);
	}

    [Fact]
	public void reveal_with_initial()
	{
		Here<GoldCoffin>();
		Execute("open coffin");
        Assert.Contains("The gold coffin opens.", ConsoleOut);
        Assert.Contains("A sceptre, possibly that of ancient Egypt itself, is in the coffin. The sceptre is ornamented with colored enamel, and tapers to a sharp point.", ConsoleOut);
    }

    [Fact]
	public void doors()
	{
		var door = Here<OakDoor>();
		door.Open = false;
		Execute("open oak door");
		Assert.Contains("The oak door opens.", ConsoleOut);
		Assert.True(door.Open);
    }

    [Fact]
    public void already_open_doors()
    {
        var door = Here<OakDoor>();
        door.Open = true;
        Execute("open oak door");
        Assert.Contains("It is already open.", ConsoleOut);
        Assert.True(door.Open);
    }

    [Fact]
	public void non_openable()
	{
		Inv<Wrench>();
		Execute("open wrench");
		Assert.Contains("You must tell me how to do that to a wrench.", ConsoleOut);
    }
}