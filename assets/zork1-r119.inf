! "zork1.z3", 84874 bytes
! Z-machine version 3, release 76, serial 840509
!
! Decompiled by Reform release 6, serial 040226
! using symbol file "zork1.reform"

! Grammar

Verb 'verbose'
    * 							-> Verbose
;

Verb 'brief'
    * 							-> Brief
;

Verb 'super' 'superbrief'
    * 							-> Superbrief
;

Verb 'diagnose'
    * 							-> Diagnose
;

Verb 'i//' 'inventory'
    * 							-> Inventory
;

Verb 'q//' 'quit'
    * 							-> Quit
;

Verb 'restart'
    * 							-> Restart
;

Verb 'restore'
    * 							-> Restore
;

Verb 'save'
    * 							-> Save
;

Verb 'score'
    * 							-> Score
;

Verb 'script'
    * 							-> Script
;

Verb 'unscript'
    * 							-> Unscript
;

Verb 'version'
    * 							-> Version
;

Verb '$ve'
    * 							-> Verify
;

Verb 'debug'
    * 							-> Debug
;

Verb 'activate'
    * on(held,carried,in_room,on_ground)		-> SwitchOn
;

Verb 'again' 'g//'
    * 							-> Again
;

Verb 'answer' 'reply'
    * object						-> AnswerObj
    * 							-> Answer
;

Verb 'apply'
    * object 'to' object				-> Insert
;

Verb 'attack' 'fight' 'hit' 'hurt' 'injure'
    * animate(in_room,on_ground) 'with'/'using'/'thru'/'through' weapon(held,carried,have) -> Attack
;

Verb 'back'
    * 							-> Back
;

Verb 'blast'
    * 							-> BlowUp
;

Verb 'blow'
    * 'into'/'inside'/'in' object			-> BlowIn
    * 'up'/'u//' object					-> BlowUp
    * 'up'/'u//' object 'with'/'using'/'thru'/'through' toolbit(held,carried,in_room,on_ground) -> Inflate
    * 'out' object					-> SwitchOff
;

Verb 'board'
    * vehicle(in_room,on_ground)			-> Board
;

Verb 'brush' 'clean'
    * object(held,carried,in_room,on_ground) 'with'/'using'/'thru'/'through' object -> Brush
    * object(held,carried,in_room,on_ground)		-> Brush
;

Verb 'bug'
    * 							-> Bug
;

Verb 'burn' 'ignite' 'incinerate'
    * 'down'/'d//' flammable(held,carried,in_room,on_ground) 'with'/'using'/'thru'/'through' flame(held,carried,in_room,on_ground,have) -> Burn
    * flammable(held,carried,in_room,on_ground) 'with'/'using'/'thru'/'through' flame(held,carried,in_room,on_ground,have) -> Burn
;

Verb 'barf' 'chomp' 'lose'
    * 							-> Vomit
;

Verb 'climb' 'sit'
    * 'with'/'using'/'thru'/'through' object		-> EnterObj
    * 'onto'/'on' vehicle(in_room,on_ground)		-> ClimbOn
    * 'into'/'inside'/'in' vehicle(in_room,on_ground)	-> Board
    * climbable(in_room,on_ground)			-> ClimbObj
    * 'down'/'d//' climbable(in_room,on_ground)		-> ClimbDown
    * 							-> ClimbDown
    * 'up'/'u//' climbable(in_room,on_ground)		-> ClimbUp
    * 							-> ClimbUp
;

Verb 'close'
    * door(held,carried,in_room,on_ground)		-> Close
;

Verb 'command'
    * animate						-> Command
;

Verb 'count'
    * object						-> Count
;

Verb 'cross' 'ford'
    * object						-> Cross
;

Verb 'cut' 'pierce' 'slice'
    * object 'with'/'using'/'thru'/'through' weapon(held,carried) -> Cut
;

Verb 'curse' 'damn' 'fuck' 'shit'
    * animate						-> Curse
    * 							    -> Curse
;

Verb 'deflate'
    * object						-> Deflate
;

Verb 'block' 'break' 'damage' 'destroy' 'smash'
    * 'into'/'inside'/'in' object(held,carried,in_room,on_ground) -> Open
    * 'down'/'d//' object(held,carried,in_room,on_ground) 'with'/'using'/'thru'/'through' object(held,carried,take) -> Poke
    * object(held,carried,in_room,on_ground) 'with'/'using'/'thru'/'through' object(held,carried,take) -> Poke
;

Verb 'dig'
    * 'into'/'inside'/'in' object(in_room,on_ground) 'with'/'using'/'thru'/'through' toolbit(held,carried,have) -> Dig
    * object(in_room,on_ground) 'with'/'using'/'thru'/'through' toolbit(held,carried,have) -> Dig
    * 'into'/'inside'/'in' object			-> Dig
;

Verb 'disembark'
    * vehicle(in_room,on_ground)			-> Disembark
;

Verb 'disenchant'
    * object						-> Disenchant
;

Verb 'drink' 'imbibe' 'swallow'
    * 'from' object(held,carried)			-> DrinkFrom
    * drinkable(held,carried,in_room,on_ground)		-> Drink
;

Verb 'drop' 'release'
    * object(held,many,have) 'onto'/'on' object		-> PutOn
    * object(held,many,have) 'into'/'inside'/'in' object -> Insert
    * object(held,many,have) 'down'/'d//' object	-> Insert
    * object(held,many,have)				-> Drop
;

Verb 'bite' 'consume' 'eat' 'taste'
    * edible(held,carried,in_room,on_ground,take)	-> Eat
;

Verb 'echo'
    * 							-> Echo
;

Verb 'enchant'
    * object(in_room,on_ground)				-> Enchant
;

Verb 'enter'
    * object						-> EnterObj
    * 							-> Enter
;

Verb 'exit'
    * object						-> Exit
    * 							-> Exit
;

Verb 'describe' 'examine' 'what' 'whats'
    * 'onto'/'on' object(held,carried,in_room,on_ground,many) -> LookIn
    * 'into'/'inside'/'in' object(held,carried,in_room,on_ground,many) -> LookIn
    * object(many)					-> Examine
;

Verb 'banish' 'begone' 'cast' 'drive' 'exorcise'
    * 'away' animate					-> Banish
    * 'out' animate					-> Banish
    * object						-> Banish
;

Verb 'douse' 'extinguish'
    * light(held,carried,in_room,on_ground,take,have)	-> SwitchOff
;

Verb 'fill'
    * container(held,carried,in_room,on_ground)		-> Fill
    * container(held,carried,in_room,on_ground) 'with'/'using'/'thru'/'through' object -> Fill
;

Verb 'find' 'see' 'seek' 'where'
    * object						-> Find
;

Verb 'chase' 'come' 'follow' 'pursue'
    * object						-> Follow
    * 							-> Follow
;

Verb 'frobozz'
    * 							-> Frobozz
;

Verb 'donate' 'feed' 'give' 'offer'
    * animate(on_ground) object(held,many,have)		-> Give
    * object(held,many,have) 'to' animate(on_ground)	-> GiveTo
;

Verb 'hand'
    * animate(on_ground) object(held,many,have)		-> Give
    * object(held,many,have) 'to' animate(on_ground)	-> GiveTo
;

Verb 'hatch'
    * object						-> Hatch
;

Verb 'hello' 'hi'
    * object						-> Hello
    * 							-> Hello
;

Verb 'chant' 'incant'
    * 							-> Chant
;

Verb 'inflate'
    * object 'with'/'using'/'thru'/'through' toolbit(held,carried,in_room,on_ground) -> Inflate
;

Verb 'is' ! NOT IMPLEMENTED
    * object 'onto'/'on' object				-> IsOn
    * object 'into'/'inside'/'in' object		-> IsOn
;

Verb 'dive' 'jump' 'leap'
    * 'off' object					-> Dive
    * 'from' object					-> Dive
    * 'into'/'inside'/'in' object   -> Dive
    * 'across' object				-> Dive
    * 'over' object					-> Dive
    * 							    -> Dive
;

Verb 'kick' 'taunt'
    * object						-> Kick
;

Verb 'dispatch' 'kill' 'murder' 'slay'
    * animate(in_room,on_ground) 'with'/'using'/'thru'/'through' weapon(held,carried,have) -> Attack
;

Verb 'stab'
    * animate(in_room,on_ground) 'with'/'using'/'thru'/'through' weapon(held,carried,have) -> Attack
    * animate(in_room,on_ground)			-> Stab
;

Verb 'kiss'
    * animate(in_room,on_ground)			-> Kiss
;

Verb 'knock' 'rap'
    * 'down'/'d//' animate(in_room,on_ground)		-> Attack
    * 'onto'/'on' object				-> Knock
    * 'at' object					-> Knock
;

Verb 'launch'
    * vehicle						-> Launch
;

Verb 'lean'
    * 'onto'/'on' object(held,have)			-> LeanOn
;

Verb 'leave'
    * object						-> Drop
    * 							-> Leave
;

Verb 'light'
    * on(held,carried,in_room,on_ground) 'with'/'using'/'thru'/'through' flame(held,carried,take,have) -> Burn
    * on(held,carried,in_room,on_ground,take,have)	-> SwitchOn
;

Verb 'listen'
    * 'for' object					-> Listen
    * 'to' object					-> Listen
;

Verb 'lock'
    * object(in_room,on_ground) 'with'/'using'/'thru'/'through' toolbit(held,carried,in_room,on_ground,take) -> Lock
;

Verb 'gaze' 'l//' 'look' 'stare'
    * 'for' object					-> Find
    * 'at' object(held,carried,in_room,on_ground) 'with'/'using'/'thru'/'through' object -> Read
    * 'into'/'inside'/'in' object(held,carried,in_room,on_ground,many) -> LookIn
    * 'behind' object					-> LookBehind
    * 'undern'/'under'/'beneath'/'below' object		-> LookUnder
    * 'with'/'using'/'thru'/'through' object(held,carried,in_room,on_ground,many) -> LookIn
    * 'onto'/'on' object				-> LookOn
    * 'at' object(held,carried,in_room,on_ground,many)	-> Examine
    * 'down'/'d//' rmungbit				-> Look
    * 'up'/'u//' rmungbit				-> Look
    * 'around' rmungbit					-> Look
    * 							-> Look
;

Verb 'lower'
    * object						-> Lower
;

Verb 'grease' 'lubricate' 'oil'
    * object 'with'/'using'/'thru'/'through' object(held,carried) -> Grease
;

Verb 'make'
    * object						-> Make
;

Verb 'liquify' 'melt'
    * object 'with'/'using'/'thru'/'through' flame(held,carried,in_room,on_ground) -> Melt
;

Verb 'move'
    * object 'with'/'using'/'thru'/'through' toolbit	-> MoveWith
    * object(held,many,have) 'into'/'inside'/'in' object -> Insert
    * object(in_room,on_ground)				-> Move
;

Verb 'roll'
    * 'up'/'u//' object(in_room,on_ground)		-> Move
;

Verb 'mumble' 'sigh'
    * 							-> Mumble
;

Verb 'odysseus' 'ulysses'
    * 							-> Odysseus
;OdysseusSub

Verb 'open'
    * door(held,carried,in_room,on_ground) 'with'/'using'/'thru'/'through' toolbit(held,carried,in_room,on_ground,have) -> Open
    * 'up'/'u//' door(held,carried,in_room,on_ground)	-> Open
    * door(held,carried,in_room,on_ground)		-> Open
;

Verb 'pick'
    * 'up'/'u//' takeable(on_ground,many)		-> Take
    * object 'with'/'using'/'thru'/'through' object	-> Pick
    * object						-> Pick
;

Verb 'play'
    * object						-> Play
;

Verb 'fix' 'glue' 'patch' 'plug' 'repair'
    * object 'with'/'using'/'thru'/'through' object	-> Fix
;

Verb 'plugh' 'xyzzy'
    * 							-> Plugh
;

Verb 'poke'
    * -
;

Verb 'punctured'
    * animate(in_room,on_ground) 'with'/'using'/'thru'/'through' weapon(held,carried,have) -> Poke
;

Verb 'pour' 'spill'
    * object(held,carried) 'from' object		-> Drop
    * object(held,carried) 'onto'/'on' object		-> Pour
    * object(held,carried) 'into'/'inside'/'in' object	-> Drop
    * object(held,carried)				-> Drop
;

Verb 'pray'
    * 							-> Pray
;

Verb 'pull' 'tug' 'yank'
    * 'up'/'u//' object(in_room,on_ground)		-> Move
    * 'onto'/'on' object(in_room,on_ground)		-> Move
    * object(in_room,on_ground)				-> Move
;

Verb 'pump'
    * 'up'/'u//' object 'with'/'using'/'thru'/'through' object -> PumpUp
    * 'up'/'u//' object					-> PumpUp
;

Verb 'press' 'push'
    * object 'undern'/'under'/'beneath'/'below' object	-> PutUnder
    * object 'with'/'using'/'thru'/'through' toolbit	-> MoveWith
    * 'onto'/'on' object(in_room,on_ground,many)	-> Push
    * object(in_room,on_ground,many)			-> Push
    * object(in_room,on_ground) 'to' object		-> Slide
    * object(in_room,on_ground) object			-> Slide
;

Verb 'hide' 'insert' 'place' 'put' 'stuff'
    * object(held,many,have) 'behind' object		-> PutBehind
    * 'onto'/'on' object(carried,in_room,on_ground,many) -> Wear
    * 'out' light(held,carried,in_room,on_ground,take,have) -> SwitchOff
    * object(held,have) 'undern'/'under'/'beneath'/'below' object -> PutUnder
    * 'down'/'d//' object(held,many)			-> Drop
    * object(held,many,have) 'onto'/'on' object		-> PutOn
    * object(held,many,have) 'into'/'inside'/'in' object -> Insert
;

Verb 'lift' 'raise'
    * 'up'/'u//' object					-> Raise
    * object						-> Raise
;

Verb 'molest' 'rape'
    * animate						-> Molest
;

Verb 'read' 'skim'
    * readable(held,carried,in_room,on_ground,take) object -> ReadObjObj
    * readable(held,carried,in_room,on_ground,take) 'with'/'using'/'thru'/'through' object -> Read
    * 'from' readable(held,carried,in_room,on_ground,take) -> Read
    * readable(held,carried,in_room,on_ground,take)	-> Read
;

Verb 'repent'
    * 							-> Repent
;

Verb 'peal' 'ring'
    * object(take) 'with'/'using'/'thru'/'through' object -> Ring
    * object(take)					-> Ring
;

Verb 'feel' 'pat' 'pet' 'rub' 'touch'
    * object 'with'/'using'/'thru'/'through' object	-> Touch
    * object						-> Touch
;

Verb 'talk'
    * 'to' animate(in_room)				-> TalkTo
;

Verb 'say'
    * 							-> Say
;

Verb 'search'
    * 'for' object					-> Find
    * 'into'/'inside'/'in' object			-> Search
    * object						-> Search
;

Verb 'send'
    * 'for' object					-> SendFor
;

Verb 'shake'
    * object						-> Shake
;

Verb 'hop' 'skip'
    * 							-> Jump
;

Verb 'slide'
    * object(in_room,on_ground) 'to' object		-> Slide
    * object(in_room,on_ground) object			-> Slide
    * object 'undern'/'under'/'beneath'/'below' object	-> PutUnder
;

Verb 'smell' 'sniff'
    * object						-> Smell
;

Verb 'spin'
    * object						-> Spin
;

Verb 'spray'
    * object 'with'/'using'/'thru'/'through' object	-> SprayWith
    * object 'onto'/'on' object				-> SprayOn
;

Verb 'squeeze'
    * object 'onto'/'on' object				-> Insert
    * object						-> Squeeze
;

Verb 'stand'
    * 'up'/'u//' rmungbit				-> Stand
    * 							-> Stand
;

Verb 'stay'
    * 							-> Stay
;

Verb 'strike'
    * object(held,carried,in_room,on_ground)		-> Strike
    * animate(in_room,on_ground) 'with'/'using'/'thru'/'through' weapon(held,carried,in_room,on_ground,have) -> Attack
;

Verb 'bathe' 'swim' 'wade'
    * 'into'/'inside'/'in' object			-> Swim
    * 							-> Swim
;

Verb 'swing' 'thrust'
    * weapon(held,carried,have) 'at' animate(in_room,on_ground) -> Swing
    * weapon(held,carried,have)				-> Swing
;

Verb 'carry' 'catch' 'get' 'grab' 'hold' 'remove' 'take'
    * takeable(carried,in_room,many) 'from' object	-> Take
    * takeable(carried,in_room,many) 'off' object	-> Take
    * takeable(carried,in_room,many) 'out' object	-> Take
    * 'up'/'u//' rmungbit				-> Stand
    * 'onto'/'on' vehicle(in_room,on_ground)		-> ClimbOn
    * 'out' vehicle(in_room,on_ground)			-> Disembark
    * 'into'/'inside'/'in' vehicle(in_room,on_ground)	-> Board
    * takeable(in_room,on_ground,many)			-> Take
;

Verb 'ask' 'tell'
    * animate(in_room)					-> TalkTo
;

Verb 'chuck' 'hurl' 'throw' 'toss'
    * object(held,carried,have) 'over' object		-> ThrowOver
    * object(held,carried,have) 'off' object		-> ThrowOver
    * object(held,carried,have) 'onto'/'on' object	-> PutOn
    * object(held,carried,have) 'into'/'inside'/'in' object -> Insert
    * object object					-> ThrowTo
    * object(held,carried,have) 'with'/'using'/'thru'/'through' animate(in_room,on_ground) -> Throw
    * object(held,carried,have) 'at' animate(in_room,on_ground) -> Throw
;

Verb 'attach' 'fasten' 'secure' 'tie'
    * 'up'/'u//' animate(in_room,on_ground) 'with'/'using'/'thru'/'through' toolbit(held,carried,in_room,on_ground,have) -> TieWith
    * object 'to' object				-> TieTo
;

Verb 'temple' 'treasure'
    * 							-> TempleWord
;

Verb 'flip' 'set' 'shut' 'turn'
    * turnable 'for' object				-> MoveWith
    * turnable 'to' object				-> MoveWith
    * 'off' light(held,carried,in_room,on_ground,take,have) -> SwitchOff
    * 'onto'/'on' object 'with'/'using'/'thru'/'through' object(have) -> SwitchOn
    * 'onto'/'on' on(held,carried,in_room,on_ground)	-> SwitchOn
    * turnable(held,carried,in_room,on_ground) 'with'/'using'/'thru'/'through' toolbit(held,carried,in_room,on_ground,have) -> MoveWith
;

Verb 'unlock'
    * object(in_room,on_ground) 'with'/'using'/'thru'/'through' toolbit(held,carried,in_room,on_ground,take) -> Unlock
;

Verb 'free' 'unattach' 'unfasten' 'unhook' 'untie'
    * object(held,carried,in_room,on_ground) 'from' object -> Untie
    * object(held,carried,in_room,on_ground)		-> Untie
;

Verb 'wait' 'z//'
    * 							-> Wait
;

Verb 'awake' 'startle' 'surprise' 'wake'
    * 'up'/'u//' animate(in_room,on_ground)		-> Wake
    * animate(in_room,on_ground)			-> Wake
;

Verb 'go' 'proceed' 'run' 'step' 'walk'
    * 'down'/'d//' climbable(in_room,on_ground)		-> ClimbDown
    * 'up'/'u//' climbable(in_room,on_ground)		-> ClimbUp
    * 'around' object					-> WalkAround
    * 'to' object					-> WalkTo
    * 'over' object					-> Dive
    * 'onto'/'on' object				-> EnterObj
    * 'with'/'using'/'thru'/'through' object		-> EnterObj
    * 'into'/'inside'/'in' object			-> EnterObj
    * 'away' object					-> Go
    * object						-> Go
;

Verb 'brandish' 'wave'
    * object(held,carried,take,have) 'at' object	-> Wield
    * object(held,carried,take,have)			-> Wield
;

Verb 'wear'
    * object						-> Wear
;

Verb 'win' 'winnage'
    * 							-> Win
;

Verb 'wind'
    * 'up'/'u//' object					-> WindUp
    * object						-> WindUp
;

Verb 'wish'
    * 							-> Wish
;

Verb 'scream' 'shout' 'yell'
    * 							-> Yell
;

Verb 'zork'
    * 							-> Zork
;

! Object tree


Object cretin "cretin"	! 4 / 0x4
  with	strength 0,
	action 0,
	name 'adventurer',
  has	concealed sacred scenery animate;

Object not_here_object "such thing"	! 11 / 0xb
  with	action Not_Here_Object_F,
  has	;

Object Room_Holder ""	! 82 / 0x52
  with	in_to Room_Holder,
  has	;

Object -> west_of_house "West of House"	! 180 / 0xb4
  with	contains white_house board,
	action WestHouseAction,
	in_to (TO stone_barrow IF Won_flag),
	sw_to (TO stone_barrow IF Won_flag),
	se_to south_of_house,
	ne_to north_of_house,
	s_to south_of_house,
	w_to forest1,
	e_to "The door is boarded and you can't remove the boards.",
	n_to north_of_house,
  has	dry_land sacred light;

Object -> -> front_door "door"	! 181 / 0xb5
  with	adjectives 'front' 'boarded',
	action DoorAction,
	name 'door',
  has	scenery door;

Object -> -> small_mailbox "small mailbox"	! 160 / 0xa0
  with	capacity 10,
	adjectives 'small',
	action MailboxAction,
	name 'mailbox' 'box',
  has	trytakebit container;

Object -> -> -> leaflet "leaflet"	! 161 / 0xa1
  with	text_string "~WELCOME TO ZORK!^^ZORK is a game of adventure, danger, and low cunning. In it you will explore some of the most amazing territory ever seen by mortals. No computer should be without one!~^",
	description "A small leaflet is on the ground.",
	size 2,
	adjectives 'small',
	name 'advertisement' 'leaflet' 'booklet' 'mail',
  has	readable takeable flammable;

Object -> slide_room "Slide Room"	! 15 / 0xf
  with	contains chute,
	description "This is a small chamber, which appears to have been part of a coal mine. On the south wall of the chamber the letters ~Granite Wall~ are etched in the rock. To the east is a long passage, and there is a steep metal slide twisting downward. To the north is a small opening.",
	d_to cellar,
	e_to cold_passage,
	n_to mine_entrance,
  has	dry_land;

Object -> mine1 "Coal Mine"	! 16 / 0x10
  with	description "This is a non-descript part of a coal mine.",
	d_to ladder_top,
	w_to mine1,
	n_to mine2,
  has	dry_land;

Object -> mine2 "Coal Mine"	! 17 / 0x11
  with	description "This is a non-descript part of a coal mine.",
	sw_to mine1,
	s_to mine2,
	e_to mine3,
  has	dry_land;

Object -> mine3 "Coal Mine"	! 18 / 0x12
  with	description "This is a non-descript part of a coal mine.",
	se_to mine2,
	s_to mine4,
	n_to mine3,
  has	dry_land;

Object -> mine4 "Coal Mine"	! 19 / 0x13
  with	description "This is a non-descript part of a coal mine.",
	ne_to mine3,
	e_to mine4,
	n_to gas_room,
  has	dry_land;

Object -> machine_room "Machine Room"	! 157 / 0x9d
  with	action MachineRoomAction,
	n_to drafty_room,
  has	dry_land;

Object -> -> machine "machine"	! 158 / 0x9e
  with	capacity 50,
	action MachineAction,
	name 'machine' 'pdp1' 'dryer' 'lid',
  has	trytakebit scenery container;

Object -> -> switch "switch"	! 112 / 0x70
  with	action SwitchAction,
	name 'switch',
  has	scenery turnable;

Object -> drafty_room "Drafty Room"	! 228 / 0xe4
  with	pseudo 'chain' PseudoChainAction,
	description "This is a small drafty room in which is the bottom of a long shaft. To the south is a passageway and to the east a very narrow passage. In the shaft can be seen a heavy iron chain.",
	action DraftyRoomAction,
	out_to (TO timber_room IF Empty_handed ELSE "You cannot fit through this passage with that load."),
	s_to machine_room,
	e_to (TO timber_room IF Empty_handed ELSE "You cannot fit through this passage with that load."),
  has	dry_land sacred;

Object -> -> basket2 "basket"	! 229 / 0xe5
  with	description "From the chain is suspended a basket.",
	adjectives 'lowered',
	action BasketAction,
	name 'cage' 'dumbwaiter' 'basket',
  has	trytakebit;

Object -> timber_room "Timber Room"	! 206 / 0xce
  with	description "This is a long and narrow passage, which is cluttered with broken timbers. A wide passage comes from the east and turns at the west end of the room into a very narrow passageway. From the west comes a strong draft.",
	action DraftyRoomAction,
	w_to (TO drafty_room IF Empty_handed ELSE "You cannot fit through this passage with that load."),
	e_to ladder_bottom,
  has	dry_land sacred;

Object -> -> broken_timber "broken timber"	! 207 / 0xcf
  with	size 50,
	adjectives 'wooden' 'broken',
	name 'timber' 'pile',
  has	takeable;

Object -> dead_end "Dead End"	! 118 / 0x76
  with	description "You have come to a dead end in the mine.",
	n_to ladder_bottom,
  has	dry_land;

Object -> -> pile_of_coal "small pile of coal"	! 119 / 0x77
  with	size 20,
	adjectives 'small',
	name 'coal' 'pile' 'heap',
  has	takeable flammable;

Object -> ladder_bottom "Ladder Bottom"	! 20 / 0x14
  with	contains wooden_ladder,
	description "This is a rather wide room. On one side is the bottom of a narrow wooden ladder. To the west and the south are passages leaving the room.",
	u_to ladder_top,
	s_to dead_end,
	w_to timber_room,
  has	dry_land;

Object -> ladder_top "Ladder Top"	! 21 / 0x15
  with	contains wooden_ladder stairs,
	description "This is a very small room. In the corner is a rickety wooden ladder, leading downward. It might be safe to descend. There is also a staircase leading upward.",
	d_to ladder_bottom,
	u_to mine1,
  has	dry_land;

Object -> gas_room "Gas Room"	! 124 / 0x7c
  with	pseudo 'gas' PseudoGasAction 'odor' PseudoGasAction,
	contains stairs,
	description "This is a small room which smells strongly of coal gas. There is a short climb up some stairs and a narrow tunnel leading east.",
	action GasRoomAction,
	u_to smelly_room,
	e_to mine4,
  has	dry_land sacred;

Object -> -> bracelet "sapphire-encrusted bracelet"	! 125 / 0x7d
  with	trophy_value 5,
	take_value 5,
	size 10,
	adjectives 'sapphire',
	name 'bracelet' 'jewel' 'sapphire' 'treasure',
  has	takeable;

Object -> smelly_room "Smelly Room"	! 22 / 0x16
  with	pseudo 'odor' PseudoGasAction 'gas' PseudoGasAction,
	contains stairs,
	description "This is a small non-descript room. However, from the direction of a small descending staircase a foul odor can be detected. To the south is a narrow tunnel.",
	d_to gas_room,
	s_to shaft_room,
  has	dry_land;

Object -> shaft_room "Shaft Room"	! 226 / 0xe2
  with	pseudo 'chain' PseudoChainAction,
	description "This is a large room, in the middle of which is a small shaft descending through the floor into darkness below. To the west and the north are exits from this room. Constructed over the top of the shaft is a metal framework to which a heavy iron chain is attached.",
	d_to "You wouldn't fit and would die if you could.",
	w_to bat_room,
	n_to smelly_room,
  has	dry_land;

Object -> -> basket1 "basket"	! 227 / 0xe3
  with	capacity 50,
	description "At the end of the chain is a basket.",
	action BasketAction,
	name 'cage' 'dumbwaiter' 'basket',
  has	open transparent trytakebit container;

Object -> bat_room "Bat Room"	! 222 / 0xde
  with	action BatRoomAction,
	s_to squeaky_room,
	e_to shaft_room,
  has	dry_land sacred;

Object -> -> bat "bat"	! 223 / 0xdf
  with	initial2 BatInitial,
	adjectives 'vampire' 'deranged',
	action BatAction,
	name 'bat' 'vampire',
  has	trytakebit animate;

Object -> -> jade_figurine "jade figurine"	! 170 / 0xaa
  with	description "There is an exquisite jade figurine here.",
	trophy_value 5,
	take_value 5,
	size 10,
	adjectives 'exquisite' 'jade',
	name 'figurine' 'treasure',
  has	takeable;

Object -> squeaky_room "Squeaky Room"	! 23 / 0x17
  with	description "You are in a small room. Strange squeaky sounds may be heard coming from the passage at the north end. You may also escape to the east.",
	e_to mine_entrance,
	n_to bat_room,
  has	dry_land;

Object -> mine_entrance "Mine Entrance"	! 24 / 0x18
  with	description "You are standing at the entrance of what might have been a coal mine. The shaft enters the west wall, and there is another exit on the south end of the room.",
	in_to squeaky_room,
	s_to slide_room,
	w_to squeaky_room,
  has	dry_land;

Object -> canyon_view "Canyon View"	! 25 / 0x19
  with	contains cliff river rainbow,
	description "You are at the top of the Great Canyon on its west wall. From here there is a marvelous view of the canyon and parts of the Frigid River upstream. Across the canyon, the walls of the White Cliffs join the mighty ramparts of the Flathead Mountains to the east. Following the Canyon upstream to the north, Aragain Falls may be seen, complete with rainbow. The mighty Frigid River flows out from a great dark cavern. To the west and south can be seen an immense forest, stretching for miles around. A path leads northwest. It is possible to climb down into the canyon from here.",
	action ClifftopAction,
	d_to rocky_ledge,
	nw_to clearing2,
	s_to "Storm-tossed trees block your way.",
	w_to forest4,
	e_to rocky_ledge,
  has	dry_land sacred light;

Object -> rocky_ledge "Rocky Ledge"	! 26 / 0x1a
  with	contains cliff river,
	description "You are on a ledge about halfway up the wall of the river canyon. You can see from here that the main flow from Aragain Falls twists along a passage which it is impossible to enter. Below you is the canyon bottom. Above you is more cliff, which appears climbable.",
	d_to canyon_bottom,
	u_to canyon_view,
  has	dry_land sacred light;

Object -> canyon_bottom "Canyon Bottom"	! 27 / 0x1b
  with	contains water cliff river,
	description "You are beneath the walls of the river canyon which may be climbable here. The lesser part of the runoff of Aragain Falls flows by below. To the north is a narrow path.",
	u_to rocky_ledge,
	n_to end_of_rainbow,
  has	dry_land sacred light;

Object -> end_of_rainbow "End of Rainbow"	! 136 / 0x88
  with	contains water rainbow river,
	description "You are on a small, rocky beach on the continuation of the Frigid River past the Falls. The beach is narrow due to the presence of the White Cliffs. The river canyon opens here and sunlight shines in from above. A rainbow crosses over the falls to the east and a narrow path continues to the southwest.",
	u_to (TO on_the_rainbow IF Rainbow_flag),
	sw_to canyon_bottom,
	ne_to (TO on_the_rainbow IF Rainbow_flag),
	e_to (TO on_the_rainbow IF Rainbow_flag),
  has	dry_land light;

Object -> -> pot_of_gold "pot of gold"	! 137 / 0x89
  with	trophy_value 10,
	take_value 10,
	initial "At the end of the rainbow is a pot of gold.",
	size 15,
	adjectives 'gold',
	name 'pot' 'gold' 'treasure',
  has	concealed takeable;

Object -> on_the_rainbow "On the Rainbow"	! 28 / 0x1c
  with	contains rainbow,
	description "You are on top of a rainbow (I bet you never thought you would walk on a rainbow), with a magnificent view of the Falls. The rainbow travels east-west here.",
	w_to end_of_rainbow,
	e_to aragain_falls,
  has	dry_land sacred light;

Object -> aragain_falls "Aragain Falls"	! 29 / 0x1d
  with	contains water river rainbow,
	action FallsAction,
	d_to "It's a long way...",
	u_to (TO on_the_rainbow IF Rainbow_flag),
	w_to (TO on_the_rainbow IF Rainbow_flag),
	n_to shore,
  has	dry_land sacred light;

Object -> sandy_cave "Sandy Cave"	! 126 / 0x7e
  with	description "This is a sand-filled cave whose exit is to the southwest.",
	sw_to sandy_beach,
  has	dry_land;

Object -> -> sand "sand"	! 127 / 0x7f
  with	action SandFunction,
	name 'sand',
  has	scenery;

Object -> -> scarab "beautiful jeweled scarab"	! 116 / 0x74
  with	trophy_value 5,
	take_value 5,
	size 8,
	adjectives 'beautiful' 'carved' 'jeweled',
	name 'scarab' 'bug' 'beetle' 'treasure',
  has	concealed takeable;

Object -> sandy_beach "Sandy Beach"	! 120 / 0x78
  with	contains water river,
	description "You are on a large sandy beach on the east shore of the river, which is flowing quickly by. A path runs beside the river to the south here, and a passage is partially buried in sand to the northeast.",
	ne_to sandy_cave,
	s_to shore,
  has	dry_land sacred;

Object -> -> shovel "shovel"	! 121 / 0x79
  with	size 15,
	name 'shovel' 'tool' 'tools',
  has	takeable toolbit;

Object -> shore "Shore"	! 30 / 0x1e
  with	contains water river,
	description "You are on the east shore of the river. The water here seems somewhat treacherous. A path travels from north to south here, the south end quickly turning around a sharp corner.",
	s_to aragain_falls,
	n_to sandy_beach,
  has	dry_land sacred light;

Object -> river1 "Frigid River"	! 31 / 0x1f
  with	contains water river,
	description "The sound of rushing water is nearly unbearable here. On the east shore is a large landing area.",
	land_to shore,
	u_to "You cannot go upstream due to strong currents.",
	e_to shore,
  has	water_room sacred light;

Object -> frigid_river "Frigid River"	! 130 / 0x82
  with	contains water river,
	description "The river is running faster here and the sound ahead appears to be that of rushing water. On the east shore is a sandy beach. A small area of beach can also be seen below the cliffs on the west shore.",
	action River2Action,
	land_to "You can land either to the east or the west.",
	d_to river1,
	u_to "You cannot go upstream due to strong currents.",
	w_to beach1,
	e_to sandy_beach,
  has	water_room sacred;

Object -> -> red_buoy "red buoy"	! 162 / 0xa2
  with	capacity 20,
	initial "There is a red buoy here (probably a warning).",
	size 10,
	adjectives 'red',
	action BuoyAction,
	name 'buoy',
  has	takeable container;

Object -> -> -> large_emerald "large emerald"	! 163 / 0xa3
  with	trophy_value 10,
	take_value 5,
	adjectives 'large',
	name 'emerald' 'treasure',
  has	takeable;

Object -> beach1 "White Cliffs Beach"	! 32 / 0x20
  with	contains water white_cliffs river,
	description "You are on a rocky, narrow strip of beach beside the Cliffs. A narrow path leads north along the shore.",
	action BeachAction,
	n_to (TO beach2 IF Deflated ELSE "The path is too narrow."),
  has	dry_land sacred;

Object -> beach2 "White Cliffs Beach"	! 33 / 0x21
  with	contains water white_cliffs river,
	description "You are on a narrow strip of beach which runs along the base of the White Cliffs. There is a narrow path heading south along the Cliffs and a tight passage leading west into the cliffs themselves.",
	action BeachAction,
	s_to (TO beach1 IF Deflated ELSE "The path is too narrow."),
	w_to (TO damp_cave IF Deflated ELSE "The path is too narrow."),
  has	dry_land sacred;

Object -> river2 "Frigid River"	! 34 / 0x22
  with	contains water river,
	description "The river descends here into a valley. There is a narrow beach on the west shore below the cliffs. In the distance a faint rumbling can be heard.",
	land_to beach2,
	d_to frigid_river,
	u_to "You cannot go upstream due to strong currents.",
	w_to beach2,
  has	water_room sacred;

Object -> river3 "Frigid River"	! 35 / 0x23
  with	contains water river,
	description "The river turns a corner here making it impossible to see the Dam. The White Cliffs loom on the east bank and large rocks prevent landing on the west.",
	land_to "There is no safe landing spot here.",
	d_to river2,
	u_to "You cannot go upstream due to strong currents.",
	w_to "Just in time you steer away from the rocks.",
	e_to "The White Cliffs prevent your landing here.",
  has	water_room sacred;

Object -> river4 "Frigid River"	! 36 / 0x24
  with	contains water river,
	description "You are on the Frigid River in the vicinity of the Dam. The river flows quietly here. There is a landing on the west shore.",
	land_to dam_base,
	d_to river3,
	u_to "You cannot go upstream due to strong currents.",
	w_to dam_base,
	e_to "The White Cliffs prevent your landing here.",
  has	water_room sacred light;

Object -> dam_base "Dam Base"	! 140 / 0x8c
  with	contains water river,
	description "You are at the base of Flood Control Dam #3, which looms above you and to the north. The river Frigid is flowing by here. Along the river are the White Cliffs which seem to form giant walls stretching from north to south along the shores of the river as it winds its way downstream.",
	u_to dam,
	n_to dam,
  has	dry_land sacred light;

Object -> -> pile_of_plastic "pile of plastic"	! 141 / 0x8d
  with	description "There is a folded pile of plastic here which has a small valve attached.",
	size 20,
	adjectives 'plastic' 'inflatable',
	action PlasticAction,
	name 'boat' 'pile' 'plastic' 'valve',
  has	takeable flammable;

Object -> maintenance_room "Maintenance Room"	! 199 / 0xc7
  with	description "This is what appears to have been the maintenance room for Flood Control Dam #3. Apparently, this room has been ransacked recently, for most of the valuable equipment is gone. On the wall in front of you is a group of buttons colored blue, yellow, brown, and red. There are doorways to the west and south.",
	s_to dam_lobby,
	w_to dam_lobby,
  has	dry_land;

Object -> -> tool_chests "group of tool chests"	! 200 / 0xc8
  with	adjectives 'tool',
	action ChestAction,
	name 'chest' 'chests' 'group' 'toolchests',
  has	sacred open trytakebit container;

Object -> -> wrench "wrench"	! 91 / 0x5b
  with	size 10,
	name 'wrench' 'tool' 'tools',
  has	takeable toolbit;

Object -> -> tube "tube"	! 99 / 0x63
  with	text_string "---> Frobozz Magic Gunk Company <---^@{9}  All-Purpose Gunk",
	capacity 7,
	description "There is an object which looks like a tube of toothpaste here.",
	size 5,
	action TubeAction,
	name 'tube' 'tooth' 'paste',
  has	readable takeable container;

Object -> -> -> viscous_material "viscous material"	! 98 / 0x62
  with	size 6,
	adjectives 'viscous',
	action GlueAction,
	name 'material' 'gunk',
  has	takeable toolbit;

Object -> -> screwdriver "screwdriver"	! 123 / 0x7b
  with	adjectives 'screw',
	name 'screwdriver' 'tool' 'tools' 'driver',
  has	takeable toolbit;

Object -> -> leak "leak"	! 159 / 0x9f
  with	action LeakAction,
	name 'leak' 'drip' 'pipe',
  has	concealed scenery;

Object -> -> blue_button "blue button"	! 195 / 0xc3
  with	adjectives 'blue',
	action ButtonAction,
	name 'button' 'switch',
  has	scenery;

Object -> -> red_button "red button"	! 196 / 0xc4
  with	adjectives 'red',
	action ButtonAction,
	name 'button' 'switch',
  has	scenery;

Object -> -> brown_button "brown button"	! 197 / 0xc5
  with	adjectives 'brown',
	action ButtonAction,
	name 'button' 'switch',
  has	scenery;

Object -> -> yellow_button "yellow button"	! 198 / 0xc6
  with	adjectives 'yellow',
	action ButtonAction,
	name 'button' 'switch',
  has	scenery;

Object -> dam_lobby "Dam Lobby"	! 154 / 0x9a
  with	description "This room appears to have been the waiting room for groups touring the dam. There are open doorways here to the north and east marked ~Private~, and there is an path leading south over the top of the dam.",
	s_to dam,
	e_to maintenance_room,
	n_to maintenance_room,
  has	dry_land light;

Object -> -> matchbook "matchbook"	! 155 / 0x9b
  with	text_string "^(Close cover before striking)^^YOU too can make BIG MONEY in the exciting field of PAPER SHUFFLING!^^Mr. Anderson of Muddle, Mass. says: ~Before I took this course I was a lowly bit twiddler. Now with what I learned at GUE Tech I feel really important and can obfuscate and confuse with the best.~^^Dr. Blank had this to say: ~Ten short days ago all I could look forward to was a dead-end job as a doctor. Now I have a promising future and make really big Zorkmids.~^^GUE Tech can't promise these fantastic results to everyone. But when you earn your degree from GUE Tech, your future will be brighter.^",
	description "There is a matchbook whose cover says ~Visit Beautiful FCD#3~ here.",
	size 2,
	adjectives 'match',
	action MatchAction,
	name 'match' 'matches' 'matchbook',
  has	readable takeable;

Object -> -> tour_guidebook "tour guidebook"	! 103 / 0x67
  with	text_string "~@{9}Flood Control Dam #3^^FCD#3 was constructed in year 783 of the Great Underground Empire to harness the mighty Frigid River. This work was supported by a grant of 37 million zorkmids from your omnipotent local tyrant Lord Dimwit Flathead the Excessive. This impressive structure is composed of 370,000 cubic feet of concrete, is 256 feet tall at the center, and 193 feet wide at the top. The lake created behind the dam has a volume of 1.7 billion cubic feet, an area of 12 million square feet, and a shore line of 36 thousand feet.^^We will now point out some of the more interesting features of FCD#3 as we conduct you on a guided tour of the facilities:^        1) You start your tour here in the Dam Lobby. You will notice on your right that....",
	initial "Some guidebooks entitled ~Flood Control Dam #3~ are on the reception desk.",
	adjectives 'tour' 'guide',
	name 'guide' 'book' 'books' 'guidebook',
  has	readable takeable flammable;

Object -> dam "Dam"	! 215 / 0xd7
  with	contains water,
	action DamAction,
	d_to dam_base,
	s_to deep_canyon,
	w_to reservoir_south,
	e_to dam_base,
	n_to dam_lobby,
  has	dry_land light;

Object -> -> bolt "bolt"	! 216 / 0xd8
  with	adjectives 'metal' 'large',
	action BoltAction,
	name 'bolt' 'nut',
  has	trytakebit scenery turnable;

Object -> -> control_panel "control panel"	! 90 / 0x5a
  with	adjectives 'contro',
	name 'panel',
  has	scenery;

Object -> -> dam_scenery "dam"	! 184 / 0xb8
  with	action DamSceneryAction,
	name 'dam' 'gate' 'gates',
  has	trytakebit scenery;

Object -> -> green_bubble "green bubble"	! 214 / 0xd6
  with	adjectives 'small' 'green' 'plastic',
	action BubbleAction,
	name 'bubble',
  has	trytakebit scenery;

Object -> altar "Altar"	! 212 / 0xd4
  with	description "This is the south end of a large temple. In front of you is what appears to be an altar. In one corner is a small hole in the floor which leads into darkness. You probably could not get back up it.",
	action AltarAction,
	d_to (TO cave1 IF Coffin_held ELSE "You haven't a prayer of getting the coffin down there."),
	n_to temple,
  has	dry_land sacred light;

Object -> -> altar_scenery "altar"	! 213 / 0xd5
  with	capacity 50,
	name 'altar',
  has	supporter open scenery container;

Object -> -> -> black_book "black book"	! 211 / 0xd3
  with	text_string "Commandment #12592^^Oh ye who go about saying unto each:  ~Hello sailor~:^Dost thou know the magnitude of thy sin before the gods?^Yea, verily, thou shalt be ground between two stones.^Shall the angry gods cast thy body into the whirlpool?^Surely, thy eye shall be put out with a sharp stick!^Even unto the ends of the earth shalt thou wander and^Unto the land of the dead shalt thou be sent at last.^Surely thou shalt repent of thy cunning.",
	initial "On the altar is a large black book, open to page 569.",
	size 10,
	adjectives 'large' 'black',
	action BookAction,
	name 'book' 'prayer' 'page' 'books',
  has	turnable readable takeable container flammable;

Object -> -> pair_of_candles "pair of candles"	! 147 / 0x93
  with	initial "On the two ends of the altar are burning candles.",
	size 10,
	adjectives 'burning',
	action CandleAction,
	name 'candle' 'pair',
  has	takeable light flame on;

Object -> temple "Temple"	! 220 / 0xdc
  with	contains stairs,
	description "This is the north end of a large temple. On the east wall is an ancient inscription, probably a prayer in a long-forgotten language. Below the prayer is a staircase leading down. The west wall is solid granite. The exit to the north end of the room is through huge marble pillars.",
	out_to torch_room,
	d_to egyptian_room,
	u_to torch_room,
	s_to altar,
	e_to egyptian_room,
	n_to torch_room,
  has	dry_land sacred light;

Object -> -> brass_bell "brass bell"	! 221 / 0xdd
  with	adjectives 'small' 'brass',
	action BellAction,
	name 'bell',
  has	takeable;

Object -> -> prayer "prayer"	! 135 / 0x87
  with	text_string "The prayer is inscribed in an ancient script, rarely used today. It seems to be a philippic against small insects, absent-mindedness, and the picking up and dropping of small objects. The final verse consigns trespassers to the land of the dead. All evidence indicates that the beliefs of the ancient Zorkers were obscure.",
	adjectives 'ancient' 'old',
	name 'prayer' 'inscription',
  has	sacred scenery readable;

Object -> torch_room "Torch Room"	! 105 / 0x69
  with	pseudo 'dome' PseudoDomeAction,
	contains stairs,
	action TorchRoomAction,
	d_to temple,
	u_to "You cannot reach the rope.",
	s_to temple,
  has	dry_land;

Object -> -> pedestal "pedestal"	! 106 / 0x6a
  with	capacity 30,
	adjectives 'white' 'marble',
	action PedestalAction,
	name 'pedestal',
  has	supporter open scenery container;

Object -> -> -> torch "torch"	! 104 / 0x68
  with	trophy_value 6,
	take_value 14,
	initial "Sitting on the pedestal is a flaming torch, made of ivory.",
	size 20,
	adjectives 'flaming' 'ivory',
	action TorchAction,
	name 'torch' 'ivory' 'treasure',
  has	takeable light flame on;

Object -> dome_room "Dome Room"	! 133 / 0x85
  with	pseudo 'dome' PseudoDomeAction,
	action DomeRoomAction,
	d_to (TO torch_room IF Dome_flag ELSE "You cannot go down without fracturing many bones."),
	w_to engravings_cave,
  has	dry_land;

Object -> -> wooden_railing "wooden railing"	! 134 / 0x86
  with	adjectives 'wooden',
	name 'railing' 'rail',
  has	scenery;

Object -> egyptian_room "Egyptian Room"	! 175 / 0xaf
  with	contains stairs,
	description "This is a room which looks like an Egyptian tomb. There is an ascending staircase to the west.",
	u_to temple,
	w_to temple,
  has	dry_land;

Object -> -> gold_coffin "gold coffin"	! 208 / 0xd0
  with	capacity 35,
	description "The solid-gold coffin used for the burial of Ramses II is here.",
	trophy_value 15,
	take_value 10,
	size 55,
	adjectives 'solid' 'gold',
	name 'coffin' 'casket' 'treasure',
  has	scope_inside sacred takeable container;

Object -> -> -> sceptre "sceptre"	! 209 / 0xd1
  with	description "An ornamented sceptre, tapering to a sharp point, is here.",
	trophy_value 6,
	take_value 4,
	initial "A sceptre, possibly that of ancient Egypt itself, is in the coffin. The sceptre is ornamented with colored enamel, and tapers to a sharp point.",
	size 3,
	adjectives 'sharp' 'egyptian' 'ancient' 'enamel',
	action SceptreAction,
	name 'sceptre' 'scepter' 'treasure',
  has	takeable weapon;

Object -> engravings_cave "Engravings Cave"	! 96 / 0x60
  with	description "You have entered a low cave with passages leading northwest and east.",
	nw_to round_room,
	e_to dome_room,
  has	dry_land;

Object -> -> wall_with_engravings "wall with engravings"	! 97 / 0x61
  with	text_string "The engravings were incised in the living rock of the cave wall by an unknown hand. They depict, in symbolic form, the beliefs of the ancient Zorkers. Skillfully interwoven with the bas reliefs are excerpts illustrating the major religious tenets of that time. Unfortunately, a later age seems to have considered them blasphemous and just as skillfully excised them.",
	description "There are old engravings on the walls here.",
	adjectives 'old' 'ancient',
	name 'wall' 'engravings' 'inscription',
  has	sacred readable;

Object -> land_of_the_dead "Land of the Dead"	! 230 / 0xe6
  with	contains pile_of_bodies,
	description "You have entered the Land of the Living Dead. Thousands of lost souls can be heard weeping and moaning. In the corner are stacked the remains of dozens of previous adventurers less fortunate than yourself. A passage exits to the north.",
	out_to entrance_to_hades,
	n_to entrance_to_hades,
  has	dry_land light;

Object -> -> crystal_skull "crystal skull"	! 231 / 0xe7
  with	trophy_value 10,
	take_value 10,
	initial "Lying in one corner of the room is a beautifully carved crystal skull. It appears to be grinning at you rather nastily.",
	adjectives 'crystal',
	name 'skull' 'head' 'treasure',
  has	takeable;

Object -> entrance_to_hades "Entrance to Hades"	! 232 / 0xe8
  with	pseudo 'gate' PseudoGateAction 'gates' PseudoGateAction,
	contains pile_of_bodies,
	action HadesAction,
	in_to (TO land_of_the_dead IF LLD_flag ELSE "Some invisible force prevents you from passing through the gate."),
	u_to cave1,
	s_to (TO land_of_the_dead IF LLD_flag ELSE "Some invisible force prevents you from passing through the gate."),
  has	dry_land light;

Object -> -> number_of_ghosts "number of ghosts"	! 233 / 0xe9
  with	adjectives 'invisible' 'evil',
	action GhostAction,
	name 'ghosts' 'spirit' 'fiends' 'force',
  has	scenery animate;

Object -> chasm "Chasm"	! 37 / 0x25
  with	pseudo 'chasm' PseudoChasmAction,
	contains crack,
	description "A chasm runs southwest to northeast and the path follows it. You are on the south side of the chasm, where a crack opens into a passage.",
	d_to "Are you out of your mind?",
	sw_to e_w_passage,
	ne_to reservoir_south,
	s_to n_s_passage,
  has	dry_land;

Object -> n_s_passage "North-South Passage"	! 38 / 0x26
  with	description "This is a high north-south passage, which forks to the northeast.",
	ne_to deep_canyon,
	s_to round_room,
	n_to chasm,
  has	dry_land;

Object -> loud_room "Loud Room"	! 138 / 0x8a
  with	contains stairs,
	action LoudRoomAction,
	u_to deep_canyon,
	w_to round_room,
	e_to damp_cave,
  has	dry_land;

Object -> -> platinum_bar "platinum bar"	! 139 / 0x8b
  with	description "On the ground is a large platinum bar.",
	trophy_value 5,
	take_value 10,
	size 20,
	adjectives 'platinum' 'large',
	name 'bar' 'platinum' 'treasure',
  has	sacred takeable;

Object -> damp_cave "Damp Cave"	! 39 / 0x27
  with	contains crack,
	description "This cave has exits to the west and east, and narrows to a crack toward the south. The earth is particularly damp here.",
	s_to "It is too narrow for most insects.",
	w_to loud_room,
	e_to beach2,
  has	dry_land;

Object -> deep_canyon "Deep Canyon"	! 40 / 0x28
  with	contains stairs,
	action DeepCanyonAction,
	d_to loud_room,
	sw_to n_s_passage,
	nw_to reservoir_south,
	e_to dam,
  has	dry_land;

Object -> round_room "Round Room"	! 107 / 0x6b
  with	description "This is a circular stone room with passages in all directions. Several of them have unfortunately been blocked by cave-ins.",
	se_to engravings_cave,
	s_to narrow_passage,
	w_to e_w_passage,
	e_to loud_room,
	n_to n_s_passage,
  has	dry_land;

Object -> -> thief "thief"	! 114 / 0x72
  with	strength 5,
	description "There is a suspicious-looking individual, holding a large bag, leaning against one wall. He is armed with a deadly stiletto.",
	adjectives 'shady' 'suspicious' 'seedy',
	action ThiefAction,
	name 'thief' 'robber' 'criminal' 'individual',
  has	concealed open trytakebit container animate;

Object -> -> -> large_bag "large bag"	! 115 / 0x73
  with	adjectives 'large' 'thiefs',
	action ThiefBagAction,
	name 'bag',
  has	trytakebit scenery;

Object -> -> -> stiletto "stiletto"	! 113 / 0x71
  with	size 10,
	adjectives 'vicious',
	action StilettoAction,
	name 'stiletto',
  has	trytakebit scenery takeable weapon;

Object -> e_w_passage "East-West Passage"	! 41 / 0x29
  with	contains stairs,
	description "This is a narrow east-west passageway. There is a narrow stairway leading down at the north end of the room.",
	take_value 5,
	d_to chasm,
	w_to the_troll_room,
	e_to round_room,
	n_to chasm,
  has	dry_land;

Object -> atlantis_room "Atlantis Room"	! 187 / 0xbb
  with	contains stairs,
	description "This is an ancient room, long under water. There is an exit to the south and a staircase leading up.",
	u_to cave2,
	s_to reservoir_north,
  has	dry_land;

Object -> -> crystal_trident "crystal trident"	! 188 / 0xbc
  with	trophy_value 11,
	take_value 4,
	initial "On the shore lies Poseidon's own crystal trident.",
	size 20,
	adjectives 'poseidon' 'own' 'crystal',
	name 'trident' 'fork' 'treasure',
  has	takeable;

Object -> twisting_passage "Twisting Passage"	! 42 / 0x2a
  with	description "This is a winding passage. It seems that there are only exits on the east and north.",
	e_to cave2,
	n_to mirror_room1,
  has	dry_land;

Object -> winding_passage "Winding Passage"	! 43 / 0x2b
  with	description "This is a winding passage. It seems that there are only exits on the east and north.",
	e_to cave1,
	n_to mirror_room2,
  has	dry_land;

Object -> narrow_passage "Narrow Passage"	! 44 / 0x2c
  with	description "This is a long and narrow corridor where a long north-south passageway briefly narrows even further.",
	s_to mirror_room2,
	n_to round_room,
  has	dry_land;

Object -> cold_passage "Cold Passage"	! 45 / 0x2d
  with	description "This is a cold and damp corridor where a long east-west passageway turns into a southward path.",
	s_to mirror_room1,
	w_to slide_room,
  has	dry_land;

Object -> cave1 "Cave"	! 46 / 0x2e
  with	contains stairs,
	description "This is a tiny cave with entrances west and north, and a dark, forbidding staircase leading down.",
	action CaveWindAction,
	d_to entrance_to_hades,
	w_to winding_passage,
	n_to mirror_room2,
  has	dry_land;

Object -> cave2 "Cave"	! 47 / 0x2f
  with	contains stairs,
	description "This is a tiny cave with entrances west and north, and a staircase leading down.",
	d_to atlantis_room,
	s_to atlantis_room,
	w_to twisting_passage,
	n_to mirror_room1,
  has	dry_land;

Object -> mirror_room2 "Mirror Room"	! 152 / 0x98
  with	action MirrorRoomAction,
	w_to winding_passage,
	e_to cave1,
	n_to narrow_passage,
  has	dry_land light;

Object -> -> mirror2 "mirror"	! 153 / 0x99
  with	action MirrorAction,
	name 'reflection' 'mirror' 'enormous',
  has	trytakebit scenery;

Object -> mirror_room1 "Mirror Room"	! 150 / 0x96
  with	action MirrorRoomAction,
	w_to twisting_passage,
	e_to cave2,
	n_to cold_passage,
  has	dry_land;

Object -> -> mirror1 "mirror"	! 151 / 0x97
  with	action MirrorAction,
	name 'reflection' 'mirror' 'enormous',
  has	trytakebit scenery;

Object -> stream "Stream"	! 48 / 0x30
  with	pseudo 'stream' PseudoStreamAction,
	contains water,
	description "You are on the gently flowing stream. The upstream route is too narrow to navigate, and the downstream route is invisible due to twisting walls. There is a narrow beach to land on.",
	land_to stream_view,
	d_to reservoir,
	u_to "The channel is too narrow.",
	w_to "The channel is too narrow.",
	e_to reservoir,
  has	water_room;

Object -> stream_view "Stream View"	! 49 / 0x31
  with	pseudo 'stream' PseudoStreamAction,
	contains water,
	description "You are standing on a path beside a gently flowing stream. The path follows the stream, which flows from west to east.",
	w_to "The stream emerges from a spot too small for you to enter.",
	e_to reservoir_south,
  has	dry_land;

Object -> reservoir_north "Reservoir North"	! 172 / 0xac
  with	pseudo 'lake' PseudoLakeAction,
	contains water stairs,
	action ReservoirNAction,
	s_to (TO reservoir IF Low_tide ELSE "You would drown."),
	n_to atlantis_room,
  has	dry_land;

Object -> -> air_pump "hand-held air pump"	! 173 / 0xad
  with	adjectives 'small' 'hand-',
	name 'pump' 'air-p' 'tool' 'tools',
  has	takeable toolbit;

Object -> reservoir "Reservoir"	! 100 / 0x64
  with	pseudo 'stream' PseudoStreamAction,
	contains water,
	action ReservoirAction,
	d_to "The dam blocks your way.",
	u_to stream,
	s_to reservoir_south,
	w_to stream,
	n_to reservoir_north,
  has	water_room;

Object -> -> trunk_of_jewels "trunk of jewels"	! 101 / 0x65
  with	description "There is an old trunk here, bulging with assorted jewels.",
	trophy_value 5,
	take_value 15,
	initial "Lying half buried in the mud is an old trunk, bulging with jewels.",
	size 35,
	adjectives 'old',
	action TrunkAction,
	name 'trunk' 'chest' 'jewels' 'treasure',
  has	concealed takeable;

Object -> reservoir_south "Reservoir South"	! 50 / 0x32
  with	pseudo 'lake' PseudoLakeAction 'chasm' PseudoChasmAction,
	contains water,
	action ReservoirSAction,
	sw_to chasm,
	se_to deep_canyon,
	w_to stream_view,
	e_to dam,
	n_to (TO reservoir IF Low_tide ELSE "You would drown."),
  has	dry_land;

Object -> treasure_room "Treasure Room"	! 190 / 0xbe
  with	contains stairs,
	description "This is a large room, whose east wall is solid granite. A number of discarded bags, which crumble at your touch, are scattered about on the floor. There is an exit down a staircase.",
	take_value 25,
	action TreasureRoomAction,
	d_to cyclops_room,
  has	dry_land;

Object -> -> chalice "chalice"	! 191 / 0xbf
  with	capacity 5,
	description "There is a silver chalice, intricately engraved, here.",
	trophy_value 5,
	take_value 10,
	size 10,
	adjectives 'silver' 'engravings',
	action ChaliceAction,
	name 'chalic' 'cup' 'silver' 'treasure',
  has	trytakebit takeable container;

Object -> strange_passage "Strange Passage"	! 51 / 0x33
  with	description "This is a long passage. To the west is one entrance. On the east there is an old wooden door, with a large opening in it (about cyclops sized).",
	in_to cyclops_room,
	w_to cyclops_room,
	e_to living_room,
  has	dry_land;

Object -> cyclops_room "Cyclops Room"	! 185 / 0xb9
  with	contains stairs,
	action CyclopsRoomAction,
	u_to (TO treasure_room IF Cyclops_flag ELSE "The cyclops doesn't look like he'll let you past."),
	nw_to maze8,
	e_to (TO strange_passage IF Magic_flag ELSE "The east wall is solid rock."),
  has	dry_land;

Object -> -> cyclops "cyclops"	! 186 / 0xba
  with	strength 10000,
	adjectives 'hungry' 'giant',
	action CyclopsAction,
	name 'cyclops' 'monster' 'eye',
  has	trytakebit scenery animate;

Object -> maze8 "Maze"	! 52 / 0x34
  with	description "This is part of a maze of twisty little passages, all alike.",
	se_to cyclops_room,
	s_to maze7,
	w_to maze9,
  has	maze_room dry_land;

Object -> maze9 "Maze"	! 53 / 0x35
  with	description "This is part of a maze of twisty little passages, all alike.",
	nw_to maze9,
	ne_to maze7,
	s_to maze7,
	w_to maze8,
  has	maze_room dry_land;

Object -> maze10 "Maze"	! 54 / 0x36
  with	description "This is part of a maze of twisty little passages, all alike.",
	d_to maze12,
	s_to maze14,
	w_to maze13,
	e_to maze15,
  has	maze_room dry_land;

Object -> maze11 "Dead End"	! 55 / 0x37
  with	description "You have come to a dead end in the maze.",
	s_to maze12,
  has	maze_room dry_land;

Object -> maze12 "Maze"	! 56 / 0x38
  with	description "This is part of a maze of twisty little passages, all alike.",
	d_to DownMazeAction,
	u_to maze15,
	sw_to maze13,
	e_to maze10,
	n_to maze11,
  has	maze_room dry_land;

Object -> grating_room "Grating Room"	! 57 / 0x39
  with	contains grating,
	action GratingRoomAction,
	u_to (TO clearing1 IF grating IS OPEN ELSE "The grating is closed."),
	sw_to maze13,
  has	dry_land;

Object -> maze13 "Maze"	! 58 / 0x3a
  with	description "This is part of a maze of twisty little passages, all alike.",
	d_to maze14,
	sw_to maze12,
	nw_to maze10,
	ne_to grating_room,
  has	maze_room dry_land;

Object -> maze14 "Maze"	! 59 / 0x3b
  with	description "This is part of a maze of twisty little passages, all alike.",
	u_to maze13,
	w_to maze10,
	e_to maze15,
  has	maze_room dry_land;

Object -> maze15 "Maze"	! 60 / 0x3c
  with	description "This is part of a maze of twisty little passages, all alike.",
	d_to DownMazeAction,
	nw_to maze15,
	s_to maze10,
	w_to maze12,
	e_to maze14,
	n_to maze6,
  has	maze_room dry_land;

Object -> maze16 "Dead End"	! 61 / 0x3d
  with	description "You have come to a dead end in the maze.",
	n_to maze17,
  has	maze_room dry_land;

Object -> maze17 "Maze"	! 62 / 0x3e
  with	description "This is part of a maze of twisty little passages, all alike.",
	se_to maze16,
	ne_to maze7,
	w_to maze17,
  has	maze_room dry_land;

Object -> maze7 "Maze"	! 63 / 0x3f
  with	description "This is part of a maze of twisty little passages, all alike.",
	d_to DownMazeAction,
	u_to maze9,
	s_to maze8,
	w_to maze6,
	e_to maze17,
  has	maze_room dry_land;

Object -> maze6 "Maze"	! 64 / 0x40
  with	description "This is part of a maze of twisty little passages, all alike.",
	d_to maze5,
	u_to maze15,
	w_to maze6,
	e_to maze7,
  has	maze_room dry_land;

Object -> maze18 "Dead End"	! 65 / 0x41
  with	description "You have come to a dead end in the maze.",
	w_to maze5,
  has	maze_room dry_land;

Object -> maze5 "Maze"	! 167 / 0xa7
  with	description "This is part of a maze of twisty little passages, all alike. A skeleton, probably the remains of a luckless adventurer, lies here.",
	sw_to maze6,
	e_to maze18,
	n_to maze3,
  has	maze_room dry_land;

Object -> -> skeleton "skeleton"	! 168 / 0xa8
  with	action SkeletonAction,
	name 'bones' 'skeleton' 'body',
  has	trytakebit scenery;

Object -> -> skeleton_key "skeleton key"	! 122 / 0x7a
  with	size 10,
	adjectives 'skeleton',
	name 'key',
  has	takeable toolbit;

Object -> -> rusty_knife "rusty knife"	! 128 / 0x80
  with	initial "Beside the skeleton is a rusty knife.",
	size 20,
	adjectives 'rusty',
	action RustyKnifeAction,
	name 'knives' 'knife',
  has	trytakebit takeable toolbit weapon;

Object -> -> bag_of_coins "leather bag of coins"	! 165 / 0xa5
  with	description "An old leather bag, bulging with coins, is here.",
	trophy_value 5,
	take_value 10,
	size 15,
	adjectives 'old' 'leather',
	action CoinBagAction,
	name 'bag' 'coins' 'treasure',
  has	takeable;

Object -> -> burned_out_lantern "burned-out lantern"	! 166 / 0xa6
  with	initial "The deceased adventurer's useless lantern is here.",
	size 20,
	adjectives 'rusty' 'burned' 'dead' 'useless',
	name 'lantern' 'lamp',
  has	takeable;

Object -> maze19 "Dead End"	! 66 / 0x42
  with	description "You have come to a dead end in the maze.",
	s_to maze2,
  has	maze_room dry_land;

Object -> maze2 "Maze"	! 67 / 0x43
  with	description "This is part of a maze of twisty little passages, all alike.",
	w_to maze3,
	e_to maze19,
	n_to maze1,
  has	maze_room dry_land;

Object -> maze3 "Maze"	! 68 / 0x44
  with	description "This is part of a maze of twisty little passages, all alike.",
	u_to maze5,
	w_to maze4,
	n_to maze2,
  has	maze_room dry_land;

Object -> maze4 "Maze"	! 69 / 0x45
  with	description "This is part of a maze of twisty little passages, all alike.",
	d_to DownMazeAction,
	s_to maze1,
	e_to maze3,
  has	maze_room dry_land;

Object -> maze1 "Maze"	! 70 / 0x46
  with	description "This is part of a maze of twisty little passages, all alike.",
	s_to maze4,
	w_to maze2,
	e_to the_troll_room,
	n_to maze1,
  has	maze_room dry_land;

Object -> studio "Studio"	! 94 / 0x5e
  with	pseudo 'door' PseudoDoorAction 'paint' PseudoPaintAction,
	contains chimney,
	description "This appears to have been an artist's studio. The walls and floors are splattered with paints of 69 different colors. Strangely enough, nothing of value is hanging here. At the south end of the room is an open door (also covered with paint). A dark and narrow chimney leads up from a fireplace; although you might be able to get up it, it seems unlikely you could get back down.",
	u_to UpChimneyAction,
	s_to gallery,
  has	dry_land;

Object -> -> zork_owners_manual "ZORK owner's manual"	! 95 / 0x5f
  with	text_string "^Congratulations!^^You are the privileged owner of ZORK I: The Great Underground Empire, a self-contained and self-maintaining universe. If used and maintained in accordance with normal operating practices for small universes, ZORK will provide many months of trouble-free operation.^",
	initial "Loosely attached to a wall is a small piece of paper.",
	adjectives 'zork' 'owners' 'small',
	name 'manual' 'piece' 'paper',
  has	readable takeable;

Object -> gallery "Gallery"	! 148 / 0x94
  with	description "This is an art gallery. Most of the paintings have been stolen by vandals with exceptional taste. The vandals left through either the north or west exits.",
	w_to east_of_chasm,
	n_to studio,
  has	dry_land light;

Object -> -> painting "painting"	! 149 / 0x95
  with	description "A painting by a neglected genius is here.",
	trophy_value 6,
	take_value 4,
	initial "Fortunately, there is still one chance for you to be a vandal, for on the far wall is a painting of unparalleled beauty.",
	size 15,
	adjectives 'beautiful',
	action PaintingAction,
	name 'painting' 'art' 'canvas' 'treasure',
  has	takeable flammable;

Object -> east_of_chasm "East of Chasm"	! 71 / 0x47
  with	pseudo 'chasm' PseudoChasmAction,
	description "You are on the east edge of a chasm, the bottom of which cannot be seen. A narrow passage goes north, and the path you are on continues to the east.",
	d_to "The chasm probably leads straight to the infernal regions.",
	e_to gallery,
	n_to cellar,
  has	dry_land;

Object -> the_troll_room "The Troll Room"	! 102 / 0x66
  with	description "This is a small room with passages to the east and south and a forbidding hole leading west. Bloodstains and deep scratches (perhaps made by an axe) mar the walls.",
	action TrollRoomAction,
	s_to cellar,
	w_to (TO maze1 IF Troll_flag ELSE "The troll fends you off with a menacing gesture."),
	e_to (TO e_w_passage IF Troll_flag ELSE "The troll fends you off with a menacing gesture."),
  has	dry_land;

Object -> -> troll "troll"	! 217 / 0xd9
  with	strength 2,
	description "A nasty-looking troll, brandishing a bloody axe, blocks all passages out of the room.",
	adjectives 'nasty',
	action TrollAction,
	name 'troll',
  has	open trytakebit animate;

Object -> -> -> bloody_axe "bloody axe"	! 218 / 0xda
  with	size 25,
	adjectives 'bloody',
	action AxeAction,
	name 'axe' 'ax',
  has	trytakebit scenery takeable weapon;

Object -> cellar "Cellar"	! 72 / 0x48
  with	contains trap_door chute stairs,
	take_value 25,
	action CellarAction,
	u_to (TO living_room IF trap_door IS OPEN),
	s_to east_of_chasm,
	w_to "You try to ascend the ramp, but it is impossible, and you slide back down.",
	n_to the_troll_room,
  has	dry_land;

Object -> living_room "Living Room"	! 193 / 0xc1
  with	pseudo 'nails' PseudoNailAction 'nail' PseudoNailAction,
	contains stairs,
	action LivingRoomAction,
	d_to TrapDoorDown,
	w_to (TO strange_passage IF Magic_flag ELSE "The door is nailed shut."),
	e_to kitchen,
  has	dry_land sacred light;

Object -> -> trophy_case "trophy case"	! 194 / 0xc2
  with	capacity 10000,
	adjectives 'trophy',
	action TrophyAction,
	name 'case',
  has	scope_inside transparent trytakebit scenery container;

Object -> -> -> ancient_map "ancient map"	! 109 / 0x6d
  with	text_string "The map shows a forest with three clearings. The largest clearing contains a house. Three paths leave the large clearing. One of these paths, leading southwest, is marked ~To Stone Barrow~.",
	initial "In the trophy case is an ancient parchment which appears to be a map.",
	size 2,
	adjectives 'antique' 'old' 'ancient',
	name 'parchm' 'map',
  has	concealed readable takeable;

Object -> -> sword "sword"	! 110 / 0x6e
  with	trophy_value 0,
	initial "Above the trophy case hangs an elvish sword of great antiquity.",
	size 30,
	adjectives 'elvish' 'old' 'antique',
	action SwordAction,
	name 'sword' 'orcrist' 'glamdring' 'blade',
  has	trytakebit takeable weapon;

Object -> -> wooden_door "wooden door"	! 111 / 0x6f
  with	text_string "The engravings translate to ~This space intentionally left blank.~",
	adjectives 'wooden' 'gothic' 'strange' 'w//',
	action DoorAction,
	name 'door' 'letter' 'writing',
  has	transparent scenery readable door;

Object -> -> brass_lantern "brass lantern"	! 164 / 0xa4
  with	description "There is a brass lantern (battery-powered) here.",
	initial "A battery-powered brass lantern is on the trophy case.",
	size 15,
	adjectives 'brass',
	action LampAction,
	name 'lamp' 'lantern' 'light',
  has	takeable on;

Object -> -> trap_door "trap door"	! 183 / 0xb7
  with	adjectives 'trap' 'dusty',
	action TrapdoorAction,
	name 'door' 'trapdoor' 'trap-' 'cover',
  has	concealed scenery door;

Object -> -> carpet "carpet"	! 192 / 0xc0
  with	adjectives 'large' 'oriental',
	action RugAction,
	name 'rug' 'carpet',
  has	trytakebit scenery;

Object -> attic "Attic"	! 201 / 0xc9
  with	contains stairs,
	description "This is the attic. The only exit is a stairway leading down.",
	d_to kitchen,
  has	dry_land sacred;

Object -> -> table "table"	! 202 / 0xca
  with	capacity 40,
	name 'table',
  has	supporter open scenery container;

Object -> -> -> nasty_knife "nasty knife"	! 169 / 0xa9
  with	initial "On a table is a nasty-looking knife.",
	adjectives 'nasty' 'unrusted',
	action NastyKnifeAction,
	name 'knives' 'knife' 'blade',
  has	trytakebit takeable weapon;

Object -> -> rope "rope"	! 129 / 0x81
  with	initial "A large coil of rope is lying in the corner.",
	size 10,
	adjectives 'large',
	action RopeAction,
	name 'rope' 'hemp' 'coil',
  has	sacred trytakebit takeable;

Object -> kitchen "Kitchen"	! 203 / 0xcb
  with	contains kitchen_window chimney stairs,
	take_value 10,
	action KitchenAction,
	out_to (TO east_of_house IF kitchen_window IS OPEN),
	d_to (TO studio IF Chimney_flag ELSE "Only Santa Claus climbs down chimneys."),
	u_to attic,
	w_to living_room,
	e_to (TO east_of_house IF kitchen_window IS OPEN),
  has	dry_land sacred light;

Object -> -> kitchen_table "kitchen table"	! 204 / 0xcc
  with	capacity 50,
	adjectives 'kitchen',
	name 'table',
  has	supporter open scenery container;

Object -> -> -> brown_sack "brown sack"	! 224 / 0xe0
  with	capacity 15,
	initial "On the table is an elongated brown sack, smelling of hot peppers.",
	size 3,
	adjectives 'brown' 'elongated' 'smelly',
	action SackAction,
	name 'bag' 'sack',
  has	takeable container flammable;

Object -> -> -> -> lunch "lunch"	! 225 / 0xe1
  with	description "A hot pepper sandwich is here.",
	adjectives 'hot' 'pepper',
	name 'food' 'sandwich' 'lunch' 'dinner',
  has	takeable edible;

Object -> -> -> -> clove_of_garlic "clove of garlic"	! 189 / 0xbd
  with	action GarlicAction,
	name 'garlic' 'clove',
  has	takeable edible;

Object -> -> -> glass_bottle "glass bottle"	! 236 / 0xec
  with	capacity 4,
	initial "A bottle is sitting on the table.",
	adjectives 'clear' 'glass',
	action BottleAction,
	name 'bottle' 'container',
  has	transparent takeable container;

Object -> -> -> -> quantity_of_water "quantity of water"	! 237 / 0xed
  with	size 4,
	action WaterFunction,
	name 'water' 'quantity' 'liquid' 'h2o',
  has	trytakebit takeable drinkable;

Object -> clearing2 "Clearing"	! 74 / 0x4a
  with	contains tree songbird white_house forest,
	description "You are in a small clearing in a well marked forest path that extends to the east and west.",
	action ForestAction,
	u_to "There is no tree here suitable for climbing.",
	s_to forest4,
	w_to east_of_house,
	e_to canyon_view,
	n_to forest2,
  has	dry_land sacred light;

Object -> clearing1 "Clearing"	! 143 / 0x8f
  with	contains white_house grating,
	action Clearing1Action,
	d_to EnterGrating,
	s_to forest_path,
	w_to forest1,
	e_to forest2,
	n_to "The forest becomes impenetrable to the north.",
  has	dry_land sacred light;

Object -> -> pile_of_leaves "pile of leaves"	! 144 / 0x90
  with	description "On the ground is a pile of leaves.",
	size 25,
	action LeavesAction,
	name 'leaves' 'leaf' 'pile',
  has	trytakebit takeable flammable;

Object -> up_a_tree "Up a Tree"	! 88 / 0x58
  with	contains tree forest songbird white_house,
	action TreeAction,
	d_to forest_path,
	u_to "You cannot climb any higher.",
  has	dry_land sacred light;

Object -> -> birds_nest "bird's nest"	! 89 / 0x59
  with	capacity 20,
	initial "Beside you on the branch is a small bird's nest.",
	adjectives 'birds',
	name 'nest',
  has	scope_inside open takeable container flammable;

Object -> -> -> jeweled_egg "jewel-encrusted egg"	! 87 / 0x57
  with	capacity 6,
	trophy_value 5,
	take_value 5,
	initial "In the bird's nest is a large egg encrusted with precious jewels, apparently scavenged by a childless songbird. The egg is covered with fine gold inlay, and ornamented in lapis lazuli and mother-of-pearl. Unlike most eggs, this one is hinged and closed with a delicate looking clasp. The egg appears extremely fragile.",
	adjectives 'birds' 'encrusted' 'jeweled',
	action EggAction,
	name 'egg' 'treasure',
  has	scope_inside takeable container;

Object -> -> -> -> golden_canary "golden clockwork canary"	! 84 / 0x54
  with	trophy_value 4,
	take_value 6,
	initial "There is a golden clockwork canary nestled in the egg. It has ruby eyes and a silver beak. Through a crystal window below its left wing you can see intricate machinery inside. It appears to have wound down.",
	adjectives 'clockw' 'gold' 'golden',
	action CanaryAction,
	name 'canary' 'treasure',
  has	scope_inside takeable;

Object -> forest_path "Forest Path"	! 75 / 0x4b
  with	contains tree songbird white_house forest,
	description "This is a path winding through a dimly lit forest. The path heads north-south here. One particularly large tree with some low branches stands at the edge of the path.",
	action ForestAction,
	u_to up_a_tree,
	s_to north_of_house,
	w_to forest1,
	e_to forest2,
	n_to clearing1,
  has	dry_land sacred light;

Object -> forest4 "Forest"	! 76 / 0x4c
  with	contains tree songbird white_house forest,
	description "This is a dimly lit forest, with large trees all around.",
	action ForestAction,
	u_to "There is no tree here suitable for climbing.",
	nw_to south_of_house,
	s_to "Storm-tossed trees block your way.",
	w_to forest1,
	e_to "The rank undergrowth prevents eastward movement.",
	n_to clearing2,
  has	dry_land sacred light;

Object -> forest3 "Forest"	! 239 / 0xef
  with	contains tree white_house,
	description "The forest thins out, revealing impassable mountains.",
	u_to "The mountains are impassable.",
	s_to forest2,
	w_to forest2,
	e_to "The mountains are impassable.",
	n_to forest2,
  has	dry_land sacred light;

Object -> -> mountain_range "mountain range"	! 240 / 0xf0
  with	adjectives 'impassable' 'flathead',
	action MountainAction,
	name 'mountain' 'range',
  has	scenery climbable;

Object -> forest2 "Forest"	! 77 / 0x4d
  with	contains tree songbird white_house forest,
	description "This is a dimly lit forest, with large trees all around.",
	action ForestAction,
	u_to "There is no tree here suitable for climbing.",
	s_to clearing2,
	w_to forest_path,
	e_to forest3,
	n_to "The forest becomes impenetrable to the north.",
  has	dry_land sacred light;

Object -> forest1 "Forest"	! 78 / 0x4e
  with	contains tree songbird white_house forest,
	description "This is a forest, with trees in all directions. To the east, there appears to be sunlight.",
	action ForestAction,
	u_to "There is no tree here suitable for climbing.",
	s_to forest4,
	w_to "You would need a machete to go further west.",
	e_to forest_path,
	n_to clearing1,
  has	dry_land sacred light;

Object -> east_of_house "Behind House"	! 79 / 0x4f
  with	contains white_house kitchen_window,
	action BehindHouseAction,
	in_to (TO kitchen IF kitchen_window IS OPEN),
	sw_to south_of_house,
	nw_to north_of_house,
	s_to south_of_house,
	w_to (TO kitchen IF kitchen_window IS OPEN),
	e_to clearing2,
	n_to north_of_house,
  has	dry_land sacred light;

Object -> south_of_house "South of House"	! 80 / 0x50
  with	contains boarded_window board white_house,
	description "You are facing the south side of a white house. There is no door here, and all the windows are boarded.",
	nw_to west_of_house,
	ne_to east_of_house,
	s_to forest4,
	w_to west_of_house,
	e_to east_of_house,
	n_to "The windows are all boarded.",
  has	dry_land sacred light;

Object -> north_of_house "North of House"	! 81 / 0x51
  with	contains boarded_window board white_house,
	description "You are facing the north side of a white house. There is no door here, and all the windows are boarded up. To the north a narrow path winds through the trees.",
	sw_to west_of_house,
	se_to east_of_house,
	s_to "The windows are all boarded.",
	w_to west_of_house,
	e_to east_of_house,
	n_to forest_path,
  has	dry_land sacred light;

Object -> stone_barrow "Stone Barrow"	! 178 / 0xb2
  with	description "You are standing in front of a massive barrow of stone. In the east face is a huge stone door which is open. You cannot see into the dark of the tomb.",
	action BarrowAction,
	ne_to west_of_house,
  has	dry_land sacred light;

Object -> -> stone_door "stone door"	! 179 / 0xb3
  with	adjectives 'huge' 'stone',
	action BarrowDoorAction,
	name 'door',
  has	scenery door;

Object -> -> stone_barrow_ob "stone barrow"	! 177 / 0xb1
  with	adjectives 'massive' 'stone',
	action EnterBarrow,
	name 'barrow' 'tomb',
  has	scenery;

Object brass_bauble "beautiful brass bauble"	! 85 / 0x55
  with	trophy_value 1,
	take_value 1,
	adjectives 'brass' 'beautiful',
	name 'bauble' 'treasure',
  has	takeable;

Object broken_egg "broken jewel-encrusted egg"	! 86 / 0x56
  with	capacity 6,
	description "There is a somewhat ruined egg here.",
	trophy_value 2,
	adjectives 'broken' 'birds' 'encrusted' 'jewel',
	name 'egg' 'treasure',
  has	open takeable container;

Object -> broken_canary "broken clockwork canary"	! 83 / 0x53
  with	trophy_value 1,
	initial "There is a golden clockwork canary nestled in the egg. It seems to have recently had a bad experience. The mountings for its jewel-like eyes are empty, and its silver beak is crumpled. Through a cracked crystal window below its left wing you can see the remains of intricate machinery. It is not clear what result winding it would have, as the mainspring seems sprung.",
	adjectives 'broken' 'clockw' 'gold' 'golden',
	action CanaryAction,
	name 'canary' 'treasure',
  has	takeable;

Object punctured_boat "punctured boat"	! 142 / 0x8e
  with	size 20,
	adjectives 'plastic' 'punctured' 'large',
	action PuncturedBoatAction,
	name 'boat' 'pile' 'plastic',
  has	takeable flammable;

Object vitreous_slag "small piece of vitreous slag"	! 146 / 0x92
  with	size 10,
	adjectives 'small' 'vitreous',
	action SlagAction,
	name 'gunk' 'piece' 'slag',
  has	trytakebit takeable;

Object magic_boat "magic boat"	! 156 / 0x9c
  with	vtype water_room,
	capacity 100,
	size 20,
	adjectives 'inflatable' 'magic' 'plastic' 'seaworthy',
	action BoatAction,
	name 'boat' 'raft',
  has	scope_inside open takeable flammable vehicle;

Object -> tan_label "tan label"	! 108 / 0x6c
  with	text_string "@{9}  !!!! @{9}FROBOZZ MAGIC BOAT COMPANY  !!!!^^Hello, Sailor!^^Instructions for use:^^   To get into a body of water, say ~Launch~.^   To get to shore, say ~Land~ or the direction in which you want to maneuver the boat.^^Warranty:^^  This boat is guaranteed against all defects for a period of 76 milliseconds from date of purchase or until first used, whichever comes first.^^Warning:^   This boat is made of thin plastic.^   Good Luck!^",
	size 2,
	adjectives 'tan' 'fine',
	name 'label' 'fineprint' 'print',
  has	readable takeable flammable;

Object huge_diamond "huge diamond"	! 171 / 0xab
  with	description "There is an enormous diamond (perfectly cut) here.",
	trophy_value 10,
	take_value 10,
	adjectives 'huge' 'enormous',
	name 'diamon' 'treasure',
  has	takeable;

Object broken_lantern "broken lantern"	! 210 / 0xd2
  with	adjectives 'broken',
	name 'lamp' 'lantern',
  has	takeable;

Object red_hot_bell "red hot brass bell"	! 219 / 0xdb
  with	description "On the ground is a red hot bell.",
	adjectives 'brass' 'hot' 'red' 'small',
	action HotBellAction,
	name 'bell',
  has	trytakebit;

Object global_objects ""	! 247 / 0xf7
  has	clothing staggered fightbit visited dry_land concealed scope_inside supporter open transparent trytakebit rmungbit light;

Object -> set_of_teeth "set of teeth"	! 248 / 0xf8
  with	action TeethAction,
	name 'overboard' 'teeth',
  has	scenery;

Object -> pair_of_hands "pair of hands"	! 1 / 0x1
  with	adjectives 'bare',
	name 'pair' 'hands' 'hand',
  has	scenery toolbit;

Object -> zorkmid "zorkmid"	! 2 / 0x2
  with	action ZorkmidAction,
	name 'zorkmid',
  has	;

Object -> way "way"	! 3 / 0x3
  with	adjectives 'forest' 'narrow' 'long' 'winding',
	action WayAction,
	name 'passage' 'crawlway' 'trail' 'path',
  has	scenery;

Object -> you "you"	! 5 / 0x5
  with	action PseudoAction,
	name 'me' 'myself' 'self' 'cretin',
  has	animate;

Object -> blast_of_air "blast of air"	! 6 / 0x6
  with	name 'lungs' 'air' 'mouth' 'breath',
  has	scenery;

Object -> lurking_grue "lurking grue"	! 7 / 0x7
  with	adjectives 'lurking' 'sinister' 'hungry' 'silent',
	action GrueAction,
	name 'grue',
  has	;

Object -> ground "ground"	! 8 / 0x8
  with	action GroundAction,
	name 'ground' 'sand' 'dirt' 'floor',
  has	;

Object -> sailor "sailor"	! 9 / 0x9
  with	action SailorAction,
	name 'sailor' 'footpad' 'aviator',
  has	scenery;

Object -> blessings "blessings"	! 10 / 0xa
  with	name 'blessings' 'graces',
  has	scenery;

Object -> it_object "random object"	! 12 / 0xc
  with	name 'it' 'them' 'her' 'him',
  has	visited scenery;

Object -> number_ob "number"	! 14 / 0xe
  with	name 'intnum',
  has	toolbit;

Object -> local_globals ""	! 249 / 0xf9
  with	container_action 0,
	unknown_prop 0,
	pseudo 'foobar' GoSub,
	contains global_objects,
	vtype staggered,
	initial2 WayAction,
	capacity 0,
	description "F",
	initial "F",
	size 0,
	name 'zzmgck',
  has	;

Object -> -> board "board"	! 250 / 0xfa
  with	action BoardAction,
	name 'boards' 'board',
  has	scenery;

Object -> -> stairs "stairs"	! 73 / 0x49
  with	adjectives 'stone' 'dark' 'marble' 'forbidding' 'steep',
	action StairAction,
	name 'stairs' 'steps' 'staircase' 'stairway',
  has	scenery climbable;

Object -> -> pseudo "pseudo"	! 13 / 0xd
  with	action PseudoAction,
  has	;

Object -> -> white_cliffs "white cliffs"	! 92 / 0x5c
  with	adjectives 'white',
	action CliffAction,
	name 'cliff' 'cliffs',
  has	scenery climbable;

Object -> -> cliff "cliff"	! 93 / 0x5d
  with	adjectives 'rocky' 'sheer',
	action Cliff2Action,
	name 'wall' 'cliff' 'walls' 'ledge',
  has	scenery climbable;

Object -> -> wooden_ladder "wooden ladder"	! 117 / 0x75
  with	adjectives 'wooden' 'ricketty' 'narrow',
	name 'ladder',
  has	scenery climbable;

Object -> -> river "river"	! 131 / 0x83
  with	adjectives 'frigid',
	action RiverAction,
	name 'river',
  has	scenery;

Object -> -> rainbow "rainbow"	! 132 / 0x84
  with	action RainbowAction,
	name 'rainbow',
  has	scenery climbable;

Object -> -> pile_of_bodies "pile of bodies"	! 145 / 0x91
  with	adjectives 'mangled',
	action DeadBodiesAction,
	name 'bodies' 'body' 'remains' 'pile',
  has	trytakebit scenery;

Object -> -> grating "grating"	! 174 / 0xae
  with	action GratingAction,
	name 'grate' 'grating',
  has	concealed scenery door;

Object -> -> crack "crack"	! 176 / 0xb0
  with	adjectives 'narrow',
	action CrackAction,
	name 'crack',
  has	scenery;

Object -> -> boarded_window "boarded window"	! 182 / 0xb6
  with	adjectives 'boarded',
	action BoardedWindowAction,
	name 'window',
  has	scenery;

Object -> -> chute "chute"	! 205 / 0xcd
  with	adjectives 'steep' 'metal' 'twisting',
	action ChuteAction,
	name 'chute' 'ramp' 'slide',
  has	climbable;

Object -> -> chimney "chimney"	! 234 / 0xea
  with	adjectives 'dark' 'narrow',
	action ChimneyAction,
	name 'chimney',
  has	scenery climbable;

Object -> -> kitchen_window "kitchen window"	! 235 / 0xeb
  with	adjectives 'kitchen' 'small',
	action KitchenWindowAction,
	name 'window',
  has	scenery door;

Object -> -> water "water"	! 238 / 0xee
  with	action WaterFunction,
	name 'water' 'quantity',
  has	drinkable;

Object -> -> tree "tree"	! 241 / 0xf1
  with	adjectives 'large' 'storm',
	name 'tree' 'branch',
  has	scenery climbable;

Object -> -> forest "forest"	! 242 / 0xf2
  with	action Forest2Action,
	name 'forest' 'trees' 'pines' 'hemlocks',
  has	scenery;

Object -> -> white_house "white house"	! 243 / 0xf3
  with	adjectives 'white' 'beautiful' 'colonial',
	action HouseAction,
	name 'house',
  has	scenery;

Object -> -> songbird "songbird"	! 244 / 0xf4
  with	adjectives 'song',
	action SongbirdAction,
	name 'bird' 'songbird',
  has	scenery;

Object -> granite_wall "granite wall"	! 245 / 0xf5
  with	adjectives 'granite',
	action GraniteAction,
	name 'wall',
  has	;

Object -> surrounding_wall "surrounding wall"	! 246 / 0xf6
  with	adjectives 'surrounding',
	name 'wall' 'walls',
  has	;

! Constants

! rarg
Constant M_END = 0;
Constant M_HANDLED = 1;
Constant M_ENTER = 2;
Constant M_LOOK = 3;
Constant M_WAKE = 4;
Constant M_FIGHT = 5;
Constant M_BEFORE = 6; // Initial

! fight_con
Constant MISSED = 1;
Constant UNCONSCIOUS = 2;
Constant KILLED = 3;
Constant LIGHT_WOUND = 4;
Constant SERIOUS_WOUND = 5;
Constant STAGGER = 6;
Constant LOSE_WEAPON = 7;
Constant HESITATE = 8;
Constant SITTING_DUCK = 8;

! p_searchlevels
Constant P_SRCTOP = 0;
Constant P_SRCALL = 1;
Constant P_SRCBOT = 2;

! p_searchlevelbits
Constant SHAVE = 2;
Constant SMANY = 4;
Constant STAKE = 8;
Constant SOG = 16;
Constant SIR = 32;
Constant SC = 64;
Constant SH = 128;

! p_partsofspeech
Constant P_VERB = 0;
Constant P_VERBN = 1;
Constant P_PREP1 = 2;
Constant P_PREP1N = 3;
Constant P_PREP2 = 4;
Constant P_PREP2N = 5;
Constant P_NC1 = 6;
Constant P_NC1L = 7;
Constant P_NC2 = 8;
Constant P_NC2L = 9;

! p_p1off
Constant P_P1OFF = 5;

! p_partofspeechbit
Constant PS_BUZZ_WORD = 4;
Constant PS_PREPOSITION = 8;
Constant PS_DIRECTION = 16;
Constant PS_ADJECTIVE = 32;
Constant PS_VERB = 64;
Constant PS_OBJECT = 128;

! p_partofspeechrtnval
Constant P1_OBJECT = 0;
Constant P1_VERB = 1;
Constant P1_ADJECTIVE = 2;
Constant P1_DIRECTION = 3;

! act_result
Constant A_SUCCESS = 1;
Constant A_FAILURE = 2;

! Globals

Global location;
Global score;
Global turns;
Global Sing_song;
Global Beach_dig = 65535;
Global Buoy_flag = true;
Global Light_shaft = 13;
Global Matches_count = 6;
Global Thief_out_desc = "There is a suspicious-looking individual lying unconscious on the ground.";
Global Thief_desc = "There is a suspicious-looking individual, holding a bag, leaning against one wall. He is armed with a vicious-looking stiletto.";
Global Thief_engrossed;
Global Thief_here;
Global Egg_solve;
Global Echo_flag;
Global Cyclowrath;
Global Leak_sprung;
Global Dam_open;
Global Gate_flag;
Global Exorcism_candle;
Global Exorcism_bell;
Global Global_unused1;
Global Mirror_broken;
Global Grate_unlocked;
Global Leaves_moved;
Global Global_unused2;
Global Rug_moved;
Global Basket_up = true;
Global Window_munged;
Global Window_munged;
Global Max_held_mult = 8;
Global Maximum_held = 7;
Global Lucky = true;
Global Deaths;
Global Dead;
Global Base_score;
Global Last_ob_longdesc;
Global Grue_Repellent;
Global Lit;
Global HS_count;
Global superbrief;
Global verbose;
Global Always_lit;
Global P_xadjn;
Global P_xadj;
Global P_xnam;
Global P_object;
Global P_ceptr;
Global P_csptr;
Global P_getflags;
Global P_matchlen;
Global P_adjn;
Global P_adverb;
Global P_adj;
Global P_name;
Global P_gwimbit;
Global P_slocbits;
Global global93;
Global second_intnum;
Global P_walk_dir;
Global P_quote_flag;
Global P_ncn;
Global P_aadj;
Global P_anam;
Global P_aclause;
Global P_merged;
Global P_oflag;
Global LastNounPlace;
Global LastNoun;
Global P_cont;
Global player;
Global P_dir;
Global P_len;
Global P_cctbl;
Global P_syntax;
Global P_oneobj;
Global P_table;
Global noun;
Global second;
Global Verb;
Global Assigned_but_unused;
Global P_not_here;
Global P_mult;
Global prev_second;
Global prev_noun;
Global prev_verb;
Global Debug;
Global P_won;
Global actor;
Global Clock_wait;
Global C_ints = 180;
Global C_ints2 = 180;
Global Load_max = 100;
Global Load_allowed = 100;
Global Coffin_held;
Global Won_flag;
Global Troll_flag;
Global Rainbow_flag;
Global Magic_flag;
Global Low_tide;
Global LLD_flag;
Global Empty_handed;
Global Dome_flag;
Global Deflated;
Global Cyclops_flag;
Global Chimney_flag;
Global Max_score = 350;
Global Low_direction = land_to;
Global Ten_thousand_unused = 10000;
Global Verbs = invalidArray11876;

! Arrays
Array Villains table	! 11868 (0x2e5c)
    [! 11838 (0x2e3e)
        troll sword 1 0 Troll_melee
    ]
    [! 11848 (0x2e48)
        thief nasty_knife 1 0 Thief_melee
    ]
    [! 11858 (0x2e52)
        cyclops nothing 0 0 Cyclops_melee
    ]
;
Array Thief_melee -->	! 11820 (0x2e2c)
    [
        [
            "The thief stabs nonchalantly with his stiletto and misses."
        ]
        [
            1
            "You dodge as the thief comes in low."
        ]
        [
            "You parry a lightning thrust, and the thief salutes you with a grim nod."
        ]
        [
            "The thief tries to sneak past your guard, but you twist away."
        ]
    ]
    [
        [
            "Shifting in the midst of a thrust, the thief knocks you unconscious with the haft of his stiletto."
        ]
        [
            "The thief knocks you out."
        ]
    ]
    [! 11670 (0x2d96)
        3
        [! 11658 (0x2d8a)
            1
            "Finishing you off, the thief inserts his blade into your heart."
        ]
        [! 11662 (0x2d8e)
            1
            "The thief comes in from the side, feints, and inserts the blade into your ribs."
        ]
        [! 11666 (0x2d92)
            1
            "The thief bows formally, raises his stiletto, and with a wry grin, ends the battle and your life."
        ]
    ]
    [! 11694 (0x2dae)
        4
        [! 11678 (0x2d9e)
            1
            "A quick thrust pinks your left arm, and blood starts to trickle down."
        ]
        [! 11682 (0x2da2)
            1
            "The thief draws blood, raking his stiletto across your arm."
        ]
        [! 11686 (0x2da6)
            1
            "The stiletto flashes faster than you can follow, and blood wells from your leg."
        ]
        [! 11690 (0x2daa)
            1
            "The thief slowly approaches, strikes like a snake, and leaves you wounded."
        ]
    ]
    [! 11720 (0x2dc8)
        4
        [! 11704 (0x2db8)
            1
            "The thief strikes like a snake! The resulting wound is serious."
        ]
        [! 11708 (0x2dbc)
            1
            "The thief stabs a deep cut in your upper arm."
        ]
        [! 11712 (0x2dc0)
            1
            "The stiletto touches your forehead, and the blood obscures your vision."
        ]
        [! 11716 (0x2dc4)
            1
            "The thief strikes at your wrist, and suddenly your grip is slippery with blood."
        ]
    ]
    [! 11742 (0x2dde)
        3
        [! 11730 (0x2dd2)
            1
            "The butt of his stiletto cracks you on the skull, and you stagger back."
        ]
        [! 11734 (0x2dd6)
            1
            "The thief rams the haft of his blade into your stomach, leaving you out of breath."
        ]
        [! 11738 (0x2dda)
            1
            "The thief attacks, and you fall back desperately."
        ]
    ]
    [! 11778 (0x2e02)
        3
        [! 11750 (0x2de6)
            5
            "A long, theatrical slash. You catch it on your "
            0
            ", but the thief twists his knife, and the "
            0
            " goes flying."
        ]
        [! 11762 (0x2df2)
            3
            "The thief neatly flips your "
            0
            " out of your hands, and it drops to the floor."
        ]
        [! 11770 (0x2dfa)
            3
            "You parry a low thrust, and your "
            0
            " slips out of your hand."
        ]
    ]
    [! 11798 (0x2e16)
        3
        [! 11786 (0x2e0a)
            1
            "The thief, a man of superior breeding, pauses for a moment to consider the propriety of finishing you off."
        ]
        [! 11790 (0x2e0e)
            1
            "The thief amuses himself by searching your pockets."
        ]
        [! 11794 (0x2e12)
            1
            "The thief entertains himself by rifling your pack."
        ]
    ]
    [! 11814 (0x2e26)
        2
        [! 11806 (0x2e1e)
            1
            "The thief, forgetting his essentially genteel upbringing, cuts your throat."
        ]
        [! 11810 (0x2e22)
            1
            "The thief, a pragmatist, dispatches you as a threat to his livelihood."
        ]
    ]
;
Array Troll_melee -->	! 11600 (0x2d50)
    [! 11432 (0x2ca8)
        4
        [! 11416 (0x2c98)
            1
            "The troll swings his axe, but it misses."
        ]
        [! 11420 (0x2c9c)
            1
            "The troll's axe barely misses your ear."
        ]
        [! 11424 (0x2ca0)
            1
            "The axe sweeps past as you jump aside."
        ]
        [! 11428 (0x2ca4)
            1
            "The axe crashes against the rock, throwing sparks!"
        ]
    ]
    [! 11446 (0x2cb6)
        1
        [! 11442 (0x2cb2)
            1
            "The flat of the troll's axe hits you delicately on the head, knocking you out."
        ]
    ]
    [! 11462 (0x2cc6)
        3
        [! 11450 (0x2cba)
            1
            "The troll neatly removes your head."
        ]
        [! 11454 (0x2cbe)
            1
            "The troll's axe stroke cleaves you from the nave to the chops."
        ]
        [! 11458 (0x2cc2)
            1
            "The troll's axe removes your head."
        ]
    ]
    [! 11486 (0x2cde)
        4
        [! 11470 (0x2cce)
            1
            "The axe gets you right in the side. Ouch!"
        ]
        [! 11474 (0x2cd2)
            1
            "The flat of the troll's axe skins across your forearm."
        ]
        [! 11478 (0x2cd6)
            1
            "The troll's swing almost knocks you over as you barely parry in time."
        ]
        [! 11482 (0x2cda)
            1
            "The troll swings his axe, and it nicks your arm as you dodge."
        ]
    ]
    [! 11512 (0x2cf8)
        3
        [! 11496 (0x2ce8)
            3
            "The troll charges, and his axe slashes you on your "
            0
            " arm."
        ]
        [! 11504 (0x2cf0)
            1
            "An axe stroke makes a deep wound in your leg."
        ]
        [! 11508 (0x2cf4)
            1
            "The troll's axe swings down, gashing your shoulder."
        ]
    ]
    [! 11536 (0x2d10)
        4
        [! 11520 (0x2d00)
            1
            "The troll hits you with a glancing blow, and you are momentarily stunned."
        ]
        [! 11524 (0x2d04)
            1
            "The troll swings; the blade turns on your armor but crashes broadside into your head."
        ]
        [! 11528 (0x2d08)
            1
            "You stagger back under a hail of axe strokes."
        ]
        [! 11532 (0x2d0c)
            1
            "The troll's mighty blow drops you to your knees."
        ]
    ]
    [! 11570 (0x2d32)
        3
        [! 11546 (0x2d1a)
            3
            "The axe hits your "
            0
            " and knocks it spinning."
        ]
        [! 11554 (0x2d22)
            3
            "The troll swings, you parry, but the force of his blow knocks your "
            0
            " away."
        ]
        [! 11562 (0x2d2a)
            3
            "The axe knocks your "
            0
            " out of your hand. It falls to the floor."
        ]
    ]
    [! 11586 (0x2d42)
        2
        [! 11578 (0x2d3a)
            1
            "The troll hesitates, fingering his axe."
        ]
        [! 11582 (0x2d3e)
            1
            "The troll scratches his head ruminatively:  Might you be magically protected, he wonders?"
        ]
    ]
    [! 11596 (0x2d4c)
        1
        [! 11592 (0x2d48)
            1
            "Conquering his fears, the troll puts you to death."
        ]
    ]
;
Array Cyclops_melee -->	! 11398 (0x2c86)
    [! 11284 (0x2c14)
        2
        [! 11276 (0x2c0c)
            1
            "The Cyclops misses, but the backwash almost knocks you over."
        ]
        [! 11280 (0x2c10)
            1
            "The Cyclops rushes you, but runs into the wall."
        ]
    ]
    [! 11294 (0x2c1e)
        1
        [! 11290 (0x2c1a)
            1
            "The Cyclops sends you crashing to the floor, unconscious."
        ]
    ]
    [! 11306 (0x2c2a)
        2
        [! 11298 (0x2c22)
            1
            "The Cyclops raises his arms and crushes your skull."
        ]
        [! 11302 (0x2c26)
            1
            "The Cyclops breaks your neck with a massive smash."
        ]
    ]
    [! 11320 (0x2c38)
        2
        [! 11312 (0x2c30)
            1
            "A quick punch, but it was only a glancing blow."
        ]
        [! 11316 (0x2c34)
            1
            "A glancing blow from the Cyclops' fist."
        ]
    ]
    [! 11338 (0x2c4a)
        3
        [! 11326 (0x2c3e)
            1
            "The monster smashes his huge fist into your chest, breaking several ribs."
        ]
        [! 11330 (0x2c42)
            1
            "The Cyclops almost knocks the wind out of you with a quick punch."
        ]
        [! 11334 (0x2c46)
            1
            "A flying drop kick breaks your jaw."
        ]
    ]
    [! 11354 (0x2c5a)
        2
        [! 11346 (0x2c52)
            1
            "The Cyclops lands a punch that knocks the wind out of you."
        ]
        [! 11350 (0x2c56)
            1
            "Heedless of your weapons, the Cyclops tosses you against the rock wall of the room."
        ]
    ]
    [! 11376 (0x2c70)
        2
        [! 11360 (0x2c60)
            3
            "The Cyclops grabs your "
            0
            ", tastes it, and throws it to the ground in disgust."
        ]
        [! 11368 (0x2c68)
            3
            "The monster grabs you on the wrist, squeezes, and you drop your "
            0
            " in pain."
        ]
    ]
    [! 11386 (0x2c7a)
        1
        [! 11382 (0x2c76)
            1
            "The Cyclops seems unable to decide whether to broil or stew his dinner."
        ]
    ]
    [! 11394 (0x2c82)
        1
        [! 11390 (0x2c7e)
            1
            "The Cyclops, no sportsman, dispatches his unconscious victim."
        ]
    ]
;
Array Hero_melee -->	! 11262 (0x2bfe)
    [! 11002 (0x2afa)
        6
        [! 10950 (0x2ac6)
            5
            "Your "
            0
            " misses the "
            1
            " by an inch."
        ]
        [! 10962 (0x2ad2)
            3
            "A good slash, but it misses the "
            1
            " by a mile."
        ]
        [! 10970 (0x2ada)
            3
            "You charge, but the "
            1
            " jumps nimbly aside."
        ]
        [! 10978 (0x2ae2)
            3
            "Clang! Crash! The "
            1
            " parries."
        ]
        [! 10986 (0x2aea)
            3
            "A quick stroke, but the "
            1
            " is on guard."
        ]
        [! 10994 (0x2af2)
            3
            "A good stroke, but it's too slow; the "
            1
            " dodges."
        ]
    ]
    [! 11064 (0x2b38)
        5
        [! 11016 (0x2b08)
            5
            "Your "
            0
            " crashes down, knocking the "
            1
            " into dreamland."
        ]
        [! 11028 (0x2b14)
            3
            "The "
            1
            " is battered into unconsciousness."
        ]
        [! 11036 (0x2b1c)
            3
            "A furious exchange, and the "
            1
            " is knocked out!"
        ]
        [! 11044 (0x2b24)
            5
            "The haft of your "
            0
            " knocks out the "
            1
            "."
        ]
        [! 11056 (0x2b30)
            3
            "The "
            1
            " is knocked out!"
        ]
    ]
    [! 11104 (0x2b60)
        3
        [! 11076 (0x2b44)
            5
            "It's curtains for the "
            1
            " as your "
            0
            " removes his head."
        ]
        [! 11088 (0x2b50)
            3
            "The fatal blow strikes the "
            1
            " square in the heart:  He dies."
        ]
        [! 11096 (0x2b58)
            3
            "The "
            1
            " takes a fatal blow and slumps to the floor dead."
        ]
    ]
    [! 11144 (0x2b88)
        4
        [! 11112 (0x2b68)
            3
            "The "
            1
            " is struck on the arm; blood begins to trickle down."
        ]
        [! 11120 (0x2b70)
            5
            "Your "
            0
            " pinks the "
            1
            " on the wrist, but it's not serious."
        ]
        [! 11132 (0x2b7c)
            1
            "Your stroke lands, but it was only the flat of the blade."
        ]
        [! 11136 (0x2b80)
            3
            "The blow lands, making a shallow gash in the "
            1
            "'s arm!"
        ]
    ]
    [! 11178 (0x2baa)
        4
        [! 11154 (0x2b92)
            3
            "The "
            1
            " receives a deep gash in his side."
        ]
        [! 11162 (0x2b9a)
            3
            "A savage blow on the thigh! The "
            1
            " is stunned but can still fight!"
        ]
        [! 11170 (0x2ba2)
            1
            "Slash! Your blow lands! That one hit an artery, it could be serious!"
        ]
        [! 11174 (0x2ba6)
            1
            "Slash! Your stroke connects! This could be serious!"
        ]
    ]
    [! 11228 (0x2bdc)
        5
        [! 11188 (0x2bb4)
            3
            "The "
            1
            " is staggered, and drops to his knees."
        ]
        [! 11196 (0x2bbc)
            3
            "The "
            1
            " is momentarily disoriented and can't fight back."
        ]
        [! 11204 (0x2bc4)
            3
            "The force of your blow knocks the "
            1
            " back, stunned."
        ]
        [! 11212 (0x2bcc)
            3
            "The "
            1
            " is confused and can't fight back."
        ]
        [! 11220 (0x2bd4)
            3
            "The quickness of your thrust knocks the "
            1
            " back, stunned."
        ]
    ]
    [! 11256 (0x2bf8)
        2
        [! 11240 (0x2be8)
            3
            "The "
            1
            "'s weapon is knocked to the floor, leaving him unarmed."
        ]
        [! 11248 (0x2bf0)
            3
            "The "
            1
            " is disarmed by a subtle feint past his guard."
        ]
    ]
;
Array Def3_res -->	! 10940 (0x2abc)
    Def3a
    0
    Def3b
    0
    Def3c
;
Array Def2_res -->	! 10932 (0x2ab4)
    Def2a
    Def2b
    0
    0
;
Array Def1_res -->	! 10926 (0x2aae)
    Def1
    0
    0
;
Array Def3c -->	! 10906 (0x2a9a)
    MISSED
    STAGGER
    STAGGER
    LIGHT_WOUND
    LIGHT_WOUND
    LIGHT_WOUND
    LIGHT_WOUND
    SERIOUS_WOUND
    SERIOUS_WOUND
    SERIOUS_WOUND
;
Array Def3b -->	! 10884 (0x2a84)
    MISSED
    MISSED
    MISSED
    STAGGER
    STAGGER
    LIGHT_WOUND
    LIGHT_WOUND
    LIGHT_WOUND
    SERIOUS_WOUND
    SERIOUS_WOUND
    SERIOUS_WOUND
;
Array Def3a -->	! 10862 (0x2a6e)
    MISSED
    MISSED
    MISSED
    MISSED
    MISSED
    STAGGER
    STAGGER
    LIGHT_WOUND
    LIGHT_WOUND
    SERIOUS_WOUND
    SERIOUS_WOUND
;
Array Def2b -->	! 10838 (0x2a56)
    MISSED
    MISSED
    MISSED
    STAGGER
    STAGGER
    LIGHT_WOUND
    LIGHT_WOUND
    LIGHT_WOUND
    UNCONSCIOUS
    KILLED
    KILLED
    KILLED
;
Array Def2a -->	! 10818 (0x2a42)
    MISSED
    MISSED
    MISSED
    MISSED
    MISSED
    STAGGER
    STAGGER
    LIGHT_WOUND
    LIGHT_WOUND
    UNCONSCIOUS
;
Array Def1 -->	! 10792 (0x2a28)
    MISSED
    MISSED
    MISSED
    MISSED
    STAGGER
    STAGGER
    UNCONSCIOUS
    UNCONSCIOUS
    KILLED
    KILLED
    KILLED
    KILLED
    KILLED
;
Array Bdigs -->	! 10786 (0x2a22)
    "You seem to be digging a hole here."
    "The hole is getting deeper, but that's about it."
    "You are surrounded by a wall of sand on all sides."
;
Array Near_water table	! 10752 (0x2a00)
    dam_base
    river4
    beach2
    river2
    beach1
    frigid_river
    shore
    river1
    sandy_beach
    frigid_river
    reservoir_south
    reservoir
    reservoir_north
    reservoir
    stream_view
    stream
;
Array River_next table	! 10740 (0x29f4)
    river4
    river3
    river2
    frigid_river
    river1
;
Array River_speeds -->	! 10718 (0x29de)
    10
    river4 4
    river3 4
    river2 3
    frigid_river 2
    river1 1
    you 36
    river3 34
    frigid_river 31
    mine1 140
    river4 33
;
Array Candle_table -->	! 10704 (0x29d0)
    20 "The candles grow shorter."
    10 "The candles are becoming quite short."
    5 "The candles won't last long now."
;
Array Lamp_table -->	! 10690 (0x29c2)
    100 "The lamp appears a bit dimmer."
    70 "The lamp is definitely dimmer now."
    15 "The lamp is nearly out."
;
Array Door_messages table	! 10682 (0x29ba)
    0
    "You cannot damage this door."
    "The door is still under warranty."
;
Array Cyclo_messages -->	! 10670 (0x29ae)
    "The cyclops seems somewhat agitated."
    "The cyclops appears to be getting more agitated."
    "The cyclops is moving about the room, looking for something."
    "The cyclops was looking for salt and pepper. I think he is gathering condiments for his upcoming snack."
    "The cyclops is moving toward you in an unfriendly manner."
    "You have two choices: 1. Leave  2. Become dinner."
;
Array LeakLevel -->	! 10652 (0x299c)
    "up to your ankles."
    "up to your shin."
    "up to your knees."
    "up to your hips."
    "up to your waist."
    "up to your chest."
    "up to your neck."
    "over your head."
    "high in your lungs."
;
Array Near_loudroom table	! 10642 (0x2992)
    nothing
    damp_cave
    round_room
    deep_canyon
;
Array coalmine_rooms table	! 10622 (0x297e)
    nothing
    mine4
    mine3
    mine2
    mine1
    ladder_top
    ladder_bottom
    squeaky_room
    mine_entrance
;
Array Dummy_table table	! 10612 (0x2974)
    0
    "Look around."
    "Too late for that."
    "Have your eyes checked."
;
Array Yuks_table table	! 10600 (0x2968)
    0
    "A valiant attempt."
    "You can't be serious."
    "An interesting idea..."
    "What a concept!"
;
Array Hello_table table	! 10588 (0x295c)
    0
    "Hello."
    "Good day."
    "Nice weather we've been having lately."
    "Goodbye."
;
Array Noswim_table table	! 10582 (0x2956)
    0
    "You can't swim in the dungeon."
;
Array Ho_hum_table table	! 10572 (0x294c)
    0
    " doesn't seem to work."
    " isn't notably helpful."
    " has no effect."
;
Array Indents -->	! 10560 (0x2940)
    "  "
    "  "
    "    "
    "      "
    "        "
    "          "
;
Array Hop_msg table	! 10548 (0x2934)
    0
    "Very good. Now you can go to the second grade."
    "Are you enjoying yourself?"
    "Wheeeeeeeeee!!!!!"
    "Do you expect me to applaud?"
;
Array Dive_msg table	! 10538 (0x292a)
    0
    "You should have looked before you leaped."
    "In the movies, your life would be passing before your eyes."
    "Geronimo..."
;
Array P_oclause --> 50;	! 10438 (0x28c6)
Array P_merge --> 50;	! 10338 (0x2862)
Array P_buts --> 50;	! 10238 (0x27fe)
Array P_prsi --> 50;	! 10138 (0x279a)
Array P_prso --> 50;	! 10038 (0x2736)
Array P_vtbl --> 4;	! 10030 (0x272e)
Array P_otbl --> 8;	! 10010 (0x271a)
Array P_itbl --> 10;	! 9990 (0x2706)
Array P_inbuf string 100;	! 9790 (0x263e)
Array P_lexv ->	! 9550 (0x254e)
    120 0
    0 0
    0 0
    0 0
    0 0
    0 0
    0 0
    0 0
    0 0
    0 0
    0 0
    0 0
    0 0
    0 0
    0 0
    0 0
    0 0
    0 0
    0 0
    0 0
    0 0
    0 0
    0 0
    0 0
    0 0
    0 0
    0 0
    0 0
    0 0
    0 0
    0 0
    0 0
    0 0
    0 0
    0 0
    0 0
    0 0
    0 0
    0 0
    0 0
    0 0
    0 0
    0 0
    0 0
    0 0
    0 0
    0 0
    0 0
    0 0
    0 0
    0 0
    0 0
    0 0
    0 0
    0 0
    0 0
    0 0
    0 0
    0 0
    0 0
    0 0
    0 0
    0 0
    0 0
    0 0
    0 0
    0 0
    0 0
    0 0
    0 0
    0 0
    0 0
    0 0
    0 0
    0 0
    0 0
    0 0
    0 0
    0 0
    0 0
    0 0
    0 0
    0 0
    0 0
    0 0
    0 0
    0 0
    0 0
    0 0
    0 0
    0 0
    0 0
    0 0
    0 0
    0 0
    0 0
    0 0
    0 0
    0 0
    0 0
    0 0
    0 0
    0 0
    0 0
    0 0
    0 0
    0 0
    0 0
    0 0
    0 0
    0 0
    0 0
    0 0
    0 0
    0 0
    0 0
    0 0
    0 0
    0 0
    0 0
;
Array C_table --> 180;	! 9190 (0x23e6)
Array Above_ground table	! 9166 (0x23ce)
    west_of_house
    north_of_house
    east_of_house
    south_of_house
    forest1
    forest2
    forest4
    forest_path
    clearing2
    clearing1
    canyon_view
;
Array In_house table	! 9156 (0x23c4)
    living_room
    kitchen
    attic
    kitchen
;
Array Forest_around table	! 9142 (0x23b6)
    forest1
    forest2
    forest4
    forest_path
    clearing2
    forest1
;
Array House_around table	! 9130 (0x23aa)
    west_of_house
    north_of_house
    east_of_house
    south_of_house
    west_of_house
;
Array Prepositions -->	! 15100 (0x3afc)
    17
    'behind' 239
    'under' 240
    'around' 241
    'for' 242
    'at' 243
    'off' 244
    'across' 245
    'over' 246
    'away' 247
    'from' 248
    'on' 249
    'down' 250
    'in' 251
    'up' 252
    'out' 253
    'with' 254
    'to' 255
;
Array Actions -->	! 14512 (0x38b0)
    VerboseSub
    BriefSub
    SuperbriefSub
    DiagnoseSub
    InventorySub
    QuitSub
    RestartSub
    RestoreSub
    SaveSub
    ScoreSub
    ScriptSub
    UnscriptSub
    VersionSub
    VerifySub
    DebugSub
    SwitchOnSub
    AgainSub
    AnswerSub
    PreAnswerSub
    InsertSub
    AttackSub
    BackSub
    BlowUp
    SwitchOffSub
    InflateSub
    BlowInSub
    BoardSub
    BrushSub
    BugSub
    BurnSub
    VomitSub
    ClimbUp
    ClimbDown
    ClimbObjSub
    ClimbOnSub
    EnterObjSub
    CloseSub
    CommandSub
    CountSub
    CrossSub
    CutSub
    CurseSub
    DeflateSub
    PokeSub
    OpenSub
    DigSub
    DisembarkSub
    DisenchantSub
    DrinkSub
    DrinkFromSub
    DropSub
    PutOnSub
    EatSub
    EchoSub
    EnchantSub
    Enter
    Exit
    ExamineSub
    LookInSub
    BanishSub
    FillSub
    FindSub
    FollowSub
    FrobozzSub
    GiveToSub
    GiveSub
    HatchSub
    HelloSub
    ChantSub
    IsOnSub
    DiveSub
    KickSub
    StabSub
    KissSub
    KnockSub
    LaunchSub
    LeanOnSub
    LeaveSub
    ListenSub
    LockSub
    LookSub
    LookOnSub
    LookUnderSub
    LookBehindSub
    ReadSub
    LowerSub
    GreaseSub
    MakeSub
    MeltSub
    MoveSub
    MoveWithSub
    MumbleSub
    OdysseusSub
    PickSub
    TakeSub
    PlaySub
    FixSub
    PlughSub
    PourSub
    PraySub
    PumpUp
    SlideSub
    PushSub
    PutUnderSub
    WearSub
    PutBehindSub
    RaiseSub
    MolestSub
    ReadObjObjSub
    RepentSub
    RingSub
    TouchSub
    TalkToSub
    SaySub
    SearchSub
    SendForSub
    ShakeSub
    JumpSub
    SmellSub
    SpinSub
    SprayOnSub
    SprayWithSub
    SqueezeSub
    StandSub
    StaySub
    StrikeSub
    SwimSub
    SwingSub
    ThrowSub
    ThrowToSub
    ThrowOverSub
    TieToSub
    TieWithSub
    TempleWordSub
    UnlockSub
    UntieSub
    WaitSub
    WakeSub
    GoSub
    WalkToSub
    WalkAroundSub
    WieldSub
    WinSub
    WindUp
    WishSub
    YellSub
    ZorkSub
;
Array Preactions -->	! 14806 (0x39d6)
    *Pre PutOnSub
    *Pre BoardSub
    *Pre BurnSub
    *Pre PokeSub
    *Pre DropSub
    * Pre PutOnSub
    Pre FillSub
    * Pre GiveToSub
    * Pre GiveSub
    *Pre ReadSub
    *Pre MoveSub
    *Pre MoveWithSub
    *Pre TakeSub
;

! CodeArea 0x4e58 0x10af2

[ Article obj ;	! 20056 / 0x4e58
    print "a ", (name) obj;
    rtrue;
];

[ Probability chance ;	! 20066 / 0x4e62
    if (Lucky) {
        if (chance > random(100)) rtrue;
        rfalse;
    }
    if (chance > random(300)) rtrue;
    rfalse;
];

[ PickOne tbl ;	! 20092 / 0x4e7c
    return tbl-->random(tbl-->0);
];

[ ComplexPickOne tbl len offset ndx choice msg_tbl ;	! 20108 / 0x4e8c
    len = tbl-->0;
    offset = tbl-->1;
    --len;
    tbl = tbl + 2;
    msg_tbl = tbl + offset * 2;
    ndx = random(len - offset);
    choice = msg_tbl-->ndx;
    msg_tbl-->ndx = msg_tbl-->1;
    msg_tbl-->1 = choice;
    ++offset;
    if (offset == len) {
        offset = 0;
    }
    tbl-->0 = offset;
    return choice;
];

! References: red_buoy.action

[ BuoyAction ;	! 20186 / 0x4eda
    if (Verb ~= ##Open) rfalse;
    ScoreObj(large_emerald);	! not popped
    rfalse;
];

! References: clearing1.d_to

[ EnterGrating ;	! 20198 / 0x4ee6
    if (Leaves_moved) {
        if (grating has open) {
            return grating_room;
        }
        print "The grating is closed!";
        new_line;
        SetLastObject(grating);	! not popped
        rfalse;
    }
    print "You can't go that way.";
    new_line;
    rfalse;
];

! References: canyon_view.action

[ ClifftopAction rarg ;	! 20238 / 0x4f0e
    if (rarg ~= M_HANDLED || Verb ~= ##Dive || noun) rfalse;
    JigsUp("Nice view, lousy place to jump.");	! not popped
    rtrue;
];

[ Main ;	! 20260 / 0x4f24
  .label20261;
    Queue(FightDaemon,65535)-->0 = true;
    Queue(SwordDaemon,65535);	! not popped
    Queue(ThiefDaemon,65535)-->0 = true;
    Queue(CandleDaemon,40);	! not popped
    Queue(LampDaemon,200);	! not popped
    magic_boat.vtype = water_room;
    Def1_res-->1 = Def1 + 2;
    Def1_res-->2 = Def1 + 4;
    Def2_res-->2 = Def2b + 2;
    Def2_res-->3 = Def2b + 4;
    Def3_res-->1 = Def3a + 2;
    Def3_res-->3 = Def3b + 2;
    location = west_of_house;
    SetLastObject(small_mailbox);	! not popped
    if (location hasnt visited) {
        VersionSub();	! not popped
        new_line;
    }
    Lit = true;
    player = cretin;
    actor = player;
    move player to location;
    LookSub();	! not popped
    CommandLoop();	! not popped
    jump label20261;
];

! References: not_here_object.action

[ Not_Here_Object_F obj ind_obj=true UNUSED ;	! 20418 / 0x4fc2
    if (noun == not_here_object && second == not_here_object) {
        "Those things aren't here!";
    }
    if (noun == not_here_object) {
        obj = P_prso;
    } else {
        obj = P_prsi;
        ind_obj = false;
    }
    P_cont = 0;
    P_quote_flag = false;
    if (player == actor) {
        print "You can't see any";
        Print_no_see(ind_obj);	! not popped
        " here!";
    }
    print "The ", (name) player, " seems confused. ~I don't see any";
    Print_no_see(ind_obj);	! not popped
    " here!~";
];

[ FindParsedObject rms obj objcnt clist ;	! 20536 / 0x5038
    objcnt = Moby_Find(rms);
    if (Debug) {
        print "[Moby-found ", objcnt, " objects", "]";
        new_line;
    }
    if (objcnt > 1) {
        clist = (rms-->1).contains;
        if (clist) {
            objcnt = 1;
            P_object = clist;
        }
    }
    if (1 == objcnt) {
        if (Debug) {
            print "[Namely: ", (name) P_object, "]";
            new_line;
        }
        if (obj) {
            noun = P_object;
            rfalse;
        }
        second = P_object;
        rfalse;
    }
    if (~~obj) {
        print "You wouldn't find any";
        Print_no_see(obj);	! not popped
        " there.";
    }
    return not_here_object;
];

[ NoSeeAny obj ;	! 20672 / 0x50c0
    P_cont = 0;
    P_quote_flag = false;
    print "You can't see any";
    if (obj == noun) {
        ReplaceIt2();	! not popped
    } else {
        ReplaceIt();	! not popped
    }
    " here.";
];

[ Print_no_see obj ptr ;	! 20712 / 0x50e8
    if (P_oflag) {
        if (P_xadj) {
            print " ", (address) P_xadjn;
        }
        if (~~P_xnam) rfalse;
        print " ", (address) P_xnam;
        rtrue;
    }
    if (obj) {
        ptr = P_itbl-->6;
        return BufferPrint(ptr,P_itbl-->7,false);
    }
    ptr = P_itbl-->8;
    return BufferPrint(ptr,P_itbl-->9,false);
];

[ Zork2_deletion UNUSED UNUSED2 ;	! 20774 / 0x5126
    rfalse;
];

! References: stairs.action

[ StairAction ;	! 20780 / 0x512c
    if (Verb ~= ##EnterObj) rfalse;
    "You should say whether you want to go up or down.";
];

! References: sailor.action

[ SailorAction ;	! 20816 / 0x5150
    if (Verb ~= ##Hello) rfalse;
    ++HS_count;
    Zork2_deletion();	! not popped
    if (~~HS_count % 20) {
        "You seem to be repeating yourself.";
    }
    if (~~HS_count % 10) {
        "I think that phrase is getting a bit worn out.";
    }
    "Nothing happens here.";
];

! References: ground.action

[ GroundAction ;	! 20908 / 0x51ac
    if (Verb == ##PutOn or ##Insert && second == ground) {
        Perform(##Drop,noun);	! not popped
        rtrue;
    }
    if (location == sandy_cave) {
        return SandFunction();
    }
    if (Verb ~= ##Dig) rfalse;
    "The ground is too hard for digging here.";
];

! References: lurking_grue.action

[ GrueAction ;	! 20960 / 0x51e0
    if (Verb == ##Examine) {
        "The grue is a sinister, lurking presence in the dark places of the earth. Its favorite diet is adventurers, but its insatiable appetite is tempered by its fear of light. No grue has ever been seen by the light of day, and few have survived its fearsome jaws to tell the tale.";
    }
    if (Verb == ##Find) {
        "There is no grue here, but I'm sure there is at least one lurking in the darkness nearby. I wouldn't let my light go out if I were you!";
    }
    if (Verb ~= ##Listen) rfalse;
    "It makes no sound but is always lurking in the darkness nearby.";
];

! References: you.action, pseudo.action

[ PseudoAction in_mirror_room ;	! 21262 / 0x530e
    if (Verb == ##TalkTo) {
        P_cont = 0;
        P_quote_flag = false;
        "Talking to yourself is said to be a sign of impending mental collapse.";
    }
    if (Verb == ##GiveTo && second == you) {
        Perform(##Take,noun);	! not popped
        rtrue;
    }
    if (Verb == ##Make) {
        "Only you can do that.";
    }
    if (Verb == ##Disembark) {
        "You'll have to do that on your own.";
    }
    if (Verb == ##Eat) {
        "Auto-cannibalism is not the answer.";
    }
    if (Verb == ##Poke or ##Attack) {
        if (second && second has weapon) {
            return JigsUp("If you insist.... Poof, you're dead!");
        }
        "Suicide is not the answer.";
    }
    if (Verb == ##Take) {
        "How romantic!";
    }
    if (Verb ~= ##Examine) rfalse;
    in_mirror_room = parent(mirror1);
    if (location == in_mirror_room or parent(mirror2)) {
        "Your image in the mirror looks tired.";
    }
    "That's difficult unless your eyes are prehensile.";
];

! References: way.action, local_globals.initial2

[ WayAction ;	! 21532 / 0x541c
    if (Verb == ##Follow or ##Take) {
        "You must specify a direction to go.";
    }
    if (Verb == ##Find) {
        "I can't help you there....";
    }
    if (Verb ~= ##Dig) rfalse;
    "Not a chance.";
];

! References: zorkmid.action

[ ZorkmidAction ;	! 21598 / 0x545e
    if (Verb == ##Examine) {
        "The zorkmid is the unit of currency of the Great Underground Empire.";
    }
    if (Verb ~= ##Find) rfalse;
    "The best way to find zorkmids is to go out and look for them.";
];

[ Queue2 rtn ticks cint ;	! 21682 / 0x54b2
    cint = QueueInterrupt(rtn,true);
    cint-->1 = ticks;
    return cint;
];

[ Queue rtn ticks cint ;	! 21704 / 0x54c8
    cint = QueueInterrupt(rtn);
    cint-->1 = ticks;
    return cint;
];

[ QueueInterrupt rtn int2flag end c int ;	! 21724 / 0x54dc
    end = C_table + 180;
    c = C_table + C_ints;
  .label21743;
    if (c == end) {
        C_ints = C_ints - 6;
        if (int2flag) {
            C_ints2 = C_ints2 - 6;
        }
        int = C_table + C_ints;
        int-->2 = rtn;
        return int;
    }
    if (c-->2 == rtn) {
        return c;
    }
    c = c + 6;
    jump label21743;
];

[ Clocker c end tick flag ;	! 21786 / 0x551a
    if (Clock_wait) {
        Clock_wait = false;
        rfalse;
    }
    c = C_table + (P_won ? C_ints : C_ints2);
    end = C_table + 180;
  .label21822;
    if (c == end) {
        if (++turns > 999) {
            turns = 0;
        }
        return flag;
    }
    if (c-->0) {
        tick = c-->1;
        if (~~tick) {
            ! no code
        } else {
            c-->1 = tick - 1;
            if (tick <= 1 && (c-->2)()) {
                flag = true;
            }
        }
    }
    c = c + 6;
    jump label21822;
];

[ CommandLoop icnt ocnt num cnt obj tbl v ptbl obj1 temp ;	! 21888 / 0x5580
  .label21909;
    cnt = 0;
    obj = nothing;
    ptbl = true;
    P_won = Parser();
    if (P_won) {
        icnt = P_prsi-->P_matchlen;
        ocnt = P_prso-->P_matchlen;
        if (~~ocnt) {
            ocnt;	! not popped
        } else if (ocnt > 1) {
            tbl = P_prso;
            if (~~icnt) {
                obj = nothing;
            } else {
                obj = P_prsi-->1;
            }
            ocnt;	! not popped
        } else if (icnt > 1) {
            ptbl = false;
            tbl = P_prsi;
            obj = P_prso-->1;
            icnt;	! not popped
        } else {
            1[?];	! not popped
        }
        @store 3 SP;
        if ((~~obj) && icnt == true) {
            obj = P_prsi-->1;
        }
        if (Verb == ##Go) {
            v = Perform(Verb,noun);
        } else if (~~num) {
            if (~~P_syntax->0 & 3) {
                v = Perform(Verb);
                noun = nothing;
            } else if (~~Lit) {
                print "It's too dark to see.";
                new_line;
            } else {
                print "It's not clear what you're referring to.";
                new_line;
                v = 0;
            }
        } else {
            P_not_here = 0;
            P_mult = false;
            if (num > 1) {
                P_mult = true;
            }
            temp = false;
          .label22118;
            if (++cnt > num) {
                if (P_not_here > 0) {
                    print "The ";
                    if (P_not_here ~= num) {
                        print "other ";
                    }
                    print "object";
                    if (P_not_here ~= 1) {
                        print "s";
                    }
                    print " that you mentioned ";
                    if (P_not_here ~= 1) {
                        print "are";
                    } else {
                        print "is";
                    }
                    print "n't here.";
                    new_line;
                } else if (~~temp) {
                    print "There's nothing here you can take.";
                    new_line;
                }
            } else {
                if (ptbl) {
                    obj1 = P_prso-->cnt;
                } else {
                    obj1 = P_prsi-->cnt;
                }
                noun = (ptbl ? obj1 : obj);
                second = (ptbl ? obj : obj1);
                if (num > 1 || P_itbl-->6-->0 == 'all') {
                    if (obj1 == not_here_object) {
                        ++P_not_here;
                        jump label22118;
                    }
                    if (Verb == ##Take && second && P_itbl-->6-->0 == 'all' && noun notin second) {
                        jump label22118;
                    }
                    if (P_getflags == 1 && Verb == ##Take) {
                        if (parent(obj1) ~= player or location && parent(obj1) hasnt supporter) jump label22118;
                        if (obj1 hasnt takeable && obj1 hasnt trytakebit) {
                            jump label22118;
                        }
                    }
                    if (obj1 == it_object) {
                        print (name) LastNoun;
                    } else {
                        print (name) obj1;
                    }
                    print ": ";
                }
                temp = true;
                v = Perform(Verb,noun,second);
                if (v ~= A_FAILURE) jump label22118;
            }
        }
        if (v ~= A_FAILURE) {
            if (parent(player) == noun) {
                noun = nothing;
            }
            v = parent(player).action(M_BEFORE);
        }
        if (Verb ~= ##Save or ##Go or ##Again) {
            if (Verb == ##Version or ##Score or ##Restore) {
                ! no code
            } else {
                prev_verb = Verb;
                prev_noun = noun;
                prev_second = second;
            }
        }
        if (v == A_FAILURE) {
            P_cont = 0;
        }
    } else {
        P_cont = 0;
    }
    if ((~~P_won) || Verb == ##Superbrief or ##Brief or ##TalkTo || Verb == ##Version or ##Save or ##Verbose) jump label21909;
    if (Verb == ##Restore or ##Say) {
        jump label21909;
    }
    v = Clocker();
    jump label21909;
];

[ Perform act obj ind_obj v verbtmp objtmp indtmp ;	! 22484 / 0x57d4
    if (Debug) {
        print "[Perform: ", act;
        if (obj && act ~= ##Go) {
            print "/", (name) obj;
        }
        if (ind_obj) {
            print "/", (name) ind_obj;
        }
        print "]";
        new_line;
    }
    verbtmp = Verb;
    objtmp = noun;
    indtmp = second;
    if (it_object == ind_obj or obj && LastNounPlace ~= location) {
        print "I don't see what you are referring to.";
        new_line;
        return 2;
    }
    if (obj == it_object) {
        obj = LastNoun;
    }
    if (ind_obj == it_object) {
        ind_obj = LastNoun;
    }
    Verb = act;
    noun = obj;
    if (noun && second ~= it_object && Verb ~= ##Go) {
        LastNoun = noun;
        LastNounPlace = location;
    }
    second = ind_obj;
    if (not_here_object == noun or second) {
        v = Not_Here_Object_F();
        if (v) {
            jump label22775;
        }
    }
    obj = noun;
    ind_obj = second;
    v = player.action();
    if (v) {
        ! no code
    } else {
        v = parent(player).action(M_HANDLED);
        if (v) {
            ! no code
        } else {
            v = (Preactions-->act)();
            if (v) {
                ! no code
            } else {
                if (ind_obj) {
                    v = ind_obj.action();
                    if (v) {
                        jump label22775;
                    }
                }
                if (obj && act ~= ##Go && parent(obj)) {
                    v = parent(obj).container_action();
                    if (v) {
                        jump label22775;
                    }
                }
                if (obj && act ~= ##Go) {
                    v = obj.action();
                    if (v) {
                        jump label22775;
                    }
                }
                v = (Actions-->act)();
                if (~~v) {
                    ! no code
                }
            }
        }
    }
  .label22775;
    Verb = verbtmp;
    noun = objtmp;
    second = indtmp;
    return v;
];

[ Parser ptr=1 word val vrb len dir nw tmpword num UNUSED cnt=65535 ;	! 22786 / 0x5902
  .label22809;
    if (++cnt > 9) {
        ! no code
    } else {
        P_itbl-->cnt = 0;
        jump label22809;
    }
    P_adverb = 0;
    P_merged = false;
    P_prso-->P_matchlen = 0;
    P_prsi-->P_matchlen = 0;
    P_buts-->P_matchlen = 0;
    if ((~~P_quote_flag) && player ~= actor) {
        player = actor;
        if (parent(player) hasnt vehicle) {
            location = parent(player);
        }
        Lit = QueryLight(location);
    }
    if (P_cont) {
        ptr = P_cont;
        if ((~~superbrief) && actor == player && Verb ~= ##Say) {
            new_line;
        }
        P_cont = 0;
    } else {
        player = actor;
        P_quote_flag = false;
        if (parent(player) hasnt vehicle) {
            location = parent(player);
        }
        Lit = QueryLight(location);
        if (~~superbrief) {
            new_line;
        }
        print ">";
        @sread P_inbuf P_lexv;
    }
    P_len = P_lexv->1;
    if (~~P_len) {
        print "I beg your pardon?";
        new_line;
        rfalse;
    }
    len = P_len;
    P_dir = 0;
    P_ncn = 0;
    P_getflags = 0;
  .label22964;
    if (--P_len < 0) {
        P_quote_flag = false;
    } else {
        word = P_lexv-->ptr;
        if (~~word) {
            word = ParseNumber(ptr);
            if (~~word) jump label23520;
        }
        if (word == 'to' && vrb == #v$ask) {
            word = '"//';
        } else if (word == 'then' && (~~vrb) && (~~P_quote_flag)) {
            P_itbl-->0 = #v$ask;
            P_itbl-->1 = 0;
            word = '"//';
        }
        if (word == 'then' or './/' or '"//') {
            if (word == '"//') {
                if (P_quote_flag) {
                    P_quote_flag = false;
                } else {
                    P_quote_flag = true;
                }
            }
            if (P_len) {
                P_cont = ptr + 2;
            }
            P_lexv->1 = P_len;
        } else {
            val = Wt(word,PS_DIRECTION,P1_DIRECTION);
            if (val && vrb == 0 or #v$go) {
                if (len ~= 1 && (len ~= 2 || vrb ~= #v$go)) {
                    nw = P_lexv-->(ptr + 2);
                    if (nw ~= 'then' or './/' or '"//' || len < 2 && ((~~P_quote_flag) || len ~= 2 || nw ~= '"//') && (len <= 2 || nw ~= ',//' or 'and')) jump label23194;
                }
                dir = val;
                if (nw == ',//' or 'and') {
                    P_lexv-->(ptr + 2) = 'then';
                }
                if (len > 2) jump label23527;
                P_quote_flag = false;
                jump label23537;
            }
          .label23194;
            val = Wt(word,PS_VERB,P1_VERB);
            if (val && (~~vrb)) {
                vrb = val;
                P_itbl-->0 = val;
                P_itbl-->1 = P_vtbl;
                P_vtbl-->0 = word;
                num = ptr * 2 + 2;
                P_vtbl->2 = P_lexv->num;
                P_vtbl->3 = P_lexv->(num + 1);
            } else {
                val = Wt(word,PS_PREPOSITION,P1_OBJECT);
                if (~~val) {
                    if (word ~= 'all' or 'one' && (~~Wt(word,PS_ADJECTIVE)) && (~~Wt(word,PS_OBJECT))) jump label23431;
                    val = 0;
                }
                if (P_len > 0 && P_lexv-->(ptr + 2) == 'of' && ((~~val) && word ~= 'all' or 'one' or 'a//')) {
                    ! no code
                } else if (val && ((~~P_len) || P_lexv-->(ptr + 2) == 'then' or './/')) {
                    if (P_ncn < 2) {
                        P_itbl-->2 = val;
                        P_itbl-->3 = word;
                    }
                } else {
                    if (P_ncn == 2) {
                        print "There were too many nouns in that sentence.";
                        new_line;
                        rfalse;
                    }
                    ++P_ncn;
                    ptr = Clause(ptr,val,word);
                    if (~~ptr) rfalse;
                    if (ptr < 0) {
                        P_quote_flag = false;
                        jump label23537;
                      .label23431;
                        if (Wt(word,PS_BUZZ_WORD)) {
                            ! no code
                        } else {
                            if (vrb == #v$ask && Wt(word,PS_VERB,P1_VERB)) {
                                print "Please consult your manual for the correct way to talk to other people or creatures.";
                                new_line;
                                rfalse;
                            }
                            Cant_Use(ptr);	! not popped
                            rfalse;
                          .label23520;
                            UnknownWord(ptr);	! not popped
                            rfalse;
                        }
                    }
                }
            }
          .label23527;
            tmpword = word;
            ptr = ptr + 2;
            jump label22964;
        }
    }
  .label23537;
    if (dir) {
        Verb = ##Go;
        noun = dir;
        P_walk_dir = dir;
        rtrue;
    }
    P_walk_dir = 0;
    if (P_oflag) {
        OrphanMerge();	! not popped
    }
    if ((~~SyntaxCheck()) || (~~SnarfObjects()) || (~~ManyCheck()) || (~~TakeCheck())) rfalse;
    rtrue;
];

[ Wt ptr bit category=5 offset=P_P1OFF type ;	! 23594 / 0x5c2a
    type = ptr->4;
    if (type & bit ~= bit) rfalse;
    if (category > 4) rtrue;
    type = type & 3;
    if (type ~= category) {
        ++offset;
    }
    return ptr->offset;
];

[ Clause ptr val word off num andflag first=true nw tmpword cnt ;	! 23632 / 0x5c50
    off = (P_ncn - 1) * 2;
    if (val) {
        num = 2 + off;
        P_itbl-->num = val;
        P_itbl-->(num + 1) = word;
        ptr = ptr + 2;
    } else {
        ++P_len;
    }
    if (~~P_len) {
        --P_ncn;
        return 65535;
    }
    num = 6 + off;
    P_itbl-->num = P_lexv + ptr * 2;
    if (P_lexv-->ptr == 'the' or 'a//' or 'an') {
        P_itbl-->num = P_itbl-->num + 4;
    }
  .label23743;
    if (--P_len < 0) {
        cnt = num + 1;
        P_itbl-->cnt = P_lexv + ptr * 2;
        return 65535;
    }
    word = P_lexv-->ptr;
    if (~~word) {
        word = ParseNumber(ptr);
        if (~~word) jump label24079;
    }
    if (~~P_len) {
        nw = 0;
    } else {
        nw = P_lexv-->(ptr + 2);
    }
    if (word == 'and' or ',//') {
        andflag = true;
    } else if (word == 'all' or 'one') {
        if (nw == 'of') {
            --P_len;
            ptr = ptr + 2;
        }
    } else {
        if (word == 'then' or './/' || (Wt(word,PS_PREPOSITION) && P_itbl-->0 && (~~first))) {
            ++P_len;
            cnt = num + 1;
            P_itbl-->cnt = P_lexv + ptr * 2;
            return ptr - 2;
        }
        if (Wt(word,PS_OBJECT)) {
            if (Wt(word,PS_ADJECTIVE,P1_ADJECTIVE) && nw && Wt(nw,PS_OBJECT)) {
                ! no code
            } else {
                if ((~~andflag) && nw ~= 'but' or 'except' && nw ~= 'and' or ',//') {
                    cnt = num + 1;
                    P_itbl-->cnt = P_lexv + (ptr + 2) * 2;
                    return ptr;
                }
                andflag = false;
            }
        } else {
            if (P_merged || P_oflag || P_itbl-->0) {
                if (Wt(word,PS_ADJECTIVE)) jump label24086;
                if (Wt(word,PS_BUZZ_WORD)) {
                    jump label24086;
                }
            }
            if (andflag && (Wt(word,PS_DIRECTION) || Wt(word,PS_VERB))) {
                ptr = ptr - 4;
                P_lexv-->(ptr + 2) = 'then';
                P_len = P_len + 2;
            } else if (Wt(word,PS_PREPOSITION)) {
                ! no code
            } else {
                Cant_Use(ptr);	! not popped
                rfalse;
              .label24079;
                UnknownWord(ptr);	! not popped
                rfalse;
            }
        }
    }
  .label24086;
    tmpword = word;
    first = false;
    ptr = ptr + 2;
    jump label23743;
];

[ ParseNumber ptr len nptr digit num clocknum mult ;	! 24100 / 0x5e24
    len = (P_lexv + ptr * 2)->2;
    nptr = (P_lexv + ptr * 2)->3;
  .label24139;
    if (--len < 0) {
        ! no code
    } else {
        digit = P_inbuf->nptr;
        if (digit == 58) {
            clocknum = num;
            num = 0;
        } else {
            if (num > 10000 || digit >= 58 || digit <= 47) rfalse;
            mult = num * 10;
            num = mult + (digit - 48);
        }
        ++nptr;
        jump label24139;
    }
    P_lexv-->ptr = 'intnum';
    if (num > 1000) rfalse;
    if (clocknum) {
        if (clocknum < 8) {
            clocknum = clocknum + 12;
        } else {
            if (clocknum > 23) rfalse;
        }
        num = num + clocknum * 60;
    }
    second_intnum = num;
    return 'intnum';
];

[ OrphanMerge cnt=65535 temp verb beg end adj word UNUSED ;	! 24238 / 0x5eae
    P_oflag = false;
    verb = P_itbl-->0;
    if (verb && verb ~= P_otbl-->0 || P_ncn == 2) rfalse;
    if (P_otbl-->6 == true) {
        temp = P_itbl-->2;
        if (temp ~= P_otbl-->2 && temp) rfalse;
        P_otbl-->6 = P_itbl-->6;
        P_otbl-->7 = P_itbl-->7;
    } else if (P_otbl-->8 == true) {
        temp = P_itbl-->2;
        if (temp ~= P_otbl-->4 && temp) rfalse;
        P_otbl-->8 = P_itbl-->6;
        P_otbl-->9 = P_itbl-->7;
        P_ncn = 2;
    } else if (P_aclause) {
        if (P_ncn ~= 1) {
            P_aclause = P_VERB;
            rfalse;
        }
        beg = P_itbl-->6;
        end = P_itbl-->7;
      .label24388;
        if (beg == end) {
            if (adj) {
                AClauseWin(adj);	! not popped
                jump label24474;
            }
            P_aclause = P_VERB;
            rfalse;
        }
        if (~~adj) {
            word = beg-->0;
            if (word->4 & 32 == 32 || word == 'all' or 'one') {
                adj = word;
                jump label24467;
            }
        }
        if (word->4 & 128 == 128 || word == 'one') {
            if (word ~= P_anam or 'one') rfalse;
            AClauseWin(adj);	! not popped
            jump label24474;
        }
      .label24467;
        beg = beg + 4;
        jump label24388;
    }
  .label24474;
    if (++cnt > 9) {
        P_merged = true;
        rtrue;
    }
    P_itbl-->cnt = P_otbl-->cnt;
    jump label24474;
];

[ AClauseWin otbl ;	! 24494 / 0x5fae
    P_cctbl = P_otbl;
    ClauseCopy(P_aclause,P_aclause + 1,otbl);	! not popped
    if (P_otbl-->8) {
        P_ncn = 2;
    }
    P_aclause = P_VERB;
    rtrue;
];

[ WordPrint cnt buf ;	! 24526 / 0x5fce
  .label24531;
    if (--cnt < 0) rtrue;
    print (char) P_inbuf->buf;
    ++buf;
    jump label24531;
];

[ UnknownWord ptr buf word ;	! 24548 / 0x5fe4
    if (Verb == ##Say) {
        print "Nothing happens.";
        new_line;
        rfalse;
    }
    print "I don't know the word ~";
    buf = ptr * 2;
    word = (P_lexv + buf)->2;
    WordPrint(word,(P_lexv + buf)->3);	! not popped
    print "~.";
    new_line;
    P_quote_flag = false;
    P_oflag = false;
    rtrue;
];

[ Cant_Use ptr buf word ;	! 24628 / 0x6034
    if (Verb == ##Say) {
        print "Nothing happens.";
        new_line;
        rfalse;
    }
    print "You used the word ~";
    buf = ptr * 2;
    word = (P_lexv + buf)->2;
    WordPrint(word,(P_lexv + buf)->3);	! not popped
    print "~ in a way that I don't understand.";
    new_line;
    P_quote_flag = false;
    P_oflag = false;
    rtrue;
];

[ SyntaxCheck syn len num obj drive1 drive2 prep vrb tmp attr lbit ;	! 24724 / 0x6094
    vrb = P_itbl-->0;
    if (~~vrb) {
        print "There was no verb in that sentence!";
        new_line;
        rfalse;
    }
    syn = Verbs-->(255 - vrb);
    len = syn->0;
    syn = 1 + syn;
  .label24793;
    num = syn->0 & 3;
    if (P_ncn > num) {
        ! no code
    } else {
        if (num >= 1 && (~~P_ncn)) {
            prep = P_itbl-->2;
            if ((~~prep) || prep == syn->1) {
                drive1 = syn;
                jump label24881;
            }
        }
        lbit = syn->1;
        if (lbit == P_itbl-->2) {
            if (num == 2 && P_ncn == 1) {
                drive2 = syn;
            } else {
                lbit = syn->2;
                if (lbit == P_itbl-->4) {
                    SyntaxFound(syn);	! not popped
                    rtrue;
                }
            }
        }
    }
  .label24881;
    if (--len < 1) {
        if (drive1) jump label24930;
        if (drive2) {
            jump label24930;
        }
        print "That sentence isn't one I recognize.";
        new_line;
        rfalse;
    }
    syn = syn + 8;
    jump label24793;
  .label24930;
    if (drive1) {
        attr = drive1->3;
        lbit = drive1->5;
        obj = GWim(attr,lbit,drive1->1);
        if (obj) {
            P_prso-->P_matchlen = 1;
            P_prso-->1 = obj;
            return SyntaxFound(drive1);
        }
    }
    if (drive2) {
        attr = drive2->4;
        lbit = drive2->6;
        obj = GWim(attr,lbit,drive2->2);
        if (obj) {
            P_prsi-->P_matchlen = 1;
            P_prsi-->1 = obj;
            return SyntaxFound(drive2);
        }
    }
    if (vrb == #v$find) {
        print "That question can't be answered.";
        new_line;
        rfalse;
    }
    if (player ~= actor) {
        return Cant_Orphan();
    }
    Orphan(drive1,drive2);	! not popped
    print "What do you want to ";
    tmp = P_otbl-->1;
    if (~~tmp) {
        print "tell";
    } else if (~~P_vtbl->2) {
        print (address) tmp-->0;
    } else {
        lbit = tmp->2;
        WordPrint(lbit,tmp->3);	! not popped
        P_vtbl->2 = 0;
    }
    if (drive2) {
        Clause_Print(6,7);	! not popped
    }
    P_oflag = true;
    PrepPrint((drive1 ? (drive1->1) : (drive2->2)));	! not popped
    print "?";
    new_line;
    rfalse;
];

[ Cant_Orphan ;	! 25162 / 0x624a
    print "~I don't understand! What are you referring to?~";
    new_line;
    rfalse;
];

[ Orphan d1 d2 cnt=65535 ;	! 25196 / 0x626c
    P_oclause-->P_matchlen = 0;
    P_cctbl = P_itbl;
  .label25211;
    if (++cnt > 9) {
        ! no code
    } else {
        P_otbl-->cnt = P_itbl-->cnt;
        jump label25211;
    }
    if (P_ncn == 2) {
        ClauseCopy(8,9);	! not popped
    }
    if (P_ncn >= 1) {
        ClauseCopy(6,7);	! not popped
    }
    if (d1) {
        P_otbl-->2 = d1->1;
        P_otbl-->6 = true;
        rtrue;
    }
    if (~~d2) rfalse;
    P_otbl-->4 = d2->2;
    P_otbl-->8 = true;
    rtrue;
];

[ Clause_Print beg_ptr end_ptr the_p=true beginning ;	! 25288 / 0x62c8
    beginning = P_itbl-->beg_ptr;
    return BufferPrint(beginning,P_itbl-->end_ptr,the_p);
];

[ BufferPrint beg end cp nosp wrd first=true not_prefixed pn ;	! 25314 / 0x62e2
  .label25331;
    if (beg == end) rtrue;
    if (nosp) {
        nosp = false;
    } else {
        print " ";
    }
    wrd = beg-->0;
    if (wrd == './/') {
        nosp = true;
    } else {
        if (first && (~~not_prefixed) && cp) {
            print "the ";
        }
        if (P_oflag || P_merged) {
            print (address) wrd;
        } else if (wrd == 'it' && LastNounPlace == location) {
            print (name) LastNoun;
        } else {
            pn = beg->2;
            WordPrint(pn,beg->3);	! not popped
        }
        first = false;
    }
    beg = beg + 4;
    jump label25331;
];

[ Capitalize ptr word ;	! 25426 / 0x6352
    print (char) P_inbuf->(ptr->3) - 32;
    word = ptr->2 - 1;
    return WordPrint(word,ptr->3 + 1);
];

[ PrepPrint ndx prep ;	! 25470 / 0x637e
    if (~~ndx) rfalse;
    print " ";
    prep = PrepositionFind(ndx);
    print (address) prep;
    rtrue;
];

[ ClauseCopy src dst insrt beg end ;	! 25490 / 0x6392
    beg = P_cctbl-->src;
    end = P_cctbl-->dst;
    P_otbl-->src = P_oclause + (P_oclause-->P_matchlen * 2 + 2);
  .label25530;
    if (beg == end) {
        P_otbl-->dst = P_oclause + (P_oclause-->P_matchlen * 2 + 2);
        rtrue;
    }
    if (insrt && P_anam == beg-->0) {
        Clause_Add(insrt);	! not popped
    }
    Clause_Add(beg-->0);	! not popped
    beg = beg + 4;
    jump label25530;
];

[ Clause_Add word len ;	! 25590 / 0x63f6
    len = P_oclause-->P_matchlen + 2;
    P_oclause-->(len - 1) = word;
    P_oclause-->len = 0;
    P_oclause-->P_matchlen = len;
    rtrue;
];

[ PrepositionFind prep cnt len ;	! 25624 / 0x6418
    len = Prepositions-->0 * 2;
  .label25639;
    if (++cnt > len) rfalse;
    if (Prepositions-->cnt ~= prep) jump label25639;
    return Prepositions-->(cnt - 1);
];

[ SyntaxFound syn ;	! 25662 / 0x643e
    P_syntax = syn;
    Verb = syn->7;
    return Verb;
];

[ GWim gbit lbit prep obj ;	! 25674 / 0x644a
    if (gbit == rmungbit) {
        return Room_Holder;
    }
    P_gwimbit = gbit;
    P_slocbits = lbit;
    P_merge-->P_matchlen = 0;
    if (Get_Object(P_merge,false)) {
        P_gwimbit = 0;
        if (P_merge-->P_matchlen ~= 1) rfalse;
        obj = P_merge-->1;
        if (obj == you) rfalse;
        print "(";
        if (prep) {
            prep = PrepositionFind(prep);
            print (address) prep;
            if (prep == 'out') {
                print " of";
            }
            if (obj == pair_of_hands) {
                print " your hands)";
                new_line;
            } else {
                print " the ";
            }
        }
        if (obj ~= pair_of_hands) {
            print (name) obj, ")";
            new_line;
        }
        return obj;
    }
    P_gwimbit = 0;
    rfalse;
];

[ SnarfObjects ptr ;	! 25790 / 0x64be
    ptr = P_itbl-->6;
    if (ptr) {
        P_slocbits = P_syntax->5;
        if (~~Snarfem(ptr,P_itbl-->7,P_prso)) rfalse;
        if (P_buts-->P_matchlen) {
            P_prso = ButMerge(P_prso);
        }
    }
    ptr = P_itbl-->8;
    if (~~ptr) rtrue;
    P_slocbits = P_syntax->6;
    if (~~Snarfem(ptr,P_itbl-->9,P_prsi)) rfalse;
    if (~~P_buts-->P_matchlen) rtrue;
    if (P_prsi-->P_matchlen == 1) {
        P_prso = ButMerge(P_prso);
        rtrue;
    }
    P_prsi = ButMerge(P_prsi);
    rtrue;
];

[ ButMerge tbl len butlen cnt=1 matches obj ntbl ;	! 25888 / 0x6520
    len = tbl-->P_matchlen;
    P_merge-->P_matchlen = 0;
  .label25912;
    if (--len < 0) {
        ! no code
    } else {
        obj = tbl-->cnt;
        if (ZMemQ(obj,P_buts)) {
            ! no code
        } else {
            P_merge-->(matches + 1) = obj;
            ++matches;
        }
        ++cnt;
        jump label25912;
    }
    P_merge-->P_matchlen = matches;
    ntbl = P_merge;
    P_merge = tbl;
    return ntbl;
];

[ Snarfem ptr eptr tbl but UNUSED wv word nw ;	! 25966 / 0x656e
    P_getflags = 0;
    P_csptr = ptr;
    P_ceptr = eptr;
    P_buts-->P_matchlen = 0;
    tbl-->P_matchlen = 0;
    word = ptr-->0;
  .label26006;
    if (ptr == eptr) {
        return Get_Object((but ? but : tbl));
    }
    nw = ptr-->2;
    if (word == 'all') {
        P_getflags = 1;
        if (nw == 'of') {
            ptr = ptr + 4;
        }
    } else if (word == 'but' or 'except') {
        if (~~Get_Object((but ? but : tbl))) rfalse;
        but = P_buts;
        but-->P_matchlen = 0;
    } else if (word == 'a//' or 'one') {
        if (~~P_adj) {
            P_getflags = 2;
            if (nw == 'of') {
                ptr = ptr + 4;
            }
        } else {
            P_name = P_oneobj;
            if (~~Get_Object((but ? but : tbl))) rfalse;
            if (~~nw) rtrue;
        }
    } else {
        if (word == 'and' or ',//' && nw ~= 'and' or ',//') {
            if (Get_Object((but ? but : tbl))) jump label26273;
            rfalse;
        }
        if (Wt(word,PS_BUZZ_WORD)) {
            ! no code
        } else if (word == 'and' or ',//') {
            ! no code
        } else if (word == 'of') {
            if (~~P_getflags) {
                P_getflags = 4;
            }
        } else {
            wv = Wt(word,PS_ADJECTIVE,P1_ADJECTIVE);
            if (wv && (~~P_adj)) {
                P_adj = wv;
                P_adjn = word;
            } else if (Wt(word,PS_OBJECT,P1_OBJECT)) {
                P_name = word;
                P_oneobj = word;
            }
        }
    }
  .label26273;
    if (ptr == eptr) jump label26006;
    ptr = ptr + 4;
    word = nw;
    jump label26006;
];

[ Get_Object tbl vrb=true bits len xbits tlen gcheck tmp UNUSED ;	! 26288 / 0x66b0
    xbits = P_slocbits;
    tlen = tbl-->P_matchlen;
    if (P_getflags & 4 == 4) rtrue;
    if ((~~P_name) && P_adj && Wt(P_adjn,PS_OBJECT,P1_OBJECT)) {
        P_name = P_adjn;
        P_adj = 0;
    }
    if ((~~P_name) && (~~P_adj) && P_getflags ~= 1 && (~~P_gwimbit)) {
        if (~~vrb) rfalse;
        print "There seems to be a noun missing in that sentence!";
        new_line;
        rfalse;
    }
    if (P_getflags ~= 1 || (~~P_slocbits)) {
        P_slocbits = 65535;
    }
    P_table = tbl;
  .label26401;
    if (gcheck) {
        GlobalCheck(tbl);	! not popped
    } else {
        if (Lit) {
            give actor ~transparent;
            DoSL(location,SOG,SIR);	! not popped
            give actor transparent;
        }
        DoSL(actor,SH,SC);	! not popped
    }
    len = tbl-->P_matchlen - tlen;
    if (P_getflags & 1 == 1) {
        ! no code
    } else if (P_getflags & 2 == 2 && len) {
        if (len ~= 1) {
            tbl-->1 = tbl-->random(len);
            print "(How about the ", (name) tbl-->1, "?)";
            new_line;
        }
        tbl-->P_matchlen = 1;
    } else {
        if (len > 1 || ((~~len) && P_slocbits ~= 65535)) {
            if (P_slocbits == 65535) {
                P_slocbits = xbits;
                tmp = len;
                tbl-->P_matchlen = tbl-->P_matchlen - len;
                jump label26401;
            }
            if (~~len) {
                len = tmp;
            }
            if (player ~= actor) {
                Cant_Orphan();	! not popped
                rfalse;
            }
            if (vrb && P_name) {
                Which_Print(tlen,len,tbl);	! not popped
                P_aclause = ((tbl == P_prso) ? P_NC1 : P_NC2);
                P_aadj = P_adj;
                P_anam = P_name;
                Orphan(0,0);	! not popped
                P_oflag = true;
            } else if (vrb) {
                print "There seems to be a noun missing in that sentence!";
                new_line;
            }
            P_name = 0;
            P_adj = 0;
            rfalse;
        }
        if ((~~len) && gcheck) {
            if (vrb) {
                if (Lit) {
                    ObjFound(not_here_object,tbl);	! not popped
                    P_xnam = P_name;
                    P_xadj = P_adj;
                    P_xadjn = P_adjn;
                    P_name = 0;
                    P_adj = 0;
                    P_adjn = 0;
                    rtrue;
                }
                print "It's too dark to see!";
                new_line;
            }
            P_name = 0;
            P_adj = 0;
            rfalse;
        }
        if (~~len) {
            gcheck = true;
            jump label26401;
        }
    }
    P_slocbits = xbits;
    P_name = 0;
    P_adj = 0;
    rtrue;
];

[ Moby_Find list rlist cnt ;	! 26730 / 0x686a
    P_slocbits = 65535;
    P_name = P_xnam;
    P_adj = P_xadj;
    list-->P_matchlen = 0;
    rlist = child(Room_Holder);
  .label26757;
    if (~~rlist) {
        ! no code
    } else {
        SearchList(rlist,list,P_SRCALL);	! not popped
        rlist = sibling(rlist);
        jump label26757;
    }
    cnt = list-->P_matchlen;
    if (~~cnt) {
        DoSL(local_globals,1,1);	! not popped
    }
    cnt = list-->P_matchlen;
    if (~~cnt) {
        DoSL(Room_Holder,1,1);	! not popped
    }
    cnt = list-->P_matchlen;
    if (cnt == 1) {
        P_object = list-->1;
    }
    P_name = 0;
    P_adj = 0;
    return cnt;
];

[ Which_Print num cnt list obj total ;	! 26828 / 0x68cc
    total = cnt;
    print "Which";
    if (P_oflag || P_merged) {
        print " ", (address) P_name;
    } else if (list == P_prso) {
        Clause_Print(6,7,false);	! not popped
    } else {
        Clause_Print(8,9,false);	! not popped
    }
    print " do you mean, ";
  .label26893;
    ++num;
    obj = list-->num;
    print "the ", (name) obj;
    if (cnt == 2) {
        if (total ~= 2) {
            print ",";
        }
        print " or ";
    } else if (cnt > 2) {
        print ", ";
    }
    if (--cnt >= 1) jump label26893;
    "?";
];

[ GlobalCheck tbl ptr rmg rmg_len cnt obj obits foo ;	! 26938 / 0x693a
    ptr = tbl-->P_matchlen;
    obits = P_slocbits;
    rmg = location.&contains;
    if (rmg) {
        rmg_len = get_prop_len(rmg) - 1;
      .label26976;
        obj = rmg->cnt;
        if (ThisIt(obj,tbl)) {
            ObjFound(obj,tbl);	! not popped
        }
        if (++cnt <= rmg_len) jump label26976;
    }
    rmg = location.&pseudo;
    if (rmg) {
        rmg_len = get_prop_len(rmg) / 4 - 1;
        cnt = 0;
      .label27024;
        if (P_name == rmg-->(cnt * 2)) {
            pseudo.action = rmg-->(cnt * 2 + 1);
            foo = pseudo.&action - 5;
            foo-->0 = P_name-->0;
            foo-->1 = P_name-->1;
            ObjFound(pseudo,tbl);	! not popped
        } else {
            if (++cnt <= rmg_len) jump label27024;
        }
    }
    if (tbl-->P_matchlen ~= ptr) rfalse;
    P_slocbits = 65535;
    P_table = tbl;
    DoSL(global_objects,1,1);	! not popped
    P_slocbits = obits;
    if (tbl-->P_matchlen || Verb ~= ##LookIn or ##Search or ##Examine) rfalse;
    return DoSL(Room_Holder,1,1);
];

[ DoSL obj bit1 bit2 UNUSED ;	! 27144 / 0x6a08
    if (P_slocbits & (bit1 + bit2) == bit1 + bit2) {
        return SearchList(obj,P_table,P_SRCALL);
    }
    if (P_slocbits & bit1 == bit1) {
        return SearchList(obj,P_table,P_SRCTOP);
    }
    if (P_slocbits & bit2 ~= bit2) rtrue;
    return SearchList(obj,P_table,P_SRCBOT);
];

[ SearchList obj tbl lvl fls nobj ;	! 27196 / 0x6a3c
    if ((obj = child(obj)) == nothing) rfalse;
  .label27211;
    if (lvl ~= P_SRCBOT && obj.&name && ThisIt(obj,tbl)) {
        ObjFound(obj,tbl);	! not popped
    }
    if (lvl ~= P_SRCTOP || obj has scope_inside || obj has supporter && (nobj = child(obj)) ~= nothing && (obj has open || obj has transparent)) {
        fls = SearchList(obj,tbl,((obj has supporter) ? P_SRCALL : ((obj has scope_inside) ? P_SRCALL : P_SRCTOP)));
    }
    if ((obj = sibling(obj)) ~= nothing) jump label27211;
    rtrue;
];

[ ObjFound obj tbl ptr ;	! 27300 / 0x6aa4
    ptr = tbl-->P_matchlen;
    tbl-->(ptr + 1) = obj;
    tbl-->P_matchlen = ptr + 1;
    rtrue;
];

[ TakeCheck ;	! 27330 / 0x6ac2
    if (~~ITakeCheck(P_prso,P_syntax->5)) rfalse;   !direct object syntax clause
    return ITakeCheck(P_prsi,P_syntax->6);          !indirect direct object syntax clause
];

[ ITakeCheck tbl bits ptr obj taken ;	! 27358 / 0x6ade
    ptr = tbl-->P_matchlen;
    if ((~~ptr) || (bits & 2 ~= 2 && bits & 8 ~= 8)) rtrue; ! not HAVE, HELD ???
  .label27384;
    if (--ptr < 0) rtrue; ! done reading
    obj = tbl-->(ptr + 1); ! get next object
    if (obj == it_object) {
        obj = LastNoun;
    }
    if (ThingInPlayer(obj) || obj == pair_of_hands) jump label27384; ! already have
    noun = obj;
    if (obj has trytakebit) {
        taken = true;
    } else if (player ~= cretin) {
        taken = false;
    } else if (bits & 8 == 8 && ITake(false) == 1) {
        taken = false;
    } else {
        taken = true;
    }
    if (taken && bits & 2 == 2) {  ! HAVE
        if (obj == not_here_object) {
            print "You don't have that!";
            new_line;
            rfalse;
        }
        print "You don't have the ", (name) obj, ".";
        new_line;
        rfalse;
    }
    if (taken || player ~= cretin) jump label27384;
    print "(Taken)";
    new_line;
    jump label27384;
];

[ ManyCheck loss tmp word ;	! 27522 / 0x6b82
    if (P_prso-->P_matchlen > 1 && P_syntax->5 & 4 ~= 4) {
        loss = 1;
    } else if (P_prsi-->P_matchlen > 1 && P_syntax->6 & 4 ~= 4) {
        loss = 2;
    }
    if (~~loss) rtrue;
    print "You can't use multiple ";
    if (loss == 2) {
        print "in";
    }
    print "direct objects with ~";
    tmp = P_itbl-->1;
    if (~~tmp) {
        print "tell";
    } else if (P_oflag || P_merged) {
        print (address) tmp-->0;
    } else {
        word = tmp->2;
        WordPrint(word,tmp->3);	! not popped
    }
    print "~.";
    new_line;
    rfalse;
];

[ ZMemQ itm tbl size=65535 cnt=1 ;	! 27660 / 0x6c0c
    if (~~tbl) rfalse;
    if (size >= 0) {
        cnt = 0;
    } else {
        size = tbl-->0;
    }
  .label27686;
    if (itm == tbl-->cnt) rtrue;
    if (++cnt <= size) jump label27686;
    rfalse;
];

[ ZMemQB itm tbl size cnt ;	! 27700 / 0x6c34
  .label27709;
    if (itm == tbl->cnt) rtrue;
    if (++cnt <= size) jump label27709;
    rfalse;
];

[ QueryLight room darkflag=true oldroom islit ;	! 27724 / 0x6c4c
    if (Always_lit && player == actor) rtrue;
    P_gwimbit = light;
    oldroom = location;
    location = room;
    if (darkflag && room has light) {
        islit = true;
    } else {
        P_merge-->P_matchlen = 0;
        P_table = P_merge;
        P_slocbits = 65535;
        if (oldroom == room) {
            DoSL(player,1,1);	! not popped
            if (player ~= actor && actor in room) {
                DoSL(actor,1,1);	! not popped
            }
        }
        DoSL(room,1,1);	! not popped
        if (P_table-->P_matchlen > 0) {
            islit = true;
        }
    }
    location = oldroom;
    P_gwimbit = 0;
    return islit;
];

[ ReplaceIt2 word ;	! 27830 / 0x6cb6
    if (~~P_merged) {
        word = P_itbl-->6;
        if (word-->0 ~= 'it') jump label27856;
    }
    print " ", (name) noun;
    rtrue;
  .label27856;
    return BufferPrint(word,P_itbl-->7,false);
];

[ ReplaceIt word ;	! 27870 / 0x6cde
    if (~~P_merged) {
        word = P_itbl-->8;
        if (word-->0 ~= 'it') jump label27896;
    }
    print " ", (name) noun;
    rtrue;
  .label27896;
    return BufferPrint(word,P_itbl-->9,false);
];

[ ThisIt obj UNUSED syns UNUSED2 ;	! 27910 / 0x6d06
    if (obj has concealed) rfalse;
    if (P_name) {
        syns = obj.&name;
        if (~~ZMemQ(P_name,syns,get_prop_len(syns) / 2 - 1)) rfalse;
    }
    if (P_adj) {
        syns = obj.&adjectives;
        if ((~~syns) || (~~ZMemQB(P_adj,syns,get_prop_len(syns) - 1))) rfalse;
    }
    if ((~~P_gwimbit) || obj has P_gwimbit) rtrue;
    rfalse;
];

[ VerboseSub ;	! 27988 / 0x6d54
    verbose = true;
    superbrief = false;
    "Maximum verbosity.";
];

[ BriefSub ;	! 28010 / 0x6d6a
    verbose = false;
    superbrief = false;
    "Brief descriptions.";
];

[ SuperbriefSub ;	! 28032 / 0x6d80
    superbrief = true;
    "Super-brief descriptions.";
];

[ InventorySub ;	! 28058 / 0x6d9a
    if (child(player) ~= nothing) {
        return PrintCont(player);
    }
    "You are empty-handed.";
];

[ QuitSub askfirst=true UNUSED ;	! 28086 / 0x6db6
    ScoreSub();	! not popped
    if (askfirst) {
        print "Do you wish to leave the game? (Y is affirmative): ";
        if (Ask()) jump label28145;
    }
    if (~~askfirst) {
      .label28145;
        @quit;
        rtrue;
    }
    "Ok.";
];

[ RestartSub ;	! 28152 / 0x6df8
    ScoreSub(true);	! not popped
    print "Do you wish to restart? (Y is affirmative): ";
    if (~~Ask()) rfalse;
    print "Restarting.";
    new_line;
    @restart;
    "Failed.";
];

[ RestoreSub ;	! 28220 / 0x6e3c
    @restore ?~label28235;
    print "Ok.";
    new_line;
    return FirstLook();
  .label28235;
    "Failed.";
];

[ SaveSub ;	! 28242 / 0x6e52
    @save ?~label28250;
    "Ok.";
  .label28250;
    "Failed.";
];

[ ScriptSub ;	! 28258 / 0x6e62
    0-->8 = 0-->8 | 1;
    print "Here begins a transcript of interaction with";
    new_line;
    VersionSub();	! not popped
    rtrue;
];

[ UnscriptSub ;	! 28310 / 0x6e96
    print "Here ends a transcript of interaction with";
    new_line;
    VersionSub();	! not popped
    0-->8 = 0-->8 & 65534;
    rtrue;
];

[ VersionSub offset=17 ;	! 28362 / 0x6eca
    print "ZORK I: The Great Underground Empire^Copyright (c) 1981, 1982, 1983 Infocom, Inc. ", "All rights reserved.";
    new_line;
    if (0->1 & 8) {
        print "Licensed to Tandy Corporation.";
        new_line;
    }
    print "ZORK is a registered trademark of Infocom, Inc.^Revision ", 0-->1 & 2047, " / Serial number ";
  .label28558;
    if (++offset > 23) {
        ! no code
    } else {
        print (char) 0->offset;
        jump label28558;
    }
    new_line;
    rtrue;
];

[ VerifySub ;	! 28578 / 0x6fa2
    print "Verifying disk...";
    new_line;
    @verify ?~label28610;
    "The disk is correct.";
  .label28610;
    new_line;
    "** Disk Failure **";
];

[ DebugSub ;	! 28634 / 0x6fda
    print "Turning debugging feature ";
    if (Debug) {
        Debug = false;
        print "off";
    } else {
        Debug = true;
        print "on";
    }
    ".";
];

[ PlughSub ;	! 28676 / 0x7004
    "A hollow voice says ~Fool.~";
];

[ AgainSub obj ;	! 28700 / 0x701c
    if (prev_verb == ##Go) {
        return Perform(prev_verb,prev_noun);
    }
    if (prev_noun && ((~~parent(prev_noun)) || prev_noun has concealed)) {
        obj = prev_noun;
    }
    if (prev_second && ((~~parent(prev_second)) || prev_second has concealed)) {
        obj = prev_second;
    }
    if (obj && obj ~= pseudo or Room_Holder) {
        print "You can't see the ", (name) obj, " anymore.";
        new_line;
        return 2;
    }
    return Perform(prev_verb,prev_noun,prev_second);
];

[ WakeSub ;	! 28788 / 0x7074
    if (noun has animate) {
        if (noun.strength < 0) {
            print "The ", (name) noun, " is rudely awakened.";
            new_line;
            return CheckStrength(noun);
        }
        "He's wide awake, or haven't you noticed...";
    }
    "The ", (name) noun, " isn't sleeping.";
];

[ AnswerSub ;	! 28882 / 0x70d2
    print "Nobody seems to be awaiting your answer.";
    new_line;
    P_cont = 0;
    P_quote_flag = false;
    rtrue;
];

[ AttackSub ;	! 28914 / 0x70f2
    if (noun hasnt animate) {
        "I've known strange people, but fighting a ", (name) noun, "?";
    }
    if ((~~second) || second == pair_of_hands) {
        "Trying to attack a ", (name) noun, " with your bare hands is suicidal.";
    }
    if (second notin player) {
        "You aren't even holding the ", (name) second, ".";
    }
    if (second hasnt weapon) {
        "Trying to attack the ", (name) noun, " with a ", (name) second, " is suicidal.";
    }
    return HeroBlow();
];

[ BackSub ;	! 29070 / 0x718e
    "Sorry, my memory is poor. Please give a direction.";
];

[ BlowUp ;	! 29108 / 0x71b4
    "You can't blast anything by using words.";
];

[ PreBoardSub env ;	! 29134 / 0x71ce
    env = parent(player);
    if (Zork2_deletion()) rtrue;
    if (noun has vehicle) {
        if (noun notin location) {
            print "The ", (name) noun, " must be on the ground to be boarded.";
            new_line;
            return 2;
        }
        if (env hasnt vehicle) rfalse;
        print "You are already in the ", (name) env, "!";
        new_line;
        return 2;
    }
    print "You have a theory on how to board a ", (name) noun, ", perhaps?";
    new_line;
    return 2;
];

[ BoardSub UNUSED ;	! 29240 / 0x7238
    print "You are now in the ", (name) noun, ".";
    new_line;
    move player to noun;
    noun.action(M_ENTER);	! not popped
    rtrue;
];

[ BlowInSub ;	! 29272 / 0x7258
    return Perform(##Inflate,noun,blast_of_air);
];

[ BrushSub ;	! 29282 / 0x7262
    "If you wish, but heaven only knows why.";
];

[ BugSub ;	! 29310 / 0x727e
    "Bug? Not in a flawless program like this! (Cough, cough).";
];

[ PreBurnSub ;	! 29356 / 0x72ac
    if (second has flame && second has light) rfalse;
    "With a ", (name) second, "??!?";
];

[ BurnSub ;	! 29382 / 0x72c6
    if (Zork2_deletion()) rfalse;
    if (noun has flammable) {
        if (noun in player) {
            Remove(noun);	! not popped
            print "The ", (name) noun;
            return JigsUp(" catches fire. Unfortunately, you were holding it at the time.");
        }
        Remove(noun);	! not popped
        "The ", (name) noun, " catches fire and is consumed.";
    }
    "You can't burn a ", (name) noun, ".";
];

[ VomitSub ;	! 29464 / 0x7318
    "Preposterous!";
];

[ ClimbDown ;	! 29476 / 0x7324
    return ClimbUp(d_to,noun);
];

[ ClimbObjSub ;	! 29486 / 0x732e
    return ClimbUp(u_to,noun);
];

[ ClimbOnSub ;	! 29496 / 0x7338
    if (noun has vehicle) {
        return ClimbUp(u_to,pair_of_hands);
    }
    "You can't climb onto the ", (name) noun, ".";
];

[ ClimbUp dir=u_to obj pnum paddr UNUSED ;	! 29528 / 0x7358
    if ((~~obj) && noun) {
        obj = noun;
    }
    paddr = location.&dir;
    if (paddr) {
        if (obj) {
            pnum = get_prop_len(paddr);
            if (pnum == 2 || (pnum == 4 or 5 or 1 && (~~InRoomContains(noun,paddr->0)))) {
                print "The ", (name) obj, " do";
                if (obj ~= stairs) {
                    print "es";
                }
                print "n't lead ";
                if (dir == u_to) {
                    print "up";
                } else {
                    print "down";
                }
                "ward.";
            }
        }
        PlayerToProp(dir);	! not popped
        rtrue;
    }
    if (~~obj) {
        "You can't go that way.";
    }
    if (obj) {
        pnum = noun.&name;
        if (ZMemQ('wall',pnum,get_prop_len(pnum))) {
            "Climbing the walls is to no avail.";
        }
    }
    "You can't do that!";
];

[ CloseSub ;	! 29708 / 0x740c
    if (noun hasnt container && noun hasnt door) {
        "You must tell me how to do that to a ", (name) noun, ".";
    }
    if (noun hasnt supporter && noun.capacity) {
        if (noun has open) {
            give noun ~open;
            print "Closed.";
            new_line;
            if (~~Lit) rtrue;
            Lit = QueryLight(location);
            if (Lit) rtrue;
            "It is now pitch black.";
        }
        "It is already closed.";
    }
    if (noun has door) {
        if (noun has open) {
            give noun ~open;
            "The ", (name) noun, " is now closed.";
        }
        "It is already closed.";
    }
    "You cannot close that.";
];

[ CommandSub ;	! 29852 / 0x749c
    if (noun has animate) {
        "The ", (name) noun, " pays no attention.";
    }
    "You cannot talk to that!";
];

[ CountSub ;	! 29888 / 0x74c0
    if (noun == blessings) {
        "Well, for one, you are playing Zork...";
    }
    "You have lost your mind.";
];

[ CrossSub ;	! 29934 / 0x74ee
    "You can't cross that!";
];

[ CurseSub ;	! 29946 / 0x74fa
    if (noun) {
        if (noun has animate) {
            "Insults of this nature won't help you.";
        }
        "What a loony!";
    }
    "Such language in a high-class establishment like this!";
];

[ CutSub ;	! 30028 / 0x754c
    if (noun has animate) {
        return Perform(##Attack,noun,second);
    }
    if (noun has flammable && second has weapon) {
        Remove(noun);	! not popped
        "Your skillful ", (name) second, "smanship slices the ", (name) noun, " into innumerable slivers which blow away.";
    }
    if (second hasnt weapon) {
        "The ~cutting edge~ of a ", (name) second, " is hardly adequate.";
    }
    "Strange concept, cutting the ", (name) noun, "....";
];

[ DeflateSub ;	! 30176 / 0x75e0
    "Come on, now!";
];

[ DigSub ;	! 30188 / 0x75ec
    if (~~second) {
        second = pair_of_hands;
    }
    if (second has toolbit) {
        "Digging with the ", (name) second, " is slow and tedious.";
    }
    "Digging with a ", (name) second, " is silly.";
];

[ DisembarkSub ;	! 30250 / 0x762a
    if (parent(player) ~= noun) {
        print "You're not in that!";
        new_line;
        return 2;
    }
    if (location has dry_land) {
        print "You are on your own feet again.";
        new_line;
        move player to location;
        rtrue;
    }
    print "You realize that getting out here would be fatal.";
    new_line;
    return 2;
];

[ DisenchantSub ;	! 30326 / 0x7676
    "Nothing happens.";
];

[ DrinkSub ;	! 30340 / 0x7684
    return EatSub();
];

[ DrinkFromSub ;	! 30348 / 0x768c
    "How peculiar!";
];

[ PreDropSub ;	! 30360 / 0x7698
    if (noun ~= parent(player)) rfalse;
    Perform(##Disembark,noun);	! not popped
    rtrue;
];

[ DropSub ;	! 30376 / 0x76a8
    if (~~Idrop()) rfalse;
    "Dropped.";
];

[ EatSub can_eat can_drink env ;	! 30394 / 0x76ba
    can_eat = ((noun hasnt edible) ? false : true);
    if (can_eat && noun in player) {
        if (Verb == ##Drink) {
            print "How can you drink that?";
        } else {
            print "Thank you very much. It really hit the spot.";
            Remove(noun);	! not popped
        }
        new_line;
        rtrue;
    }
    if (noun has drinkable) {
        can_drink = true;
        env = parent(noun);
        if (noun in global_objects or local_globals || noun == pseudo) {
            return QuenchThirst();
        }
        if (env notin player) {
            "You have to be holding the ", (name) env, " first.";
        }
        if (env hasnt open) {
            "You'll have to open the ", (name) env, " first.";
        }
        return QuenchThirst();
    }
    if (can_eat || can_drink) rfalse;
    "I don't think that the ", (name) noun, " would agree with you.";
];

[ QuenchThirst ;	! 30604 / 0x778c
    print "Thank you very much. I was rather thirsty (from all this talking, probably).";
    new_line;
    return Remove(noun);
];

[ EchoSub ptr len echocnt char_cnt end ;	! 30662 / 0x77c6
    if (P_lexv->1 > 0) {
        ptr = P_lexv + P_lexv->1 * 4;
        end = ptr->0;
        len = end + ptr->1 - 1;
      .label30710;
        if (++echocnt > 2) {
            "...";
        }
        char_cnt = ptr->1 - 1;
      .label30727;
        if (++char_cnt > len) {
            ! no code
        } else {
            print (char) P_inbuf->char_cnt;
            jump label30727;
        }
        print " ";
        jump label30710;
    }
    "echo echo ...";
];

[ EnchantSub ;	! 30764 / 0x782c
    Zork2_deletion();	! not popped
    return DisenchantSub();
];

[ Remove obj old_lit ;	! 30776 / 0x7838
    if (obj == LastNoun) {
        LastNoun = nothing;
        LastNounPlace = nothing;
    }
    old_lit = Lit;
    remove obj;
    Lit = QueryLight(location);
    if ((~~old_lit) || old_lit == Lit) rtrue;
    "You are left in the dark...";
];

[ Enter ;	! 30826 / 0x786a
    return PlayerToProp(in_to);
];

[ ExamineSub ;	! 30834 / 0x7872
    if (noun.text_string) {
        print (string) noun.text_string;
        new_line;
        rtrue;
    }
    if (noun has container || noun has door) {
        return LookInSub();
    }
    "There's nothing special about the ", (name) noun, ".";
];

! References: basket1.name, basket2.name

[ Exit ;	! 30886 / 0x78a6
    return PlayerToProp(out_to);
];

[ BanishSub ;	! 30894 / 0x78ae
    "What a bizarre concept!";
];

[ PreFillSub paddr ;	! 30914 / 0x78c2
    if (~~second) {
        paddr = location.&contains;
        if (paddr) {
            if (ZMemQB(water,paddr,get_prop_len(paddr) - 1)) {
                second = water;
                rfalse;
            }
            "There is nothing to fill it with.";
        }
    }
    if (second == water) rfalse;
    Perform(##Insert,second,noun);	! not popped
    rtrue;
];

[ FillSub ;	! 30978 / 0x7902
    if (~~second) {
        if (InRoomContains(water,location)) {
            Perform(##Fill,noun,water);	! not popped
            rtrue;
        }
        if (quantity_of_water in parent(player)) {
            Perform(##Fill,noun,quantity_of_water);	! not popped
            rtrue;
        }
        "There's nothing to fill it with.";
    }
    "You may know how to do that, but I don't.";
];

[ FindSub env ;	! 31062 / 0x7956
    env = parent(noun);
    if (noun == pair_of_hands or blast_of_air) {
        "Within six feet of your head, assuming you haven't left that somewhere.";
    }
    if (noun == you) {
        "You're around here somewhere...";
    }
    if (env == global_objects) {
        "You find it.";
    }
    if (noun in player) {
        "You have it.";
    }
    if (noun in location || InRoomContains(noun,location) || noun == pseudo) {
        "It's right here.";
    }
    if (env has animate) {
        "The ", (name) env, " has it.";
    }
    if (env has supporter) {
        "It's on the ", (name) env, ".";
    }
    if (env has container) {
        "It's in the ", (name) env, ".";
    }
    "Beats me.";
];

[ FollowSub ;	! 31244 / 0x7a0c
    "You're nuts!";
];

[ FrobozzSub ;	! 31252 / 0x7a14
    "The FROBOZZ Corporation created, owns, and operates this dungeon.";
];

[ PreGiveToSub ;	! 31298 / 0x7a42
    if (ThingInPlayer(noun)) rfalse;
    "That's easy for you to say since you don't even have the ", (name) noun, ".";
];

[ GiveToSub ;	! 31344 / 0x7a70
    if (second hasnt animate) {
        "You can't give a ", (name) noun, " to a ", (name) second, "!";
    }
    "The ", (name) second, " refuses it politely.";
];

! References: tree.name

[ HatchSub ;	! 31390 / 0x7a9e
    "Bizarre!";
];

[ HelloSub ;	! 31400 / 0x7aa8
    if (noun) {
        if (noun has animate) {
            "The ", (name) noun, " bows his head to you in greeting.";
        }
        "It's a well known fact that only schizophrenics say ~Hello~ to a ", (name) noun, ".";
    }
    print (string) ComplexPickOne(Hello_table);
    new_line;
    rtrue;
];

[ ChantSub ;	! 31494 / 0x7b06
    print "The incantation echoes back faintly, but nothing else happens.";
    new_line;
    P_quote_flag = false;
    P_cont = 0;
    rtrue;
];

[ InflateSub ;	! 31540 / 0x7b34
    "How can you inflate that?";
];

[ IsOnSub ;	! 31556 / 0x7b44
    if (noun in second) {
        print "Yes, it is ";
        if (second has supporter) {
            print "on";
        } else {
            print "in";
        }
        " the ", (name) second, ".";
    }
    "No, it isn't.";
];

[ KickSub ;	! 31602 / 0x7b72
    return HackHack("Kicking the ");
];

[ KissSub ;	! 31612 / 0x7b7c
    "I'd sooner kiss a pig.";
];

[ KnockSub ;	! 31632 / 0x7b90
    if (noun has door) {
        "Nobody's home.";
    }
    "Why knock on a ", (name) noun, "?";
];

[ SwitchOffSub ;	! 31666 / 0x7bb2
    if (noun has on) {
        if (noun hasnt light) {
            "It is already off.";
        }
        give noun ~light;
        if (Lit) {
            Lit = QueryLight(location);
        }
        print "The ", (name) noun, " is now off.";
        new_line;
        if (Lit) rtrue;
        print "It is now pitch black.";
        new_line;
        rtrue;
    }
    "You can't turn that off.";
];

[ SwitchOnSub ;	! 31746 / 0x7c02
    if (noun has on) {
        if (noun has light) {
            "It is already on.";
        }
        give noun light;
        print "The ", (name) noun, " is now on.";
        new_line;
        if (Lit) rtrue;
        Lit = QueryLight(location);
        new_line;
        LookSub();	! not popped
        rtrue;
    }
    "You can't turn that on.";
];

[ LaunchSub ;	! 31812 / 0x7c44
    if (noun has vehicle) {
        "You can't launch that by saying ~launch~!";
    }
    "That's pretty weird.";
];

[ LeanOnSub ;	! 31860 / 0x7c74
    "Getting tired?";
];

[ DiveSub prop propsize ;	! 31874 / 0x7c82
    if (noun) {
        if (noun in location) {
            if (noun has animate) {
                "The ", (name) noun, " is too big to jump over.";
            }
            return JumpSub();
        }
        "That would be a good trick.";
    }
    prop = location.&d_to;
    if (prop) {
        propsize = get_prop_len(prop);
        if (propsize ~= 2) {
            if (propsize ~= 4) jump label32007;
            @load (prop->1) -> SP;
            @jz SP ?~label32007;
        }
        print "This was not a very safe place to try jumping.";
        new_line;
        return JigsUp(ComplexPickOne(Dive_msg));
      .label32007;
        if (location == up_a_tree) {
            print "In a feat of unaccustomed daring, you manage to land on your feet without killing yourself.";
            new_line;
            new_line;
            PlayerToProp(d_to);	! not popped
            rtrue;
        }
        return JumpSub();
    }
    return JumpSub();
];

[ LeaveSub ;	! 32088 / 0x7d58
    return PlayerToProp(out_to);
];

[ ListenSub ;	! 32096 / 0x7d60
    "The ", (name) noun, " makes no sound.";
];

[ LockSub ;	! 32116 / 0x7d74
    "It doesn't seem to work.";
];

[ LookSub ;	! 32130 / 0x7d82
    if (~~DescribeRoom(true)) rfalse;
    return DescribeObjects(true);
];

[ LookBehindSub ;	! 32148 / 0x7d94
    "There is nothing behind the ", (name) noun, ".";
];

[ LookInSub ;	! 32166 / 0x7da6
    if (noun has door) {
        if (noun has open) {
            print "The ", (name) noun, " is open, but I can't tell what's beyond it.";
        } else {
            print "The ", (name) noun, " is closed.";
        }
        new_line;
        rtrue;
    }
    if (noun has container) {
        if (noun has animate) {
            "There is nothing special to be seen.";
        }
        if (CanSeeContents(noun)) {
            if (child(noun) ~= nothing && PrintCont(noun)) rtrue;
            "The ", (name) noun, " is empty.";
        }
        "The ", (name) noun, " is closed.";
    }
    "You can't look inside a ", (name) noun, ".";
];

[ LookOnSub ;	! 32316 / 0x7e3c
    if (noun has supporter) {
        Perform(##LookIn,noun);	! not popped
        rtrue;
    }
    "Look on a ", (name) noun, "???";
];

[ LookUnderSub ;	! 32346 / 0x7e5a
    "There is nothing but dust there.";
];

[ LowerSub ;	! 32360 / 0x7e68
    return HackHack("Playing in this way with the ");
];

! References: dam_scenery.name

[ MakeSub ;	! 32370 / 0x7e72
    "You can't do that.";
];

[ MeltSub ;	! 32380 / 0x7e7c
    "It's not clear that a ", (name) noun, " can be melted.";
];

[ PreMoveSub ;	! 32406 / 0x7e96
    if (~~ThingInPlayer(noun)) rfalse;
    "You aren't an accomplished enough juggler.";
];

[ MoveSub ;	! 32446 / 0x7ebe
    if (noun has takeable) {
        "Moving the ", (name) noun, " reveals nothing.";
    }
    "You can't move the ", (name) noun, ".";
];

[ MumbleSub ;	! 32490 / 0x7eea
    "You'll have to speak up if you expect me to hear you!";
];

[ PrePokeSub ;	! 32526 / 0x7f0e
    if (Zork2_deletion()) rtrue;
    if (second && second has weapon) rfalse;
    print "Trying to destroy the ", (name) noun, " with ";
    if (~~second) {
        print "your bare hands";
    } else {
        print "a ", (name) second;
    }
    " is futile.";
];

[ PokeSub ;	! 32592 / 0x7f50
    if (noun has animate) {
        Perform(##Attack,noun);	! not popped
        rtrue;
    }
    "Nice try.";
];

[ OdysseusSub ;	! 32614 / 0x7f66
    if (location == cyclops_room && cyclops in location && (~~Cyclops_flag)) {
        QueueInterrupt(CyclopsDaemon)-->0 = false;
        Cyclops_flag = true;
        print "The cyclops, hearing the name of his father's deadly nemesis, flees the room by knocking down the wall on the east of the room.";
        new_line;
        Magic_flag = true;
        give cyclops ~fightbit;
        return Remove(cyclops);
    }
    "Wasn't he a sailor?";
];

[ GreaseSub ;	! 32744 / 0x7fe8
    "You probably put spinach in your gas tank, too.";
];

[ OpenSub obj revealmsg ;	! 32770 / 0x8002
    if (noun has container && noun.capacity) {
        if (noun has open) {
            "It is already open.";
        }
        give noun open;
        give noun visited;
        if (child(noun) == nothing || noun has transparent) {
            "Opened.";
        }
        if ((obj = child(noun)) ~= nothing && sibling(obj) == nothing && obj hasnt visited) {
            revealmsg = obj.initial;
            if (revealmsg) {
                print "The ", (name) noun, " opens.";
                new_line;
                print (string) revealmsg;
                new_line;
                rtrue;
            }
        }
        print "Opening the ", (name) noun, " reveals ";
        PrintContents(noun);	! not popped
        ".";
    }
    if (noun has door) {
        if (noun has open) {
            "It is already open.";
        }
        print "The ", (name) noun, " opens.";
        new_line;
        give noun open;
        rtrue;
    }
    "You must tell me how to do that to a ", (name) noun, ".";
];

[ ThrowToSub env ;	! 32948 / 0x80b4
    if (second == set_of_teeth) {
        env = parent(player);
        if (env has vehicle) {
            move noun to parent(env);
            "Ahoy -- ", (name) noun, " overboard!";
        }
        "You're not in anything!";
    }
    "Huh?";
];

[ PickSub ;	! 33006 / 0x80ee
    "You can't pick that.";
];

[ PlaySub ;	! 33018 / 0x80fa
    "That's silly!";
];

[ FixSub ;	! 33032 / 0x8108
    "This has no effect.";
];

[ PourSub ;	! 33044 / 0x8114
    if (noun == quantity_of_water) {
        Remove(noun);	! not popped
        if (second has flame && second has light) {
            print "The ", (name) second, " is extinguished.";
            new_line;
            give second ~light;
            give second ~flame;
            rtrue;
        }
        "The water spills over the ", (name) second, ", to the floor, and evaporates.";
    }
    if (noun == viscous_material) {
        return Perform(##Insert,viscous_material,second);
    }
    "You can't pour that.";
];

[ PraySub ;	! 33146 / 0x817a
    if (location == altar) {
        return Goto(forest1);
    }
    "If you pray enough, your prayers may be answered.";
];

[ PumpUp ;	! 33190 / 0x81a6
    if (second && second ~= air_pump) {
        "Pump it up with a ", (name) second, "?";
    }
    if (air_pump in player) {
        return Perform(##Inflate,noun,air_pump);
    }
    "It's really not clear how.";
];

[ PushSub ;	! 33244 / 0x81dc
    return HackHack("Pushing the ");
];

[ SlideSub ;	! 33254 / 0x81e6
    "You can't push things to that.";
];

[ PrePutOnSub ;	! 33272 / 0x81f8
    if (Zork2_deletion()) rfalse;
    return PreGiveToSub();
];

[ InsertSub weight ;	! 33288 / 0x8208
    if (second hasnt open && (second has door || second hasnt container)) {
        if (second has vehicle) {
            ! no code
        } else {
            "You can't do that.";
        }
    }
    if (second hasnt open) {
        print "The ", (name) second, " isn't open.";
        new_line;
        return SetLastObject(second);
    }
    if (second == noun) {
        "How can you do that?";
    }
    if (noun in second) {
        "The ", (name) noun, " is already in the ", (name) second, ".";
    }
    weight = QueryWeight(second);
    weight = weight + QueryWeight(noun);
    weight = weight - second.size;
    if (weight > second.capacity) {
        "There's no room.";
    }
    if ((~~ThingInPlayer(noun)) && noun has trytakebit) {
        "You don't have the ", (name) noun, ".";
    }
    if ((~~ThingInPlayer(noun)) && (~~ITake())) rtrue;
    move noun to second;
    give noun visited;
    ScoreObj(noun);	! not popped
    "Done.";
];

[ PutBehindSub ;	! 33490 / 0x82d2
    "That hiding place is too obvious.";
];

[ PutOnSub ;	! 33514 / 0x82ea
    if (second == ground) {
        Perform(##Drop,noun);	! not popped
        rtrue;
    }
    if (second has supporter) {
        return InsertSub();
    }
    "There's no good surface on the ", (name) second, ".";
];

[ PutUnderSub ;	! 33564 / 0x831c
    "You can't do that.";
];

[ RaiseSub ;	! 33574 / 0x8326
    return LowerSub();
];

[ MolestSub ;	! 33582 / 0x832e
    "What a (ahem!) strange idea.";
];

[ PreReadSub ;	! 33606 / 0x8346
    if (~~Lit) {
        "It is impossible to read in the dark.";
    }
    if ((~~second) || second has transparent) rfalse;
    "How does one look through a ", (name) second, "?";
];

[ ReadSub ;	! 33656 / 0x8378
    if (noun hasnt readable) {
        "How does one read a ", (name) noun, "?";
    }
    print (string) noun.text_string;
    new_line;
    rtrue;
];

[ ReadObjObjSub ;	! 33690 / 0x839a
    Perform(##Read,noun);	! not popped
    rtrue;
];

[ RepentSub ;	! 33700 / 0x83a4
    "It could very well be too late!";
];

[ PreAnswerSub ;	! 33722 / 0x83ba
    print "It is hardly likely that the ", (name) noun, " is interested.";
    new_line;
    P_cont = 0;
    P_quote_flag = false;
    rtrue;
];

[ RingSub ;	! 33762 / 0x83e2
    "How, exactly, can you ring that?";
];

[ TouchSub ;	! 33784 / 0x83f8
    return HackHack("Fiddling with the ");
];

[ SaySub who ;	! 33794 / 0x8402
    if (~~P_cont) {
        "Say what?";
    }
    P_quote_flag = false;
    rtrue;
    who = FindIn(location,animate);
    if (who) {
        print "You must address the ", (name) who, " directly.";
        new_line;
        P_quote_flag = false;
        P_cont = 0;
        rtrue;
    }
    if (P_lexv-->P_cont == 'hello') {
        P_quote_flag = false;
        rtrue;
    }
    P_quote_flag = false;
    P_cont = 0;
    "Talking to yourself is a sign of impending mental collapse.";
];

[ SearchSub ;	! 33916 / 0x847c
    "You find nothing unusual.";
];

[ SendForSub ;	! 33930 / 0x848a
    if (noun has animate) {
        "Why would you send for the ", (name) noun, "?";
    }
    "That doesn't make sends.";
];

[ PreGiveSub ;	! 33968 / 0x84b0
    Perform(##GiveTo,second,noun);	! not popped
    rtrue;
];

[ GiveSub ;	! 33978 / 0x84ba
    "Foo!";
];

[ ShakeSub ;	! 33984 / 0x84c0
    if (noun has animate) {
        "This seems to have no effect.";
    }
    if (noun hasnt takeable) {
        "You can't take it; thus, you can't shake it!";
    }
    if (noun has container) {
        if (noun has open) {
            if (child(noun) ~= nothing) {
                EmptyNoun();	! not popped
                print "The contents of the ", (name) noun, " spills ";
                if (location hasnt dry_land) {
                    print "out and disappears";
                } else {
                    print "to the ground";
                }
                ".";
            }
            "Shaken.";
        }
        if (child(noun) ~= nothing) {
            "It sounds like there is something inside the ", (name) noun, ".";
        }
        "The ", (name) noun, " sounds empty.";
    }
    "Shaken.";
];

[ EmptyNoun obj ;	! 34168 / 0x8578
  .label34171;
    if ((obj = child(noun)) == nothing) rtrue;
    give obj visited;
    move obj to ((location == up_a_tree) ? forest_path : ((location hasnt dry_land) ? pseudo : location));
    jump label34171;
];

[ JumpSub ;	! 34208 / 0x85a0
    print (string) ComplexPickOne(Hop_msg);
    new_line;
    rtrue;
];

[ SmellSub ;	! 34220 / 0x85ac
    "It smells like a ", (name) noun, ".";
];

[ SpinSub ;	! 34240 / 0x85c0
    "You can't spin that!";
];

[ SprayOnSub ;	! 34250 / 0x85ca
    return SqueezeSub();
];

[ SqueezeSub ;	! 34258 / 0x85d2
    if (noun has animate) {
        print "The ", (name) noun, " does not understand this.";
    } else {
        print "How singularly useless.";
    }
    new_line;
    rtrue;
];

[ SprayWithSub ;	! 34310 / 0x8606
    return Perform(##SprayOn,second,noun);
];

[ StabSub weap ;	! 34320 / 0x8610
    weap = HasWeapon(player);
    if (weap) {
        Perform(##Attack,noun,weap);	! not popped
        rtrue;
    }
    "No doubt you propose to stab the ", (name) noun, " with your pinky?";
];

[ StandSub ;	! 34374 / 0x8646
    if (parent(player) has vehicle) {
        Perform(##Disembark,parent(player));	! not popped
        rtrue;
    }
    "You are already standing, I think.";
];

[ StaySub ;	! 34412 / 0x866c
    "You will be lost without me!";
];

[ StrikeSub ;	! 34430 / 0x867e
    if (noun has animate) {
        "Since you aren't versed in hand-to-hand combat, you'd better attack the ", (name) noun, " with a weapon.";
    }
    Perform(##SwitchOn,noun);	! not popped
    rtrue;
];

[ SwimSub ;	! 34506 / 0x86ca
    if (InRoomContains(water,location)) {
        print "Swimming isn't usually allowed in the ";
        if (noun) {
            print (name) noun, ".";
        } else {
            print "dungeon.";
        }
        new_line;
        rtrue;
    }
    if (Zork2_deletion()) rfalse;
    "Go jump in a lake!";
];

[ SwingSub ;	! 34588 / 0x871c
    if (~~second) {
        "Whoosh!";
    }
    return Perform(##Attack,second,noun);
];

[ PreTakeSub ;	! 34608 / 0x8730
    if (noun in player) {
        if (noun has clothing) {
            "You are already wearing it.";
        }
        "You already have that!";
    }
    if (parent(noun) has container && parent(noun) hasnt open) {
        "You can't reach something that's inside a closed container.";
    }
    if (second) {
        if (second == ground) {
            second = nothing;
            rfalse;
        }
        if (second ~= parent(noun)) {
            "The ", (name) noun, " isn't in the ", (name) second, ".";
        }
        second = nothing;
        rfalse;
    }
    if (noun ~= parent(player)) rfalse;
    "You're inside of it!";
];

[ TakeSub ;	! 34748 / 0x87bc
    if (ITake() ~= 1) rfalse;
    if (noun has clothing) {
        "You are now wearing the ", (name) noun, ".";
    }
    "Taken.";
];

[ TalkToSub ;	! 34788 / 0x87e4
    if (noun has animate) {
        if (P_cont) {
            player = noun;
            location = parent(player);
            return location;
        }
        "The ", (name) noun, " pauses for a moment, perhaps thinking that you should re-read the manual.";
    }
    print "You can't talk to the ", (name) noun, "!";
    new_line;
    P_quote_flag = false;
    P_cont = 0;
    return 2;
];

[ EnterObjSub obj UNUSED ;	! 34882 / 0x8842
    if (noun has door) {
        PlayerToProp(OtherSide(noun));	! not popped
        rtrue;
    }
    if ((~~obj) && noun has vehicle) {
        Perform(##Board,noun);	! not popped
        rtrue;
    }
    if ((~~obj) && noun hasnt takeable) {
        if (Zork2_deletion() || Zork2_deletion() || Zork2_deletion() || Zork2_deletion()) rtrue;
        "You hit your head against the ", (name) noun, " as you attempt this feat.";
    }
    if (obj) {
        "You can't do that!";
    }
    if (noun in player) {
        "That would involve quite a contortion!";
    }
    print (string) ComplexPickOne(Yuks_table);
    new_line;
    rtrue;
];

[ ThrowSub ;	! 35048 / 0x88e8
    if (~~Idrop()) rfalse;
    if (second == you) {
        print "A terrific throw! The ", (name) noun;
        return JigsUp(" hits you squarely in the head. Normally, this wouldn't do much damage, but by incredible mischance, you fall over backwards trying to duck, and break your neck, justice being swift and merciful in the Great Underground Empire.");
    }
    if (second has animate) {
        "The ", (name) second, " ducks as the ", (name) noun, " flies by and crashes to the ground.";
    }
    "Thrown.";
];

[ ThrowOverSub ;	! 35136 / 0x8940
    "You can't throw anything off of that!";
];

[ TieToSub ;	! 35158 / 0x8956
    if (second == player) {
        "You can't tie anything to yourself.";
    }
    "You can't tie the ", (name) noun, " to that.";
];

[ TieWithSub ;	! 35202 / 0x8982
    "You could certainly never tie it with that!";
];

[ TempleWordSub ;	! 35228 / 0x899c
    if (location == temple) {
        return Goto(treasure_room);
    }
    if (location == treasure_room) {
        return Goto(temple);
    }
    "Nothing happens.";
];

[ PreMoveWithSub ;	! 35264 / 0x89c0
    if (noun has turnable) rfalse;
    "You can't turn that!";
];

[ MoveWithSub ;	! 35280 / 0x89d0
    "This has no effect.";
];

[ UnlockSub ;	! 35292 / 0x89dc
    return LockSub();
];

[ UntieSub ;	! 35300 / 0x89e4
    "This cannot be tied, so it cannot be untied!";
];

[ WaitSub turns=3 ;	! 35322 / 0x89fa
    print "Time passes...";
    new_line;
  .label35339;
    if (--turns < 0) {
        ! no code
    } else {
        if (~~Clocker()) jump label35339;
    }
    Clock_wait = true;
    rtrue;
];

! References: local_globals.pseudo

[ GoSub prop propsize str obj room ;	! 35360 / 0x8a20
    if (~~P_walk_dir) {
        Perform(##WalkTo,noun);	! not popped
        rtrue;
    }
    prop = location.&noun;
    if (prop) {
        propsize = get_prop_len(prop);
        if (propsize == 1) {
            return Goto(prop->0);
        }
        if (propsize == 2) {
            print (string) prop-->0;
            new_line;
            return 2;
        }
        if (propsize == 3) {
            room = (prop-->0)();
            if (room) {
                return Goto(room);
            }
            if (Zork2_deletion()) rfalse;
            return 2;
        }
        if (propsize == 4) {
            @load (prop->1) -> SP;
            @jz SP ?label35478;
            return Goto(prop->0);
          .label35478;
            str = prop-->1;
            if (str) {
                print (string) str;
                new_line;
                return 2;
            }
            print "You can't go that way.";
            new_line;
            return 2;
        }
        if (propsize ~= 5) rfalse;
        obj = prop->1;
        if (obj has open) {
            return Goto(prop->0);
        }
        str = prop-->1;
        if (str) {
            print (string) str;
            new_line;
            return 2;
        }
        print "The ", (name) obj, " is closed.";
        new_line;
        SetLastObject(obj);	! not popped
        return 2;
    }
    if ((~~Lit) && 80 > random(100) && location hasnt water_room) {
        if (Grue_Repellent) {
            print "There are odd noises in the darkness, and there is no exit in that direction.";
            new_line;
            return 2;
        }
        if (Zork2_deletion()) rfalse;
        return JigsUp("Oh, no! You have walked into the slavering fangs of a lurking grue!");
    }
    print "You can't go that way.";
    new_line;
    return 2;
];

[ WalkAroundSub ;	! 35656 / 0x8b48
    "Use compass directions for movement.";
];

[ WalkToSub ;	! 35682 / 0x8b62
    if (noun in location || InRoomContains(noun,location)) {
        "It's here!";
    }
    "You should supply a direction!";
];

[ WieldSub ;	! 35724 / 0x8b8c
    return HackHack("Waving the ");
];

[ WearSub ;	! 35734 / 0x8b96
    if (noun hasnt clothing) {
        "You can't wear the ", (name) noun, ".";
    }
    Perform(##Take,noun);	! not popped
    rtrue;
];

[ WinSub ;	! 35762 / 0x8bb2
    "Naturally!";
];

! References: cyclops.name

[ WindUp ;	! 35772 / 0x8bbc
    "You cannot wind up a ", (name) noun, ".";
];

[ WishSub ;	! 35790 / 0x8bce
    "With luck, your wish will come true.";
];

[ YellSub ;	! 35816 / 0x8be8
    "Aaaarrrrgggghhhh!";
];

[ ZorkSub ;	! 35832 / 0x8bf8
    "At your service!";
];

[ FirstLook ;	! 35844 / 0x8c04
    if ((~~DescribeRoom()) || superbrief) rfalse;
    return DescribeObjects();
];

[ DescribeRoom look v text environment ;	! 35862 / 0x8c16
    v = (look ? look : verbose);
    if (~~Lit) {
        print "It is pitch black.";
        if (~~Grue_Repellent) {
            print " You are likely to be eaten by a grue.";
        }
        new_line;
        Zork2_deletion();	! not popped
        rfalse;
    }
    if (location hasnt visited) {
        give location visited;
        v = true;
    }
    if (location has maze_room) {
        give location ~visited;
    }
    if (location in Room_Holder) {
        print (name) location;
        environment = parent(player);
        if (environment has vehicle) {
            print ", in the ", (name) environment;
        }
        new_line;
    }
    if ((~~look) && superbrief) rtrue;
    environment = parent(player);
    if (v && location.action(M_LOOK)) rtrue;
    if (v) {
        text = location.description;
        if (text) {
            print (string) text;
            new_line;
            jump label36022;
        }
    }
    location.action(M_WAKE);	! not popped
  .label36022;
    if (location == environment) rtrue;
    give environment vehicle;
    environment.action(M_LOOK);	! not popped
    rtrue;
];

[ DescribeObjects v ;	! 36040 / 0x8cc8
    if (Lit) {
        if (child(location) == nothing) rfalse;
        v = (v ? v : verbose);
        return PrintCont(location,v,65535);
    }
    "Only bats can see in the dark. And you're not one.";
];

[ DescribeOb obj v level text av ;	! 36108 / 0x8d0c
    Last_ob_longdesc = obj;
    if ((~~level) && obj.initial2(M_FIGHT)) rtrue;
    if (~~level) {
        if (obj hasnt visited) {
            text = obj.initial;
            if (text) jump label36158;
        }
        text = obj.description;
        if (text) {
          .label36158;
            print (string) text;
            jump label36249;
        }
    }
    if (~~level) {
        print "There is a ", (name) obj, " here";
        if (obj has light) {
            print " (providing light)";
        }
        print ".";
    } else {
        print (string) Indents-->level, "A ", (name) obj;
        if (obj has light) {
            print " (providing light)";
        } else if (obj has clothing) {
            print " (being worn)";
        }
    }
  .label36249;
    Zork2_deletion();	! not popped
    if (~~level) {
        av = parent(player);
        if (av && av has vehicle) {
            print " (outside the ", (name) av, ")";
        }
    }
    new_line;
    if ((~~CanSeeContents(obj)) || child(obj) == nothing) rfalse;
    return PrintCont(obj,v,level);
];

[ PrintContents obj itm nextitem first=true last it_flag ;	! 36306 / 0x8dd2
    if ((itm = child(obj)) == nothing) rfalse;
  .label36323;
    nextitem = sibling(itm);
    if (first) {
        first = false;
    } else {
        print ", ";
        if (~~nextitem) {
            print "and ";
        }
    }
    print "a ", (name) itm;
    if ((~~last) && (~~it_flag)) {
        last = itm;
    } else {
        it_flag = true;
        last = nothing;
    }
    itm = nextitem;
    if (itm) jump label36323;
    if ((~~last) || it_flag) rtrue;
    SetLastObject(last);	! not popped
    rtrue;
];

! References: zork_owners_manual.name

[ PrintCont obj v level itm first environment text pv inv ;	! 36388 / 0x8e24
    if ((itm = child(obj)) == nothing) rtrue;
    environment = parent(player);
    if (environment && environment has vehicle) {
        ! no code
    } else {
        environment = 0;
    }
    first = true;
    if (player == obj or parent(obj)) {
        inv = true;
        jump label36535;
    }
  .label36445;
    if (~~itm) {
        ! no code
    } else {
        if (itm == environment) {
            pv = true;
        } else if (itm == player) {
            ! no code
        } else if (itm hasnt concealed && itm hasnt visited) {
            text = itm.initial;
            if (text) {
                if (itm hasnt scenery) {
                    print (string) text;
                    new_line;
                }
                if (CanSeeContents(itm) && (~~parent(itm).initial2) && (child(itm) ~= nothing && PrintCont(itm,v,0))) {
                    first = false;
                }
            }
        }
        itm = sibling(itm);
        jump label36445;
    }
  .label36535;
    itm = child(obj);
  .label36539;
    if (~~itm) {
        if (pv && environment && child(environment) ~= nothing) {
            ++level;
            PrintCont(environment,v,level);	! not popped
        }
        if (~~first) {
            return 1;
        }
        return 0;
    }
    if (itm == environment or cretin) {
        ! no code
    } else if (itm hasnt concealed && (inv || itm has visited || (~~itm.initial))) {
        if (itm hasnt scenery) {
            if (first) {
                if (Firster(obj,level) && level < 0) {
                    level = 0;
                }
                ++level;
                first = false;
            }
            if (level < 0) {
                level = 0;
            }
            DescribeOb(itm,v,level);	! not popped
        } else if (child(itm) ~= nothing && CanSeeContents(itm)) {
            ++level;
            PrintCont(itm,v,level);	! not popped
        }
    }
    itm = sibling(itm);
    jump label36539;
];

[ Firster obj level ;	! 36682 / 0x8f4a
    if (obj == trophy_case) {
        "Your collection of treasures consists of:";
    }
    if (obj == player) {
        "You are carrying:";
    }
    if (obj in Room_Holder) rfalse;
    if (level > 0) {
        print (string) Indents-->level;
    }
    if (obj has supporter) {
        "Sitting on the ", (name) obj, " is: ";
    }
    if (obj has animate) {
        "The ", (name) obj, " is holding: ";
    }
    "The ", (name) obj, " contains:";
];

[ CanSeeContents obj ;	! 36804 / 0x8fc4
    if (obj has concealed) rfalse;
    if (obj has transparent || obj has open) rtrue;
    rfalse;
];

[ ScoreUPD val ;	! 36820 / 0x8fd4
    Base_score = Base_score + val;
    score = score + val;
    if (score ~= 350 || Won_flag) rtrue;
    Won_flag = true;
    give ancient_map ~concealed;
    give west_of_house ~visited;
    "An almost inaudible voice whispers in your ear, ~Look to your treasures for the final secret.~";
];

[ ScoreObj obj val ;	! 36908 / 0x902c
    val = obj.take_value;
    if (val <= 0) rfalse;
    ScoreUPD(val);	! not popped
    obj.take_value = 0;
    rtrue;
];

[ LeaveGame ;	! 36934 / 0x9046
    ScoreSub();	! not popped
    @quit;
];

[ Ask ;	! 36942 / 0x904e
    print ">";
    @sread P_inbuf P_lexv;
    if (P_lexv-->1 ~= 'yes' or 'y//') rfalse;
    rtrue;
];

[ ITake vb=true num_items UNUSED weight ;	! 36966 / 0x9066
    if (Dead) {
        if (~~vb) rfalse;
        print "Your hand passes through its object.";
        new_line;
        rfalse;
    }
    if (noun hasnt takeable) {
        if (~~vb) rfalse;
        print (string) ComplexPickOne(Yuks_table);
        new_line;
        rfalse;
    }
    if (Zork2_deletion() || (parent(noun) has container && parent(noun) hasnt open)) rfalse;
    if (parent(noun) notin player) {
        weight = QueryWeight(noun);
        if (weight + QueryWeight(player) > Load_max) {
            if (vb) {
                print "Your load is too heavy";
                if (Load_max < Load_allowed) {
                    print ", especially in light of your condition.";
                } else {
                    print ".";
                }
                new_line;
            }
            return 2;
        }
    }
    if (Verb == ##Take) {
        num_items = CCount(player);
        if (num_items > Maximum_held) {
            weight = num_items * Max_held_mult;
            if (weight > random(100)) {
                print "You're holding too many things already!";
                new_line;
                rfalse;
            }
        }
    }
    move noun to player;
    give noun visited;
    Zork2_deletion();	! not popped
    ScoreObj(noun);	! not popped
    rtrue;
];

[ Idrop ;	! 37192 / 0x9148
    if (noun notin player && parent(noun) notin player) {
        print "You're not carrying the ", (name) noun, ".";
        new_line;
        rfalse;
    }
    if (noun notin player && parent(noun) hasnt open) {
        print "The ", (name) noun, " is closed.";
        new_line;
        rfalse;
    }
    move noun to parent(player);
    rtrue;
];

[ CCount obj cnt x ;	! 37254 / 0x9186
    if ((x = child(obj)) ~= nothing) {
      .label37265;
        if (x hasnt clothing) {
            ++cnt;
        }
        if ((x = sibling(x)) ~= nothing) jump label37265;
    }
    return cnt;
];

[ QueryWeight obj cont wt ;	! 37278 / 0x919e
    if ((cont = child(obj)) ~= nothing) {
      .label37289;
        if (obj == actor && cont has clothing) {
            ++wt;
        } else {
            wt = wt + QueryWeight(cont);
        }
        if ((cont = sibling(cont)) ~= nothing) jump label37289;
    }
    return wt + obj.size;
];

[ HackHack str ;	! 37326 / 0x91ce
    if (noun in global_objects && Verb == ##Lower or ##Raise or ##Wield) {
        "The ", (name) noun, " isn't here!";
    }
    print (string) str, (name) noun, (string) ComplexPickOne(Ho_hum_table);
    new_line;
    rtrue;
];

! References: carpet.name

[ BadVehicle need_vehicle veh ;	! 37368 / 0x91f8
    if (need_vehicle) {
        print "You can't go there in a ", (name) veh, ".";
    } else {
        print "You can't go there without a vehicle.";
    }
    new_line;
    rtrue;
];

[ Goto room v=true lb environment av old_lit ;	! 37416 / 0x9228
    lb = ((room hasnt dry_land) ? false : true);
    environment = parent(player);
    old_lit = Lit;
    if (environment has vehicle) {
        av = environment.vtype;
    }
    if ((~~lb) && (~~av)) {
        BadVehicle(av,environment);	! not popped
        rfalse;
    }
    if ((~~lb) && room hasnt av) {
        BadVehicle(av,environment);	! not popped
        rfalse;
    }
    if (location has dry_land && lb && av && av ~= dry_land && room hasnt av) {
        BadVehicle(av,environment);	! not popped
        rfalse;
    }
    if (room has rmungbit) {
        print (string) room.description;
        new_line;
        rfalse;
    }
    if (lb && location hasnt dry_land && (~~Dead)) {
        print "The ", (name) environment, " comes to a rest on the shore.";
        new_line;
        new_line;
    }
    if (av) {
        move environment to room;
    } else {
        move player to room;
    }
    location = room;
    Lit = QueryLight(location);
    if ((~~old_lit) && (~~Lit) && 80 > random(100)) {
        if (Grue_Repellent) {
            print "There are sinister gurgling noises in the darkness all around you!";
            new_line;
        } else {
            if (Zork2_deletion()) rfalse;
            print "Oh, no! A lurking grue slithered into the ";
            if (parent(player) has vehicle) {
                print (name) parent(player);
            } else {
                print "room";
            }
            JigsUp(" and devoured you!");	! not popped
            rtrue;
        }
    }
    if ((~~Lit) && player == cretin) {
        print "You have moved into a dark place.";
        new_line;
        P_cont = 0;
    }
    location.action(M_ENTER);	! not popped
    ScoreObj(room);	! not popped
    if (location ~= room) rtrue;
    if (cretin ~= player) {
        "The ", (name) player, " leaves the room.";
    }
    if (~~v) rtrue;
    FirstLook();	! not popped
    rtrue;
];

[ GoNext tbl room ;	! 37788 / 0x939c
    room = SearchArray(location,tbl);
    if (~~room) rfalse;
    return Goto(room);
];

[ SearchArray itm tbl cnt len ;	! 37810 / 0x93b2
    len = tbl-->0;
  .label37823;
    if (++cnt > len) rfalse;
    if (tbl-->cnt ~= itm) jump label37823;
    if (cnt == len) rfalse;
    return tbl-->(cnt + 1);
];

[ PlayerToProp dir ;	! 37850 / 0x93da
    P_walk_dir = dir;
    return Perform(##Go,dir);
];

[ WordType obj word addr UNUSED ;	! 37864 / 0x93e8
    addr = obj.&name;
    return ZMemQ(word,addr,get_prop_len(addr) / 2 - 1);
];

[ InRoomContains itm room addr ;	! 37898 / 0x940a
    addr = room.&contains;
    if (~~addr) rfalse;
    return ZMemQB(itm,addr,get_prop_len(addr) - 1);
];

[ FindIn rm attr obj ;	! 37928 / 0x9428
    obj = child(rm);
    if (~~obj) rfalse;
  .label37942;
    if (obj has attr && obj ~= cretin) {
        return obj;
    }
    if ((obj = sibling(obj)) ~= nothing) jump label37942;
    rfalse;
];

[ InRoom obj ;	! 37958 / 0x9446
    if (obj in location) rtrue;
    return InRoomContains(obj,location);
];

[ ThingInPlayer itm ;	! 37974 / 0x9456
  .label37977;
    itm = parent(itm);
    if (~~itm) rfalse;
    if (itm ~= player) jump label37977;
    rtrue;
];

[ OtherSide door prop addr ;	! 37990 / 0x9466
  .label37997;
    prop = get_next_prop(location,prop);
    if (prop < Low_direction) rfalse;
    addr = location.&prop;
    if (get_prop_len(addr) ~= 5 || addr->1 ~= door) jump label37997;
    return prop;
];

[ MungeRoom room str ;	! 38028 / 0x948c
    give room rmungbit;
    room.description = str;
    rtrue;
];

[ SetLastObject it ;	! 38042 / 0x949a
    LastNoun = it;
    LastNounPlace = location;
    rtrue;
];

! References: west_of_house.action

[ WestHouseAction rarg ;	! 38052 / 0x94a4
    if (rarg ~= M_LOOK) rfalse;
    print "You are standing in an open field west of a white house, with a boarded front door.";
    if (Won_flag) {
        print " A secret path leads southwest into the forest.";
    }
    new_line;
    rtrue;
];

! References: east_of_house.action

[ BehindHouseAction rarg ;	! 38140 / 0x94fc
    if (rarg ~= M_LOOK) rfalse;
    print "You are behind the white house. A path leads into the forest to the east. In one corner of the house there is a small window which is ";
    if (kitchen_window has open) {
        print "open.";
    } else {
        print "slightly ajar.";
    }
    new_line;
    rtrue;
];

[ OpenOrClose itm open_msg close_msg ;	! 38242 / 0x9562
    if (Verb == ##Open) {
        if (itm has open) {
            print (string) ComplexPickOne(Dummy_table);
        } else {
            print (string) open_msg;
            give itm open;
        }
        new_line;
        rtrue;
    }
    if (Verb ~= ##Close) rfalse;
    if (itm has open) {
        print (string) close_msg;
        give itm ~open;
    } else {
        print (string) ComplexPickOne(Dummy_table);
    }
    new_line;
    rtrue;
];

! References: board.action

[ BoardAction ;	! 38302 / 0x959e
    if (Verb ~= ##Examine or ##Take) rfalse;
    "The boards are securely fastened.";
];

! References: set_of_teeth.action

[ TeethAction ;	! 38330 / 0x95ba
    if (Verb ~= ##Brush || noun ~= set_of_teeth) rfalse;
    if (second == viscous_material && second in player) {
        return JigsUp("Well, you seem to have been brushing your teeth with some sort of glue. As a result, your mouth gets glued together (with your nose) and you die of respiratory failure.");
    }
    if (~~second) {
        "Dental hygiene is highly recommended, but I'm not sure what you want to brush them with.";
    }
    "A nice idea, but with a ", (name) second, "?";
];

! References: granite_wall.action

[ GraniteAction ;	! 38436 / 0x9624
    if (location == temple) {
        if (Verb ~= ##Find) rfalse;
        "The west wall is solid granite here.";
    }
    if (location == treasure_room) {
        if (Verb ~= ##Find) rfalse;
        "The east wall is solid granite here.";
    }
    if (location == slide_room) {
        if (Verb == ##Read or ##Find) {
            "It only SAYS ~Granite Wall~.";
        }
        "The wall isn't granite.";
    }
    "There is no granite wall here.";
];

! References: songbird.action

[ SongbirdAction ;	! 38556 / 0x969c
    if (Verb == ##Take or ##Find) {
        "The songbird is not here but is probably nearby.";
    }
    if (Verb == ##Listen) {
        "You can't hear the songbird now.";
    }
    if (Verb == ##Follow) {
        "It can't be followed.";
    }
    "You can't see any songbird here.";
];

! References: white_house.action

[ HouseAction ;	! 38646 / 0x96f6
    if (location == kitchen or living_room or attic) {
        if (Verb == ##Find) {
            "Why not find your brains?";
        }
        if (Verb ~= ##WalkAround) rfalse;
        GoNext(In_house);	! not popped
        rtrue;
    }
    if (location ~= east_of_house or west_of_house or north_of_house or south_of_house) {
        if (Verb == ##Find) {
            if (location == clearing2) {
                "It seems to be to the west.";
            }
            "It was here just a minute ago....";
        }
        "You're not at the house.";
    }
    if (Verb == ##Find) {
        "It's right in front of you. Are you blind or something?";
    }
    if (Verb == ##WalkAround) {
        GoNext(House_around);	! not popped
        rtrue;
    }
    if (Verb == ##Examine) {
        "The house is a beautiful colonial house which is painted white. It is clear that the owners must have been extremely wealthy.";
    }
    if (Verb == ##Open or ##EnterObj) {
        if (location == east_of_house) {
            if (kitchen_window has open) {
                return Goto(kitchen);
            }
            print "The window is closed.";
            new_line;
            return SetLastObject(kitchen_window);
        }
        "I can't see how to get in from here.";
    }
    if (Verb ~= ##Burn) rfalse;
    "You must be joking.";
];

! References: forest.action

[ Forest2Action ;	! 38966 / 0x9836
    if (Verb == ##WalkAround) {
        return GoNext(Forest_around);
    }
    if (Verb == ##Disembark) {
        "You will have to specify a direction.";
    }
    if (Verb == ##Find) {
        "You cannot see the forest for the trees.";
    }
    if (Verb ~= ##Listen) rfalse;
    "The pines and the hemlocks seem to be murmuring.";
];

! References: mountain_range.action

[ MountainAction ;	! 39064 / 0x9898
    if (Verb ~= ##ClimbObj or ##ClimbDown or ##ClimbUp) rfalse;
    "Don't you believe me? The mountains are impassable!";
];

! References: quantity_of_water.action, water.action

[ WaterFunction av w pi ;	! 39108 / 0x98c4
    if (Verb == ##Give) rfalse;
    if (Verb == ##EnterObj) {
        print (string) ComplexPickOne(Noswim_table);
        new_line;
        rtrue;
    }
    if (Verb == ##Fill) {
        w = second;
        Verb = ##Insert;
        second = noun;
        noun = w;
        pi = false;
    } else if (noun == water or quantity_of_water) {
        w = noun;
        pi = false;
    } else {
        w = second;
        pi = true;
    }
    if (w == water) {
        w = quantity_of_water;
        if (Verb == ##Insert or ##Take) {
            Remove(w);	! not popped
        }
    }
    if (pi) {
        second = w;
    } else {
        noun = w;
    }
    av = parent(player);
    if (av hasnt vehicle) {
        av = 0;
    }
    if (Verb == ##Insert or ##Take && (~~pi)) {
        if (av && (av == second || ((~~second) && w notin av))) {
            print "There is now a puddle in the bottom of the ", (name) av, ".";
            new_line;
            Remove(noun);	! not popped
            move noun to av;
            rtrue;
        }
        if (second && second ~= glass_bottle) {
            print "The water leaks out of the ", (name) second, " and evaporates immediately.";
            new_line;
            return Remove(w);
        }
        if (glass_bottle in player) {
            if (glass_bottle hasnt open) {
                print "The bottle is closed.";
                new_line;
                return SetLastObject(glass_bottle);
            }
            if (child(glass_bottle) == nothing) {
                move quantity_of_water to glass_bottle;
                "The bottle is now full of water.";
            }
            "The water slips through your fingers.";
        }
        if (noun in glass_bottle && Verb == ##Take && (~~second)) {
            "It's in the bottle. Perhaps you should take that instead.";
        }
        "The water slips through your fingers.";
    }
    if (pi) {
        "Nice try.";
    }
    if (Verb == ##GiveTo or ##Drop) {
        Remove(quantity_of_water);	! not popped
        if (av) {
            print "There is now a puddle in the bottom of the ", (name) av, ".";
            new_line;
            move quantity_of_water to av;
            rtrue;
        }
        print "The water spills to the floor and evaporates immediately.";
        new_line;
        return Remove(quantity_of_water);
    }
    if (Verb ~= ##Throw) rfalse;
    print "The water splashes on the walls and evaporates immediately.";
    new_line;
    return Remove(quantity_of_water);
];

! References: kitchen_window.action

[ KitchenWindowAction ;	! 39618 / 0x9ac2
    if (Verb == ##Close or ##Open) {
        Window_munged = true;
        return OpenOrClose(kitchen_window,"With great effort, you open the window far enough to allow entry.","The window closes (more easily than it opened).");
    }
    if (Verb == ##Examine && (~~Window_munged)) {
        "The window is slightly ajar, but not enough to allow entry.";
    }
    if (Verb == ##EnterObj or ##Board or ##Go) {
        if (location == kitchen) {
            PlayerToProp(e_to);	! not popped
            rtrue;
        }
        PlayerToProp(w_to);	! not popped
        rtrue;
    }
    if (Verb ~= ##LookIn) rfalse;
    print "You can see ";
    if (location == kitchen) {
        "a clear area leading towards a forest.";
    }
    "what appears to be a kitchen.";
];

! References: number_of_ghosts.action

[ GhostAction ;	! 39764 / 0x9b54
    if (Verb == ##TalkTo) {
        print "The spirits jeer loudly and ignore you.";
        new_line;
        P_cont = 0;
        rtrue;
    }
    if (Verb == ##Banish) {
        "Only the ceremony itself has any effect.";
    }
    if (Verb == ##Poke or ##Attack && noun == number_of_ghosts) {
        "How can you attack a spirit with material objects?";
    }
    "You seem unable to interact with these spirits.";
];

! References: basket1.action, basket2.action

[ BasketAction ;	! 39900 / 0x9bdc
    if (Verb == ##Raise) {
        if (Basket_up) {
            print (string) ComplexPickOne(Dummy_table);
            new_line;
            rtrue;
        }
        move basket1 to shaft_room;
        move basket2 to drafty_room;
        Basket_up = true;
        SetLastObject(basket1);	! not popped
        "The basket is raised to the top of the shaft.";
    }
    if (Verb == ##Lower) {
        if (~~Basket_up) {
            print (string) ComplexPickOne(Dummy_table);
            new_line;
            rtrue;
        }
        move basket1 to drafty_room;
        move basket2 to shaft_room;
        SetLastObject(basket2);	! not popped
        print "The basket is lowered to the bottom of the shaft.";
        new_line;
        Basket_up = false;
        if (~~Lit) rtrue;
        Lit = QueryLight(location);
        if (Lit) rtrue;
        print "It is now pitch black.";
        new_line;
        rtrue;
    }
    if (noun == basket2 || second == basket2) {
        "The basket is at the other end of the chain.";
    }
    if (Verb ~= ##Take || noun ~= basket1 or basket2) rfalse;
    "The cage is securely fastened to the iron chain.";
];

! References: bat.action

[ BatAction ;	! 40122 / 0x9cba
    if (Verb == ##TalkTo) {
        FweepFunc(6);	! not popped
        P_cont = 0;
        rtrue;
    }
    if (Verb ~= ##Poke or ##Attack or ##Take) rfalse;
    if (parent(clove_of_garlic) == player or location) {
        "You can't reach him; he's on the ceiling.";
    }
    return BatMovesPlayer();
];

[ BatMovesPlayer ;	! 40186 / 0x9cfa
    FweepFunc(4);	! not popped
    new_line;
    print "The bat grabs you by the scruff of your neck and lifts you away....";
    new_line;
    new_line;
    Goto(ComplexPickOne(coalmine_rooms),false);	! not popped
    rtrue;
];

[ FweepFunc cnt ;	! 40250 / 0x9d3a
  .label40253;
    if (--cnt < 1) {
        ! no code
    } else {
        print "    Fweep!";
        new_line;
        jump label40253;
    }
    new_line;
    rtrue;
];

! References: brass_bell.action

[ BellAction ;	! 40276 / 0x9d54
    if (Verb ~= ##Ring || (location == invalidObj23102 && (~~LLD_flag))) rfalse;
    "Ding, dong.";
];

! References: red_hot_bell.action

[ HotBellAction ;	! 40302 / 0x9d6e
    if (Verb == ##Take) {
        "The bell is very hot and cannot be taken.";
    }
    if (Verb == ##Ring && second) {
        if (second has flammable) {
            print "The ", (name) second, " burns and is consumed.";
            new_line;
            return Remove(second);
        }
        if (second == pair_of_hands) {
            "The bell is too hot to touch.";
        }
        "The heat from the bell is too intense.";
    }
    if (Verb == ##Pour) {
        Remove(noun);	! not popped
        print "The water cools the bell and is evaporated.";
        new_line;
        Queue(CoolBell,0);	! not popped
        return CoolBell();
    }
    if (Verb ~= ##Ring) rfalse;
    "The bell is too hot to reach.";
];

! References: boarded_window.action

[ BoardedWindowAction ;	! 40482 / 0x9e22
    if (Verb == ##Open) {
        "The windows are boarded and can't be opened.";
    }
    if (Verb ~= ##Poke) rfalse;
    "You can't break the windows open.";
];

! References: living_room.pseudo, living_room.pseudo

[ PseudoNailAction ;	! 40536 / 0x9e58
    if (Verb ~= ##Take) rfalse;
    "The nails, deeply imbedded in the door, cannot be removed.";
];

! References: crack.action

[ CrackAction ;	! 40574 / 0x9e7e
    if (Verb ~= ##EnterObj) rfalse;
    "You can't fit through the crack.";
];

! References: kitchen.action

[ KitchenAction rarg ;	! 40592 / 0x9e90
    if (rarg == M_LOOK) {
        print "You are in the kitchen of the white house. A table seems to have been used recently for the preparation of food. A passage leads to the west and a dark staircase can be seen leading upward. A dark chimney leads down and to the east is a small window which is ";
        if (kitchen_window has open) {
            "open.";
        }
        "slightly ajar.";
    }
    if (rarg ~= M_HANDLED) rfalse;
    if (Verb == ##ClimbUp && noun == stairs) {
        return PlayerToProp(u_to);
    }
    if (Verb ~= ##ClimbUp || noun ~= stairs) rfalse;
    "There are no stairs leading down.";
];

! References: stone_barrow.action

[ BarrowAction rarg ;	! 40790 / 0x9f56
    if (rarg ~= M_HANDLED || (Verb ~= ##Enter && (Verb ~= ##Go || noun ~= aragain_falls or ladder_top) && (Verb ~= ##EnterObj || noun ~= stone_barrow_ob))) rfalse;
    print "Inside the Barrow^As you enter the barrow, the door closes inexorably behind you. Around you it is dark, but ahead is an enormous cavern, brightly lit. Through its center runs a wide stream. Spanning the stream is a small wooden footbridge, and beyond a path leads into a dark tunnel. Above the bridge, floating in the air, is a large sign. It reads:  All ye who stand before this bridge have completed a great and perilous adventure which has tested your wit and courage. You have mastered";
    if (~~0->1 & 8) {
        print " the first part of the ZORK trilogy. Those who pass over this bridge must be prepared to undertake an even greater adventure that will severely test your skill and bravery!^^The ZORK trilogy continues with ~ZORK II: The Wizard of Frobozz~ and is completed in ~ZORK III: The Dungeon Master,~ available now at fine stores everywhere.";
        new_line;
    } else {
        print " ZORK: The Great Underground Empire.^";
        new_line;
    }
    return QuitSub(false);
];

! References: stone_door.action

[ BarrowDoorAction ;	! 41376 / 0xa1a0
    if (Verb ~= ##Close or ##Open) rfalse;
    "The door is too heavy.";
];

! References: stone_barrow_ob.action

[ EnterBarrow ;	! 41394 / 0xa1b2
    if (Verb ~= ##EnterObj) rfalse;
    return PlayerToProp(w_to);
];

! References: trophy_case.action

[ TrophyAction ;	! 41406 / 0xa1be
    if (Verb ~= ##Take || noun ~= trophy_case) rfalse;
    "The trophy case is securely fastened to the wall.";
];

! References: living_room.action

[ LivingRoomAction rarg rugflag UNUSED ;	! 41446 / 0xa1e6
    if (rarg == M_LOOK) {
        if (Magic_flag) {
            print "You are in the living room. There is a doorway to the east. To the west is a cyclops-shaped opening in an old wooden door, above which is some strange gothic lettering, ";
        } else {
            print "You are in the living room. There is a doorway to the east, a wooden door with strange gothic lettering to the west, which appears to be nailed shut, ";
        }
        print "a trophy case, ";
        rugflag = Rug_moved;
        if (rugflag && trap_door has open) {
            print "and a rug lying beside an open trap door.";
        } else if (rugflag) {
            print "and a closed trap door at your feet.";
        } else if (trap_door has open) {
            print "and an open trap door at your feet.";
        } else {
            print "and a large oriental rug in the center of the room.";
        }
        new_line;
        rtrue;
    }
    if (rarg ~= M_BEFORE || (Verb ~= ##Take && (Verb ~= ##Insert || second ~= trophy_case))) rfalse;
    if (noun in trophy_case) {
        RecurseTouch(noun);	! not popped
    }
    score = Base_score + TrophyValue();
    ScoreUPD(0);	! not popped
    rfalse;
];

[ RecurseTouch cont obj ;	! 41810 / 0xa352
    obj = child(cont);
  .label41819;
    if (~~obj) rtrue;
    give obj visited;
    if (child(obj) ~= nothing) {
        RecurseTouch(obj);	! not popped
    }
    obj = sibling(obj);
    jump label41819;
];

[ TrophyValue case=trophy_case obj tscore ;	! 41842 / 0xa372
    obj = child(case);
  .label41853;
    if (~~obj) {
        return tscore;
    }
    tscore = tscore + obj.trophy_value;
    if (child(obj) ~= nothing) {
        TrophyValue(obj);	! not popped
    }
    obj = sibling(obj);
    jump label41853;
];

! References: trap_door.action

[ TrapdoorAction ;	! 41884 / 0xa39c
    if (Verb == ##Raise) {
        Perform(##Open,trap_door);	! not popped
        rtrue;
    }
    if (Verb == ##Close or ##Open && location == living_room) {
        return OpenOrClose(noun,"The door reluctantly opens to reveal a rickety staircase descending into darkness.","The door swings shut and closes.");
    }
    if (Verb == ##LookUnder && location == living_room) {
        if (trap_door has open) {
            "You see a rickety staircase descending into darkness.";
        }
        "It's closed.";
    }
    if (location ~= cellar) rfalse;
    if (Verb == ##Unlock or ##Open && trap_door hasnt open) {
        "The door is locked from above.";
    }
    if (Verb == ##Close && trap_door hasnt open) {
        give trap_door ~visited;
        give trap_door ~open;
        "The door closes and locks.";
    }
    if (Verb ~= ##Close or ##Open) rfalse;
    print (string) ComplexPickOne(Dummy_table);
    new_line;
    rtrue;
];

! References: cellar.action

[ CellarAction rarg ;	! 42040 / 0xa438
    if (rarg == M_LOOK) {
        "You are in a dark and damp cellar with a narrow passageway leading north, and a crawlway to the south. On the west is the bottom of a steep metal ramp which is unclimbable.";
    }
    if (rarg ~= M_ENTER || trap_door hasnt open || trap_door has visited) rfalse;
    give trap_door ~open;
    give trap_door visited;
    print "The trap door crashes shut, and you hear someone barring it.";
    new_line;
    new_line;
    rtrue;
];

! References: chimney.action

[ ChimneyAction ;	! 42198 / 0xa4d6
    if (Verb ~= ##Examine) rfalse;
    print "The chimney leads ";
    if (location == kitchen) {
        print "down";
    } else {
        print "up";
    }
    "ward, and looks climbable.";
];

! References: studio.u_to

[ UpChimneyAction obj ;	! 42250 / 0xa50a
    if ((obj = child(player)) == nothing) { ; obj = item or null
        print "Going up empty-handed is a bad idea.";
        new_line;
        rfalse;
    }
    ; next obj can be item or null         ; this must be null - and out of the 1 or 2 items
                                           ; we have, one must be the lanterns
    if ((obj = sibling(obj)) == nothing || sibling(obj) == nothing && brass_lantern in player) {
        if (trap_door hasnt open) {
            give trap_door ~visited;
            return kitchen;
        }
        return kitchen;
    }
    print "You can't get up there with what you're carrying.";
    new_line;
    rfalse;
];

! References: living_room.d_to

[ TrapDoorDown ;	! 42338 / 0xa562
    if (Rug_moved) {
        if (trap_door has open) {
            return cellar;
        }
        print "The trap door is closed.";
        new_line;
        SetLastObject(trap_door);	! not popped
        rfalse;
    }
    print "You can't go that way.";
    new_line;
    rfalse;
];

! References: carpet.action

[ RugAction ;	! 42380 / 0xa58c
    if (Verb == ##Raise) {
        if (Rug_moved) {
            "The rug is too heavy to lift.";
        }
        "The rug is too heavy to lift, but in trying to take it you have noticed an irregularity beneath it.";
    }
    if (Verb == ##Push or ##Move) {
        if (Rug_moved) {
            "Having moved the carpet previously, you find it impossible to move it again.";
        }
        print "With a great effort, the rug is moved to one side of the room. With the rug moved, the dusty cover of a closed trap door appears.";
        new_line;
        give trap_door ~concealed;
        SetLastObject(trap_door);	! not popped
        Rug_moved = true;
        rtrue;
    }
    if (Verb == ##Take) {
        "The rug is extremely heavy and cannot be carried.";
    }
    if (Verb == ##LookUnder && (~~Rug_moved) && trap_door hasnt open) {
        "Underneath the rug is a closed trap door. As you drop the corner of the rug, the trap door is once again concealed from view.";
    }
    if (Verb ~= ##ClimbOn) rfalse;
    if ((~~Rug_moved) && trap_door hasnt open) {
        "You sit down. The rug seems to have an irregularity underneath it.";
    }
    "I suppose you think it's a magic carpet?";
];

! References: bloody_axe.action

[ AxeAction ;	! 42792 / 0xa728
    if (Troll_flag) rfalse;
    return TryTakeWeapon(bloody_axe,troll);
];

! References: stiletto.action

[ StilettoAction ;	! 42804 / 0xa734
    return TryTakeWeapon(stiletto,thief);
];

[ TryTakeWeapon obj villain ;	! 42814 / 0xa73e
    if (villain notin location || Verb ~= ##Take) rfalse;
    if (obj in villain) {
        "The ", (name) villain, " swings it out of your reach.";
    }
    print "The ", (name) obj, " seems white-hot. You can't hold on to it.";
    new_line;
    rtrue;
];

! References: troll.action

[ TrollAction rarg ;	! 42884 / 0xa784
    if (Verb == ##TalkTo) {
        print "The troll isn't much of a conversationalist.";
        new_line;
        P_cont = 0;
        rtrue;
    }
    if (rarg == M_HANDLED) {
        if (bloody_axe in troll) rfalse;
        if (bloody_axe in location && Probability(75)) {
            give bloody_axe scenery;
            give bloody_axe ~weapon;
            move bloody_axe to troll;
            troll.description = "A nasty-looking troll, brandishing a bloody axe, blocks all passages out of the room.";
            if (troll notin location) rtrue;
            "The troll, angered and humiliated, recovers his weapon. He appears to have an axe to grind with you.";
        }
        if (troll notin location) rfalse;
        troll.description = "A pathetically babbling troll is here.";
        print "The troll, disarmed, cowers in terror, pleading for his life in the guttural tongue of the trolls.";
        new_line;
        rtrue;
    }
    if (rarg == M_ENTER) {
        if (bloody_axe in troll) {
            move bloody_axe to location;
            give bloody_axe ~scenery;
            give bloody_axe weapon;
        }
        Troll_flag = true;
        rtrue;
    }
    if (rarg == M_LOOK) {
        give troll ~fightbit;
        if (bloody_axe in troll) {
            move bloody_axe to location;
            give bloody_axe ~scenery;
            give bloody_axe weapon;
        }
        troll.description = "An unconscious troll is sprawled on the floor. All passages out of the room are open.";
        Troll_flag = true;
        rtrue;
    }
    if (rarg == M_WAKE) {
        if (troll in location) {
            give troll fightbit;
            print "The troll stirs, quickly resuming a fighting stance.";
            new_line;
        }
        if (bloody_axe in troll) {
            troll.description = "A nasty-looking troll, brandishing a bloody axe, blocks all passages out of the room.";
        } else if (bloody_axe in the_troll_room) {
            give bloody_axe scenery;
            give bloody_axe ~weapon;
            move bloody_axe to troll;
            troll.description = "A nasty-looking troll, brandishing a bloody axe, blocks all passages out of the room.";
        } else {
            troll.description = "A troll is here.";
        }
        Troll_flag = false;
        rtrue;
    }
    if (rarg == M_FIGHT) {
        if (33 <= random(100)) rfalse;
        give troll fightbit;
        P_cont = 0;
        rtrue;
    }
    if (rarg) rfalse;
    if (Verb == ##Examine) {
        print (string) troll.description;
        new_line;
        rtrue;
    }
    if (Verb == ##GiveTo or ##Throw && noun && second == troll || Verb == ##Poke or ##Move or ##Take) {
        CheckStrength(troll);	! not popped
        if (Verb == ##GiveTo or ##Throw) {
            if (noun == bloody_axe && bloody_axe in player) {
                print "The troll scratches his head in confusion, then takes the axe.";
                new_line;
                give troll fightbit;
                move bloody_axe to troll;
                rtrue;
            }
            if (noun == troll or bloody_axe) {
                "You would have to get the ", (name) noun, " first, and that seems unlikely.";
            }
            if (Verb == ##Throw) {
                print "The troll, who is remarkably coordinated, catches the ", (name) noun;
            } else {
                print "The troll, who is not overly proud, graciously accepts the gift";
            }
            if (20 > random(100) && noun == nasty_knife or sword or bloody_axe) {
                Remove(noun);	! not popped
                print " and eats it hungrily. Poor troll, he dies from an internal hemorrhage and his carcass disappears in a sinister black fog.";
                new_line;
                Remove(troll);	! not popped
                troll.action(M_ENTER);	! not popped
                Troll_flag = true;
                rtrue;
            }
            if (noun == nasty_knife or sword or bloody_axe) {
                move noun to location;
                print " and, being for the moment sated, throws it back. Fortunately, the troll has poor control, and the ", (name) noun, " falls to the floor. He does not look pleased.";
                new_line;
                give troll fightbit;
                rtrue;
            }
            print " and not having the most discriminating tastes, gleefully eats it.";
            new_line;
            return Remove(noun);
        }
        if (Verb == ##Move or ##Take) {
            "The troll spits in your face, grunting ~Better luck next time~ in a rather barbarous accent.";
        }
        if (Verb ~= ##Poke) rfalse;
        "The troll laughs at your puny gesture.";
    }
    if (Verb == ##Listen) {
        "Every so often the troll says something, probably uncomplimentary, in his guttural tongue.";
    }
    if ((~~Troll_flag) || Verb ~= ##Hello) rfalse;
    "Unfortunately, the troll can't hear you.";
];

[ RevealGrating ;	! 43908 / 0xab84
    if (grating has open || Leaves_moved) rfalse;
    if (Verb == ##Take or ##Move) {
        print "In disturbing the pile of leaves, a grating is revealed.";
        new_line;
    } else {
        print "With the leaves moved, a grating is revealed.";
        new_line;
    }
    give grating ~concealed;
    Leaves_moved = true;
    rfalse;
];

! References: pile_of_leaves.action

[ LeavesAction ;	! 43994 / 0xabda
    if (Verb == ##Count) {
        "There are 69,105 leaves here.";
    }
    if (Verb == ##Burn) {
        RevealGrating();	! not popped
        Remove(noun);	! not popped
        if (noun in location) {
            "The leaves burn.";
        }
        return JigsUp("The leaves burn, and so do you.");
    }
    if (Verb == ##Cut) {
        print "You rustle the leaves around, making quite a mess.";
        new_line;
        RevealGrating();	! not popped
        rtrue;
    }
    if (Verb == ##Take or ##Move) {
        if (Verb == ##Move) {
            print "Done.";
            new_line;
        }
        if (Leaves_moved) rfalse;
        RevealGrating();	! not popped
        if (Verb ~= ##Take) rtrue;
        rfalse;
    }
    if (Verb ~= ##LookUnder || Leaves_moved) rfalse;
    "Underneath the pile of leaves is a grating. As you release the leaves, the grating is once again concealed from view.";
];

! References: clearing1.action

[ Clearing1Action rarg ;	! 44208 / 0xacb0
    if (rarg == M_ENTER) {
        if (Leaves_moved) rfalse;
        give grating concealed;
        rtrue;
    }
    if (rarg ~= M_LOOK) rfalse;
    print "You are in a clearing, with a forest surrounding you on all sides. A path leads south.";
    if (grating has open) {
        new_line;
        print "There is an open grating, descending into darkness.";
    } else if (Leaves_moved) {
        new_line;
        print "There is a grating securely fastened into the ground.";
    }
    new_line;
    rtrue;
];

! References: grating_room.action

[ GratingRoomAction rarg ;	! 44350 / 0xad3e
    if (rarg == M_ENTER) {
        give grating ~concealed;
        rtrue;
    }
    if (rarg ~= M_LOOK) rfalse;
    print "You are in a small room near the maze. There are twisty passages in the immediate vicinity.";
    new_line;
    if (grating has open) {
        print "Above you is an open grating with sunlight pouring in.";
    } else if (Grate_unlocked) {
        print "Above you is a grating.";
    } else {
        print "Above you is a grating locked with a skull-and-crossbones lock.";
    }
    new_line;
    rtrue;
];

! References: grating.action

[ GratingAction ;	! 44512 / 0xade0
    if (Verb == ##Open && second == skeleton_key) {
        Perform(##Unlock,grating,skeleton_key);	! not popped
        rtrue;
    }
    if (Verb == ##Lock) {
        if (location == grating_room) {
            Grate_unlocked = false;
            "The grate is locked.";
        }
        if (location ~= clearing1) rfalse;
        "You can't lock it from this side.";
    }
    if (Verb == ##Unlock && noun == grating) {
        if (location == grating_room && second == skeleton_key) {
            Grate_unlocked = true;
            "The grate is unlocked.";
        }
        if (location == clearing1 && second == skeleton_key) {
            "You can't reach the lock from here.";
        }
        "Can you unlock a grating with a ", (name) second, "?";
    }
    if (Verb == ##Pick) {
        "You can't pick the lock.";
    }
    if (Verb == ##Close or ##Open) {
        if (Grate_unlocked) {
            OpenOrClose(grating,((location == clearing2) ? "The grating opens." : "The grating opens to reveal trees above you."),"The grating is closed.");	! not popped
            if (grating has open) {
                if (location ~= clearing2 && (~~Leaves_moved)) {
                    print "A pile of leaves falls onto your head and to the ground.";
                    new_line;
                    Leaves_moved = true;
                    move pile_of_leaves to location;
                }
                give grating_room light;
                rtrue;
            }
            give grating_room ~light;
            rtrue;
        }
        "The grating is locked.";
    }
    if (Verb ~= ##Insert || second ~= grating) rfalse;
    if (noun.size > 20) {
        "It won't fit through the grating.";
    }
    move noun to grating_room;
    "The ", (name) noun, " goes through the grating into the darkness below.";
];

! References: maze12.d_to, maze15.d_to, maze7.d_to, maze4.d_to

[ DownMazeAction ;	! 44838 / 0xaf26
    print "You won't be able to get back up to the tunnel you are going through when it gets to the next room.";
    new_line;
    new_line;
    if (location == maze4) {
        return maze2;
    }
    if (location == maze7) {
        return maze19;
    }
    if (location == maze15) {
        return maze13;
    }
    if (location ~= maze12) rfalse;
    return maze5;
];

! References: rusty_knife.action

[ RustyKnifeAction ;	! 44916 / 0xaf74
    if (Verb == ##Take) {
        if (sword notin player) rfalse;
        print "As you pick up the rusty knife, your sword gives a single pulse of blinding blue light.";
        new_line;
        rfalse;
    }
    if (second ~= rusty_knife || Verb ~= ##Attack && (Verb ~= ##Swing || noun ~= rusty_knife || (~~second))) rfalse;
    Remove(rusty_knife);	! not popped
    return JigsUp("As the knife approaches its victim, your mind is submerged by an overmastering will. Slowly, your hand turns, until the rusty blade is an inch from your neck. The knife seems to sing as it savagely slits your throat.");
];

! References: nasty_knife.action

[ NastyKnifeAction ;	! 45016 / 0xafd8
    if (Verb ~= ##Take) rfalse;
    give table ~scenery;
    rfalse;
];

! References: skeleton.action

[ SkeletonAction ;	! 45026 / 0xafe2
    if (Verb ~= ##Move or ##Touch or ##Take or ##Lower or ##Raise or ##Push or ##Kiss or ##Kick or ##Attack) rfalse;
    print "A ghost appears in the room and is appalled at your having desecrated the remains of a fellow adventurer. He casts a curse on your valuables and banishes them to the Land of the Living Dead. The ghost leaves, muttering obscenities.";
    new_line;
    Rob(location,land_of_the_dead,100);	! not popped
    Rob(cretin,land_of_the_dead);	! not popped
    rtrue;
];

! References: torch.action

[ TorchAction ;	! 45200 / 0xb090
    if (Verb == ##Examine) {
        "The torch is burning.";
    }
    if (Verb == ##Pour && second == torch) {
        "The water evaporates before it gets close.";
    }
    if (Verb ~= ##SwitchOff || noun hasnt light) rfalse;
    "You nearly burn your hand trying to extinguish the flame.";
];

! References: mirror_room1.action, mirror_room2.action

[ MirrorRoomAction rarg ;	! 45292 / 0xb0ec
    if (rarg ~= M_LOOK) rfalse;
    print "You are in a large square room with tall ceilings. On the south wall is an enormous mirror which fills the entire wall. There are exits on the other three sides of the room.";
    new_line;
    if (~~Mirror_broken) rfalse;
    "Unfortunately, the mirror has been destroyed by your recklessness.";
];

! References: mirror1.action, mirror2.action

[ MirrorAction opposite_room=mirror_room2 item_here item_there nextitem ;	! 45424 / 0xb170
    if ((~~Mirror_broken) && Verb == ##Touch) {
        if (second && second ~= pair_of_hands) {
            "You feel a faint tingling transmitted through the ", (name) second, ".";
        }
        if (location == opposite_room) {
            opposite_room = mirror_room1;
        }
        item_here = child(location);
        item_there = child(opposite_room);
      .label45498;
        if (~~item_here) {
            ! no code
        } else {
            nextitem = sibling(item_here);
            move item_here to opposite_room;
            item_here = nextitem;
            jump label45498;
        }
      .label45517;
        if (~~item_there) {
            ! no code
        } else {
            nextitem = sibling(item_there);
            move item_there to location;
            item_there = nextitem;
            jump label45517;
        }
        Goto(opposite_room,false);	! not popped
        "There is a rumble from deep within the earth and the room shakes.";
    }
    if (Verb == ##Examine or ##LookIn) {
        if (Mirror_broken) {
            print "The mirror is broken into many pieces.";
        } else {
            print "There is an ugly person staring back at you.";
        }
        new_line;
        rtrue;
    }
    if (Verb == ##Take) {
        "You would herniate yourself if you did.";
    }
    if (Verb ~= ##Attack or ##Throw or ##Poke) rfalse;
    if (Mirror_broken) {
        "Haven't you done enough damage already?";
    }
    Mirror_broken = true;
    Lucky = false;
    "You have broken the mirror. I hope you have a seven years' supply of good luck handy.";
];

! References: torch_room.action

[ TorchRoomAction rarg ;	! 45766 / 0xb2c6
    if (rarg ~= M_LOOK) rfalse;
    print "This is a large room with a prominent doorway leading to a down staircase. Above you is a large dome. Up around the edge of the dome (20 feet up) is a wooden railing. In the center of the room sits a white marble pedestal.";
    new_line;
    if (~~Dome_flag) rfalse;
    "A piece of rope descends from the railing above, ending some five feet above your head.";
];

! References: dome_room.action

[ DomeRoomAction rarg ;	! 45962 / 0xb38a
    if (rarg == M_LOOK) {
        print "You are at the periphery of a large dome, which forms the ceiling of another room below. Protecting you from a precipitous drop is a wooden railing which circles the dome.";
        new_line;
        if (~~Dome_flag) rfalse;
        "Hanging down from the railing is a rope which ends about ten feet from the floor below.";
    }
    if (rarg ~= M_ENTER) rfalse;
    if (Dead) {
        print "As you enter the dome you feel a strong pull as if from a wind drawing you over the railing and down.";
        new_line;
        move player to torch_room;
        location = torch_room;
        rtrue;
    }
    if (Verb ~= ##Dive) rfalse;
    return JigsUp("I'm afraid that the leap you attempted has done you in.");
];

! References: entrance_to_hades.action

[ HadesAction rarg ;	! 46204 / 0xb47c
    if (rarg == M_LOOK) {
        print "You are outside a large gateway, on which is inscribed^^  Abandon every hope all ye who enter here!^^The gate is open; through it you can see a desolation, with a pile of mangled bodies in one corner. Thousands of voices, lamenting some hideous fate, can be heard.";
        new_line;
        if (LLD_flag || Dead) rfalse;
        "The way through the gate is barred by evil spirits, who jeer at your attempts to pass.";
    }
    if (rarg == M_HANDLED) {
        if (Verb == ##Banish) {
            if (LLD_flag) rfalse;
            if (brass_bell in player && black_book in player && pair_of_candles in player) {
                "You must perform the ceremony.";
            }
            "You aren't equipped for an exorcism.";
        }
        if ((~~LLD_flag) && Verb == ##Ring && noun == brass_bell) {
            Exorcism_bell = true;
            Remove(brass_bell);	! not popped
            SetLastObject(red_hot_bell);	! not popped
            move red_hot_bell to location;
            print "The bell suddenly becomes red hot and falls to the ground. The wraiths, as if paralyzed, stop their jeering and slowly turn to face you. On their ashen faces, the expression of a long-forgotten terror takes shape.";
            new_line;
            if (pair_of_candles in player) {
                print "In your confusion, the candles drop to the ground (and they are out).";
                new_line;
                move pair_of_candles to location;
                give pair_of_candles ~light;
                QueueInterrupt(CandleDaemon)-->0 = false;
            }
            Queue(ExorcismDaemon,6)-->0 = true;
            Queue(CoolBell,20)-->0 = true;
            rtrue;
        }
        if ((~~Exorcism_candle) || Verb ~= ##Read || noun ~= black_book || LLD_flag) rfalse;
        print "Each word of the prayer reverberates through the hall in a deafening confusion. As the last word fades, a voice, loud and commanding, speaks: ~Begone, fiends!~ A heart-stopping scream fills the cavern, and the spirits, sensing a greater power, flee through the walls.";
        new_line;
        Remove(number_of_ghosts);	! not popped
        LLD_flag = true;
        QueueInterrupt(Exorcism2Daemon)-->0 = false;
        rtrue;
    }
    if (rarg ~= M_BEFORE || (~~Exorcism_bell) || pair_of_candles notin player || pair_of_candles hasnt light || Exorcism_candle) rfalse;
    Exorcism_candle = true;
    print "The flames flicker wildly and appear to dance. The earth beneath your feet trembles, and your legs nearly buckle beneath you. The spirits cower at your unearthly power.";
    new_line;
    QueueInterrupt(ExorcismDaemon)-->0 = false;
    Queue(Exorcism2Daemon,3)-->0 = true;
    rtrue;
];

[ ExorcismDaemon ;	! 47098 / 0xb7fa
    if ((~~Exorcism_candle) && location == entrance_to_hades) {
        print "The tension of this ceremony is broken, and the wraiths, amused but shaken at your clumsy attempt, resume their hideous jeering.";
        new_line;
    }
    Exorcism_bell = false;
    rtrue;
];

[ Exorcism2Daemon ;	! 47190 / 0xb856
    Exorcism_candle = false;
    return ExorcismDaemon();
];

[ CoolBell ;	! 47200 / 0xb860
    Remove(red_hot_bell);	! not popped
    move brass_bell to entrance_to_hades;
    if (location ~= entrance_to_hades) rfalse;
    "The bell appears to have cooled down.";
];

! References: dam.action

[ DamAction rarg ;	! 47234 / 0xb882
    if (rarg ~= M_LOOK) rfalse;
    print "You are standing on the top of the Flood Control Dam #3, which was quite a tourist attraction in times far distant. There are paths to the north, south, and west, and a scramble down.";
    new_line;
    if (Low_tide && Dam_open) {
        print "The water level behind the dam is low:  The sluice gates have been opened. Water rushes through the dam and downstream.";
        new_line;
    } else if (Dam_open) {
        print "The sluice gates are open, and water rushes through the dam. The water level behind the dam is still high.";
        new_line;
    } else if (Low_tide) {
        print "The sluice gates are closed. The water level in the reservoir is quite low, but the level is rising quickly.";
        new_line;
    } else {
        print "The sluice gates on the dam are closed. Behind the dam, there can be seen a wide reservoir. Water is pouring over the top of the now abandoned dam.";
        new_line;
    }
    print "There is a control panel here, on which a large metal bolt is mounted. Directly above the bolt is a small green plastic bubble";
    if (Gate_flag) {
        print " which is glowing serenely";
    }
    ".";
];

! References: bolt.action

[ BoltAction ;	! 47724 / 0xba6c
    if (Verb == ##MoveWith) {
        if (second == wrench) {
            if (Gate_flag) {
                give reservoir_south ~visited;
                if (Dam_open) {
                    Dam_open = false;
                    give loud_room ~visited;
                    print "The sluice gates close and water starts to collect behind the dam.";
                    new_line;
                    Queue(RisingWaterDaemon,8)-->0 = true;
                    Queue(LowerWaterDaemon,0);	! not popped
                    rtrue;
                }
                Dam_open = true;
                print "The sluice gates open and water pours through the dam.";
                new_line;
                Queue(LowerWaterDaemon,8)-->0 = true;
                Queue(RisingWaterDaemon,0);	! not popped
                rtrue;
            }
            "The bolt won't turn with your best effort.";
        }
        "The bolt won't turn using the ", (name) second, ".";
    }
    if (Verb == ##Take) {
        return IntegralMsg();
    }
    if (Verb ~= ##Grease) rfalse;
    "Hmm. It appears the tube contained glue, not oil. Turning the bolt won't get any easier....";
];

! References: green_bubble.action

[ BubbleAction ;	! 47982 / 0xbb6e
    if (Verb ~= ##Take) rfalse;
    return IntegralMsg();
];

[ IntegralMsg ;	! 47994 / 0xbb7a
    "It is an integral part of the control panel.";
];

[ RisingWaterDaemon ;	! 48022 / 0xbb96
    give reservoir water_room;
    give reservoir ~dry_land;
    give deep_canyon ~visited;
    give loud_room ~visited;
    if (trunk_of_jewels in reservoir) {
        give trunk_of_jewels concealed;
    }
    Low_tide = false;
    if (location == reservoir) {
        if (parent(player) has vehicle) {
            "The boat lifts gently out of the mud and is now floating on the reservoir.";
        }
        JigsUp("You are lifted up by the rising river! You try to swim, but the currents are too strong. You come closer, closer to the awesome structure of Flood Control Dam #3. The dam beckons to you. The roar of the water nearly deafens you, but you remain conscious as you tumble over the dam toward your certain doom among the rocks at its base.");	! not popped
        rtrue;
    }
    if (location == deep_canyon) {
        "A sound, like that of flowing water, starts to come from below.";
    }
    if (location == loud_room) {
        print "All of a sudden, an alarmingly loud roaring sound fills the room. Filled with fear, you scramble away.";
        new_line;
        Goto(ComplexPickOne(Near_loudroom));	! not popped
        rtrue;
    }
    if (location ~= reservoir_north or reservoir_south) rtrue;
    "You notice that the water level has risen to the point that it is impossible to cross.";
];

[ LowerWaterDaemon ;	! 48278 / 0xbc96
    give reservoir dry_land;
    give reservoir ~water_room;
    give deep_canyon ~visited;
    give loud_room ~visited;
    give trunk_of_jewels ~concealed;
    Low_tide = true;
    if (location == reservoir && parent(player) has vehicle) {
        "The water level has dropped to the point at which the boat can no longer stay afloat. It sinks into the mud.";
    }
    if (location == deep_canyon) {
        "The roar of rushing water is quieter now.";
    }
    if (location ~= reservoir_north or reservoir_south) rtrue;
    "You notice that the water level is quite low here, and that you might be able to cross over to the other side.";
];

! References: blue_button.action, red_button.action, brown_button.action, yellow_button.action

[ ButtonAction ;	! 48452 / 0xbd44
    if (Verb == ##Read) {
        "You think I can read EBCDIC??!?";
    }
    if (Verb ~= ##Push) rfalse;
    if (noun == blue_button) {
        if (~~Leak_sprung) {
            give leak ~concealed;
            print "There is a rumbling sound and a stream of water appears to burst from the east wall of the room (apparently, a leak has occurred in a pipe).";
            new_line;
            Leak_sprung = 1;
            Queue(LeakDaemon,65535)-->0 = true;
            rtrue;
        }
        "The blue button appears to be jammed.";
    }
    if (noun == red_button) {
        if (location has light) {
            give location ~light;
            "The lights within the room shut off.";
        }
        give location light;
        "The lights within the room come on.";
    }
    if (noun == brown_button) {
        give dam ~visited;
        Gate_flag = false;
        "Click.";
    }
    if (noun ~= yellow_button) rfalse;
    give dam ~visited;
    Gate_flag = true;
    "Click.";
];

! References: tool_chests.action

[ ChestAction ;	! 48696 / 0xbe38
    if (Verb == ##Examine) {
        "The chests are all empty.";
    }
    if (Verb == ##Open or ##Take) {
        Remove(tool_chests);	! not popped
        "The chests are so rusty and corroded that they crumble when you touch them.";
    }
    if (Verb ~= ##Open) rfalse;
    "The chests are already open.";
];

[ LeakDaemon in_danger ;	! 48794 / 0xbe9a
    in_danger = ((location ~= maintenance_room) ? false : true);
    if (in_danger) {
        print "The water level here is now ", (string) LeakLevel-->(Leak_sprung / 2);
        new_line;
    }
    ++Leak_sprung;
    if (Leak_sprung >= 14) {
        MungeRoom(maintenance_room,"The room is full of water and cannot be entered.");	! not popped
        Queue(LeakDaemon,0);	! not popped
        if (~~in_danger) rfalse;
        return JigsUp("I'm afraid you have done drowned yourself.");
    }
    if (player notin magic_boat) rfalse;
    return JigsUp("The rising water lifts the boat and carries it through the door, past the lobby, and over the falls. Tsk, tsk.");
];

! References: leak.action

[ LeakAction ;	! 48884 / 0xbef4
    if (Leak_sprung <= 0) rfalse;
    if (Verb == ##PutOn or ##Insert && noun == viscous_material) {
        return FixLeak();
    }
    if (Verb ~= ##Fix) rfalse;
    if (second == viscous_material) {
        return FixLeak();
    }
    return WithTell(second);
];

[ FixLeak ;	! 48926 / 0xbf1e
    Leak_sprung = 65535;
    Queue(LeakDaemon,0);	! not popped
    "By some miracle of Zorkian technology, you have managed to stop the leak in the dam.";
];

! References: viscous_material.action

[ GlueAction ;	! 48992 / 0xbf60
    if (Verb ~= ##Grease || second ~= viscous_material && (Verb ~= ##Insert || noun ~= viscous_material)) rfalse;
    "The all-purpose gunk isn't a lubricant.";
];

! References: tube.action

[ TubeAction ;	! 49038 / 0xbf8e
    if (Verb == ##Insert && second == tube) {
        "The tube refuses to accept anything.";
    }
    if (Verb ~= ##Squeeze) rfalse;
    if (noun has open && viscous_material in noun) {
        move viscous_material to player;
        "The viscous material oozes into your hand.";
    }
    if (noun has open) {
        "The tube is apparently empty.";
    }
    "The tube is closed.";
];

! References: dam_scenery.action

[ DamSceneryAction ;	! 49142 / 0xbff6
    if (Verb == ##Close or ##Open) {
        "Sounds reasonable, but this isn't how.";
    }
    if (Verb ~= ##Fix) rfalse;
    if (second == pair_of_hands) {
        "Are you the little Dutch boy, then? Sorry, this is a big dam.";
    }
    "With a ", (name) second, "? Do you know how big this dam is? You could only stop a tiny leak with that.";
];

[ WithTell obj ;	! 49280 / 0xc080
    "With a ", (name) obj, "?";
];

! References: reservoir_south.action

[ ReservoirSAction rarg ;	! 49296 / 0xc090
    if (rarg ~= M_LOOK) rfalse;
    if (Low_tide && Dam_open) {
        print "You are in a long room, to the north of which was formerly a lake. However, with the water level lowered, there is merely a wide stream running through the center of the room.";
    } else if (Dam_open) {
        print "You are in a long room. To the north is a large lake, too deep to cross. You notice, however, that the water level appears to be dropping at a rapid rate. Before long, it might be possible to cross to the other side from here.";
    } else if (Low_tide) {
        print "You are in a long room, to the north of which is a wide area which was formerly a reservoir, but now is merely a stream. You notice, however, that the level of the stream is rising quickly and that before long it will be impossible to cross here.";
    } else {
        print "You are in a long room on the south shore of a large lake, far too deep and wide for crossing.";
    }
    new_line;
    "There is a path along the stream to the east or west, a steep pathway climbing southwest along the edge of a chasm, and a path leading into a canyon to the southeast.";
];

! References: reservoir.action

[ ReservoirAction rarg ;	! 49790 / 0xc27e
    if (rarg == M_BEFORE && parent(player) hasnt vehicle && ((~~Dam_open) && Low_tide)) {
        "You notice that the water level here is rising rapidly. The currents are also becoming stronger. Staying here seems quite perilous!";
    }
    if (rarg ~= M_LOOK) rfalse;
    if (Low_tide) {
        print "You are on what used to be a large lake, but which is now a large mud pile. There are ~shores~ to the north and south.";
    } else {
        print "You are on the lake. Beaches can be seen north and south. Upstream a small stream enters the lake through a narrow cleft in the rocks. The dam can be seen downstream.";
    }
    new_line;
    rtrue;
];

! References: reservoir_north.action

[ ReservoirNAction rarg ;	! 50044 / 0xc37c
    if (rarg ~= M_LOOK) rfalse;
    if (Low_tide && Dam_open) {
        print "You are in a large cavernous room, the south of which was formerly a lake. However, with the water level lowered, there is merely a wide stream running through there.";
    } else if (Dam_open) {
        print "You are in a large cavernous area. To the south is a wide lake, whose water level appears to be falling rapidly.";
    } else if (Low_tide) {
        print "You are in a cavernous area, to the south of which is a very wide stream. The level of the stream is rising rapidly, and it appears that before long it will be impossible to cross to the other side.";
    } else {
        print "You are in a large cavernous room, north of a large lake.";
    }
    new_line;
    "There is a slimy stairway leaving the room to the north.";
];

! References: glass_bottle.action

[ BottleAction filled ;	! 50366 / 0xc4be
    if (Verb == ##Throw) {
        Remove(noun);	! not popped
        filled = true;
        print "The bottle hits the far wall and shatters.";
        new_line;
    } else if (Verb == ##Poke) {
        filled = true;
        Remove(noun);	! not popped
        print "A brilliant maneuver destroys the bottle.";
        new_line;
    } else if (Verb == ##Shake && noun has open && quantity_of_water in noun) {
        filled = true;
    }
    if (filled && quantity_of_water in noun) {
        print "The water spills to the floor and evaporates.";
        new_line;
        Remove(quantity_of_water);	! not popped
        rtrue;
    }
    if (~~filled) rfalse;
    rtrue;
];

! References: cyclops.action

[ CyclopsAction wrath ;	! 50516 / 0xc554
    wrath = Cyclowrath;
    if (player == cyclops) {
        if (Cyclops_flag) {
            "No use talking to him. He's fast asleep.";
        }
        if (Verb == ##Odysseus) {
            player = cretin;
            Perform(##Odysseus);	! not popped
            rtrue;
        }
        "The cyclops prefers eating to making conversation.";
    }
    if (Cyclops_flag) {
        if (Verb == ##Examine) {
            "The cyclops is sleeping like a baby, albeit a very ugly one.";
        }
        if (Verb ~= ##Attack or ##Kick or ##Wake or ##Poke or ##Burn) rfalse;
        print "The cyclops yawns and stares at the thing that woke him up.";
        new_line;
        Cyclops_flag = false;
        give cyclops fightbit;
        if (wrath < 0) {
            Cyclowrath = 0 - wrath;
            return Cyclowrath;
        }
        Cyclowrath = wrath;
        rtrue;
    }
    if (Verb == ##Examine) {
        "A hungry cyclops is standing at the foot of the stairs.";
    }
    if (Verb == ##GiveTo && second == cyclops) {
        if (noun == lunch) {
            if (wrath >= 0) {
                Remove(lunch);	! not popped
                print "The cyclops says ~Mmm Mmm. I love hot peppers! But oh, could I use a drink. Perhaps I could drink the blood of that thing.~  From the gleam in his eye, it could be surmised that you are ~that thing~.";
                new_line;
                Cyclowrath = Least(65535,0 - wrath);
            }
            Queue(CyclopsDaemon,65535)-->0 = true;
            rtrue;
        }
        if (noun == quantity_of_water || (noun == glass_bottle && quantity_of_water in glass_bottle)) {
            if (wrath < 0) {
                Remove(quantity_of_water);	! not popped
                move glass_bottle to location;
                give glass_bottle open;
                give cyclops ~fightbit;
                print "The cyclops takes the bottle, checks that it's open, and drinks the water. A moment later, he lets out a yawn that nearly blows you over, and then falls fast asleep (what did you put in that drink, anyway?).";
                new_line;
                Cyclops_flag = true;
                rtrue;
            }
            "The cyclops apparently is not thirsty and refuses your generous offer.";
        }
        if (noun == clove_of_garlic) {
            "The cyclops may be hungry, but there is a limit.";
        }
        "The cyclops is not so stupid as to eat THAT!";
    }
    if (Verb == ##Poke or ##Attack or ##Throw) {
        Queue(CyclopsDaemon,65535)-->0 = true;
        if (Verb == ##Poke) {
            "~Do you think I'm as stupid as my father was?~, he says, dodging.";
        }
        print "The cyclops shrugs but otherwise ignores your pitiful attempt.";
        new_line;
        if (Verb ~= ##Throw) rtrue;
        move noun to location;
        rtrue;
    }
    if (Verb == ##Take) {
        "The cyclops doesn't take kindly to being grabbed.";
    }
    if (Verb == ##TieTo) {
        "You cannot tie the cyclops, though he is fit to be tied.";
    }
    if (Verb ~= ##Listen) rfalse;
    "You can hear his stomach rumbling.";
];

[ CyclopsDaemon ;	! 51386 / 0xc8ba
    if (Cyclops_flag || Dead) rtrue;
    if (location ~= cyclops_room) {
        QueueInterrupt(CyclopsDaemon)-->0 = false;
        rtrue;
    }
    if (((Cyclowrath < 0) ? (0 - Cyclowrath) : Cyclowrath) > 5) {
        QueueInterrupt(CyclopsDaemon)-->0 = false;
        return JigsUp("The cyclops, tired of all of your games and trickery, grabs you firmly. As he licks his chops, he says ~Mmm. Just like Mom used to make 'em.~ It's nice to be appreciated.");
    }
    if (Cyclowrath < 0) {
        --Cyclowrath;
    } else {
        ++Cyclowrath;
    }
    if (Cyclops_flag) rfalse;
    print (string) Cyclo_messages-->(((Cyclowrath < 0) ? (0 - Cyclowrath) : Cyclowrath) - 1);
    new_line;
    rtrue;
];

! References: cyclops_room.action

[ CyclopsRoomAction rarg ;	! 51488 / 0xc920
    if (rarg == M_LOOK) {
        print "This room has an exit on the northwest, and a staircase leading up.";
        new_line;
        if (Cyclops_flag && (~~Magic_flag)) {
            "The cyclops is sleeping blissfully at the foot of the stairs.";
        }
        if (Magic_flag) {
            "The east wall, previously solid, now has a cyclops-sized opening in it.";
        }
        if (~~Cyclowrath) {
            "A cyclops, who looks prepared to eat horses (much less mere adventurers), blocks the staircase. From his state of health, and the bloodstains on the walls, you gather that he is not very friendly, though he likes people.";
        }
        if (Cyclowrath > 0) {
            "The cyclops is standing in the corner, eyeing you closely. I don't think he likes you very much. He looks extremely hungry, even for a cyclops.";
        }
        if (Cyclowrath >= 0) rfalse;
        "The cyclops, having eaten the hot peppers, appears to be gasping. His enflamed tongue protrudes from his man-sized mouth.";
    }
    if (rarg ~= M_ENTER) rfalse;
    if (~~Cyclowrath) rtrue;
    QueueInterrupt(CyclopsDaemon)-->0 = true;
    rtrue;
];

! References: loud_room.action

[ LoudRoomAction rarg v ;	! 51938 / 0xcae2
    if (rarg == M_LOOK) {
        print "This is a large room with a ceiling which cannot be detected from the ground. There is a narrow passage from east to west and a stone stairway leading upward.";
        if (Echo_flag || ((~~Dam_open) && Low_tide)) {
            print " The room is eerie in its quietness.";
        } else {
            print " The room is deafeningly loud with an undetermined rushing sound. The sound seems to reverberate from all of the walls, making it difficult even to think.";
        }
        new_line;
        rtrue;
    }
    if (rarg == M_BEFORE && Dam_open && (~~Low_tide)) {
        print "It is unbearably loud here, with an ear-splitting roar seeming to come from all around you. There is a pounding in your head which won't stop. With a tremendous effort, you scramble out of the room.";
        new_line;
        new_line;
        Goto(ComplexPickOne(Near_loudroom));	! not popped
        rfalse;
    }
    if (rarg ~= M_ENTER || Echo_flag || ((~~Dam_open) && Low_tide) || (Dam_open && (~~Low_tide))) rfalse;
    FirstLook();	! not popped
    if (P_cont) {
        print "The rest of your commands have been lost in the noise.";
        new_line;
        P_cont = 0;
    }
  .label52342;
    new_line;
    print ">";
    @sread P_inbuf P_lexv;
    if (~~P_lexv->1) {
        print "I beg your pardon?";
        new_line;
        jump label52342;
    }
    v = P_lexv-->1;
    if (v == 'go' or 'walk' or 'run') {
        v = P_lexv-->3;
    } else if (v == 'say') {
        v = P_lexv-->5;
    }
    if (v == 'save') {
        SaveSub();	! not popped
        jump label52342;
    }
    if (v == 'restore') {
        RestoreSub();	! not popped
        jump label52342;
    }
    if (v == 'q//' or 'quit') {
        QuitSub();	! not popped
        jump label52342;
    }
    if (v == 'w//' or 'west') {
        return Goto(round_room);
    }
    if (v == 'e//' or 'east') {
        return Goto(damp_cave);
    }
    if (v == 'u//' or 'up') {
        return Goto(deep_canyon);
    }
    if (v == 'bug') {
        print "That's only your opinion.";
        new_line;
        jump label52342;
    }
    if (v == 'echo') {
        Echo_flag = true;
        give platinum_bar ~sacred;
        print "The acoustics of the room change subtly.";
        new_line;
        new_line;
        rtrue;
    }
    EchoSub();	! not popped
    jump label52342;
];

! References: deep_canyon.action

[ DeepCanyonAction rarg ;	! 52576 / 0xcd60
    if (rarg ~= M_LOOK) rfalse;
    print "You are on the south edge of a deep canyon. Passages lead off to the east, northwest and southwest. A stairway leads down.";
    if (Dam_open && (~~Low_tide)) {
        print " You can hear a loud roaring sound, like that of rushing water, from below.";
    } else {
        if ((~~Dam_open) && Low_tide) {
            new_line;
            rtrue;
        }
        print " You can hear the sound of flowing water from below.";
    }
    new_line;
    rtrue;
];

[ Thief_vs_Adventurer here robbed robbed_player found_anything ;	! 52746 / 0xce0a
    if ((~~Dead) && location == treasure_room) rfalse;
    if (~~Thief_here) {
        if ((~~Dead) && (~~here) && 30 > random(100)) {
            if (stiletto in thief) {
                give thief ~concealed;
                print "Someone carrying a large bag is casually leaning against one of the walls here. He does not speak, but it is clear from his aspect that the bag will be taken only over his dead body.";
                new_line;
                Thief_here = true;
                rtrue;
            }
            if (stiletto notin player) rfalse;
            move stiletto to thief;
            give stiletto scenery;
            give thief ~concealed;
            print "You feel a light finger-touch, and turning, notice a grinning figure holding a large bag in one hand and a stiletto in the other.";
            Thief_here = true;
            rtrue;
        }
        if (here && thief has fightbit && (~~TimeToRetreat(thief))) {
            print "Your opponent, determining discretion to be the better part of valor, decides to terminate this little contretemps. With a rueful nod of his head, he steps backward into the gloom and disappears.";
            new_line;
            give thief concealed;
            give thief ~fightbit;
            RetreiveStiletto();	! not popped
            rtrue;
        }
        if (here && thief has fightbit && 90 > random(100)) rfalse;
        if (here && 30 > random(100)) {
            print "The holder of the large bag just left, looking disgusted. Fortunately, he took nothing.";
            new_line;
            give thief concealed;
            RetreiveStiletto();	! not popped
            rtrue;
        }
        if (70 > random(100) || Dead) rfalse;
        if (Rob(location,thief,100)) {
            robbed = true;
        } else if (Rob(player,thief)) {
            robbed = true;
            robbed_player = true;
        }
        Thief_here = true;
        if (robbed && (~~here)) {
            print "A seedy-looking individual with a large bag just wandered through the room. On the way through, he quietly abstracted some valuables from the room and from your possession, mumbling something about ~Doing unto others before...~";
            new_line;
            RobYouBlind();	! not popped
            rfalse;
        }
        if (here) {
            RetreiveStiletto();	! not popped
            if (robbed) {
                print "The thief just left, still carrying his large bag. You may not have noticed that he ";
                if (robbed_player) {
                    print "robbed you blind first.";
                } else {
                    print "appropriated the valuables in the room.";
                }
                new_line;
                RobYouBlind();	! not popped
            } else {
                print "The thief, finding nothing of value, left disgusted.";
                new_line;
            }
            give thief concealed;
            here = 0;
            rtrue;
        }
        "A ~lean and hungry~ gentleman just wandered through, carrying a large bag. Finding nothing of value, he left disgruntled.";
    }
    if ((~~here) || 30 <= random(100)) rfalse;
    found_anything = Rob(location,thief,100);
    robbed = (found_anything ? found_anything : (Rob(player,thief)));
    if (robbed) {
        print "The thief just left, still carrying his large bag. You may not have noticed that he robbed you blind first.";
        new_line;
        RobYouBlind();	! not popped
    } else {
        print "The thief, finding nothing of value, left disgusted.";
        new_line;
    }
    give thief concealed;
    here = 0;
    RetreiveStiletto();	! not popped
    rfalse;
];

[ RobYouBlind old_lit ;	! 53800 / 0xd228
    old_lit = Lit;
    Lit = QueryLight(location);
    if (Lit || (~~old_lit)) rtrue;
    "The thief seems to have left you in the dark.";
];

[ HackTreasures itm ;	! 53838 / 0xd24e
    RetreiveStiletto();	! not popped
    give thief concealed;
    itm = child(treasure_room);
  .label53853;
    if (~~itm) rtrue;
    give itm ~concealed;
    itm = sibling(itm);
    jump label53853;
];

[ ThiefDies room obj nextitem dropped ;	! 53866 / 0xd26a
    obj = child(thief);
  .label53879;
    if (~~obj) {
        return dropped;
    }
    nextitem = sibling(obj);
    if (obj == stiletto or large_bag) {
        ! no code
    } else if (obj.trophy_value > 0) {
        move obj to room;
        dropped = true;
        if (obj == jeweled_egg) {
            Egg_solve = true;
            give jeweled_egg open;
        }
    }
    obj = nextitem;
    jump label53879;
];

[ RobMaze room itm nextitem ;	! 53928 / 0xd2a8
    itm = child(room);
  .label53939;
    if (~~itm) rfalse;
    nextitem = sibling(itm);
    if (itm has takeable && itm hasnt concealed && 40 > random(100)) {
        print "You hear, off in the distance, someone saying ~My, I wonder what this fine ", (name) itm, " is doing here.~";
        new_line;
        if (~~Probability(60)) rtrue;
        move itm to thief;
        give itm visited;
        give itm concealed;
        rtrue;
    }
    itm = nextitem;
    jump label53939;
];

! References: thief.action

[ ThiefAction rarg deadflag obj UNUSED ;	! 54052 / 0xd324
    if (Verb == ##TalkTo) {
        print "The thief is a strong, silent type.";
        new_line;
        P_cont = 0;
        rtrue;
    }
    if (~~rarg) {
        if (Verb == ##Hello && thief.description == Thief_out_desc) {
            "The thief, being temporarily incapacitated, is unable to acknowledge your greeting with his usual graciousness.";
        }
        if (noun == nasty_knife && Verb == ##Throw && thief hasnt fightbit) {
            if (Probability(10)) {
                print "You evidently frightened the robber, though you didn't hit him. He flees";
                if ((obj = child(thief)) ~= nothing) {
                    EmptyThiefBag(thief,location);	! not popped
                    print ", but the contents of his bag fall on the floor.";
                } else {
                    print ".";
                }
                new_line;
                give thief concealed;
                rtrue;
            }
            print "You missed. The thief makes no attempt to take the knife, though it would be a fine addition to the collection in his bag. He does seem angered by your attempt.";
            new_line;
            give thief fightbit;
            rtrue;
        }
        if (Verb == ##GiveTo or ##Throw && noun && noun ~= thief && second == thief) {
            if (thief.strength < 0) {
                thief.strength = 0 - thief.strength;
                QueueInterrupt(ThiefDaemon)-->0 = true;
                RetreiveStiletto();	! not popped
                thief.description = Thief_desc;
                print "Your proposed victim suddenly recovers consciousness.";
                new_line;
            }
            move noun to thief;
            if (noun.trophy_value > 0) {
                Thief_engrossed = true;
                "The thief is taken aback by your unexpected generosity, but accepts the ", (name) noun, " and stops to admire its beauty.";
            }
            "The thief places the ", (name) noun, " in his bag and thanks you politely.";
        }
        if (Verb == ##Take) {
            "Once you got him, what would you do with him?";
        }
        if (Verb == ##LookIn or ##Examine) {
            "The thief is a slippery character with beady eyes that flit back and forth. He carries, along with an unmistakable arrogance, a large bag over his shoulder and a vicious stiletto, whose blade is aimed menacingly in your direction. I'd watch out if I were you.";
        }
        if (Verb ~= ##Listen) rfalse;
        "The thief says nothing, as you have not been formally introduced.";
    }
    if (rarg == M_HANDLED) {
        if (stiletto in thief || stiletto notin parent(thief)) rfalse;
        move stiletto to thief;
        give stiletto scenery;
        if (thief notin location) rtrue;
        print "The robber, somewhat surprised at this turn of events, nimbly retrieves his stiletto.";
        new_line;
        rtrue;
    }
    if (rarg == M_ENTER) {
        move stiletto to location;
        give stiletto ~scenery;
        obj = ThiefDies(location);
        if (location == treasure_room) {
            obj = child(location);
          .label54946;
            if (~~obj) {
                print "The chalice is now safe to take.";
                new_line;
                jump label55097;
            }
            if (obj ~= chalice or thief or cretin) {
                give obj ~concealed;
                if (~~deadflag) {
                    deadflag = 1;
                    print "As the thief dies, the power of his magic decreases, and his treasures reappear:";
                    new_line;
                }
                print "  A ", (name) obj;
                if (child(obj) ~= nothing && CanSeeContents(obj)) {
                    print ", with ";
                    PrintContents(obj);	! not popped
                }
                new_line;
            }
            obj = sibling(obj);
            jump label54946;
        }
        if (obj) {
            print "His booty remains.";
            new_line;
        }
      .label55097;
        QueueInterrupt(ThiefDaemon)-->0 = false;
        rtrue;
    }
    if (rarg == M_FIGHT) {
        if ((~~Thief_here) || thief has concealed || 20 <= random(100)) rfalse;
        give thief fightbit;
        P_cont = 0;
        rtrue;
    }
    if (rarg == M_LOOK) {
        QueueInterrupt(ThiefDaemon)-->0 = false;
        give thief ~fightbit;
        move stiletto to location;
        give stiletto ~scenery;
        thief.description = Thief_out_desc;
        rtrue;
    }
    if (rarg ~= M_WAKE) rfalse;
    if (parent(thief) == location) {
        give thief fightbit;
        print "The robber revives, briefly feigning continued unconsciousness, and, when he sees his moment, scrambles away from you.";
        new_line;
    }
    QueueInterrupt(ThiefDaemon)-->0 = true;
    thief.description = Thief_desc;
    return RetreiveStiletto();
];

! References: large_bag.action

[ ThiefBagAction ;	! 55284 / 0xd7f4
    if (Verb == ##Take) {
        if (thief.description == Thief_out_desc) {
            "Sadly for you, the robber collapsed on top of the large bag. Any attempt to take it would surely rouse him to consciousness.";
        }
        "The bag will be taken over his dead body.";
    }
    if (Verb == ##Insert && second == large_bag) {
        "The ", (name) noun, " would make a fine addition to his collection, but he is unlikely to allow you near enough to deposit it.";
    }
    if (Verb == ##Close or ##Open) {
        "Getting close enough would be a good trick.";
    }
    if (Verb ~= ##LookIn or ##Examine) rfalse;
    "The bag is closed, so it's hard to tell what, if anything, is inside.";
];

[ EmptyThiefBag thief room itm nextitem ;	! 55558 / 0xd906
    if ((itm = child(thief)) == nothing) rfalse;
  .label55571;
    if (~~itm) rtrue;
    nextitem = sibling(itm);
    give itm ~concealed;
    move itm to room;
    itm = nextitem;
    jump label55571;
];

! References: chalice.action

[ ChaliceAction ;	! 55590 / 0xd926
    if (Verb == ##Take) {
        if (noun notin treasure_room || thief notin treasure_room || thief hasnt fightbit || thief has concealed || thief.description == Thief_out_desc) rfalse;
        "Realizing just in time that you'd be stabbed in the back if you attempted to take the chalice, you return to the fray.";
    }
    if (Verb == ##Insert && second == chalice) {
        "You can't. I guess the chalice wasn't intended to be used that way.";
    }
    return PedestalAction();
];

! References: treasure_room.action

[ TreasureRoomAction rarg thief_here UNUSED ;	! 55748 / 0xd9c4
    if (rarg ~= M_ENTER || QueueInterrupt(ThiefDaemon)-->0 ~= true || Dead) rfalse;
    thief_here = ((thief notin location) ? true : false);
    if (thief_here) {
        print "You hear a scream of anguish as you violate the robber's hideaway. Using passages unknown to you, he rushes to its defense.";
        new_line;
        move thief to location;
        give thief fightbit;
        give thief ~concealed;
    } else {
        give thief fightbit;
    }
    return ThiefInTreasure();
];

[ ThiefInTreasure obj nextitem ;	! 55894 / 0xda56
    obj = child(location);
    if (obj && sibling(obj) ~= nothing) {
        print "The thief gestures mysteriously, and the treasures in the room suddenly vanish.";
        new_line;
        new_line;
    }
  .label55957;
    if (~~obj) rtrue;
    if (obj ~= chalice or thief) {
        give obj concealed;
    }
    obj = sibling(obj);
    jump label55957;
];

! References: wooden_door.action, front_door.action

[ DoorAction ;	! 55978 / 0xdaaa
    if (Verb == ##Open) {
        "The door cannot be opened.";
    }
    if (Verb == ##Burn) {
        "You cannot burn this door.";
    }
    if (Verb == ##Poke) {
        print (string) ComplexPickOne(Door_messages);
        new_line;
        rtrue;
    }
    if (Verb ~= ##LookBehind) rfalse;
    "It won't open.";
];

! References: pile_of_bodies.action

[ DeadBodiesAction ;	! 56040 / 0xdae8
    if (Verb == ##Take) {
        "A force keeps you from taking the bodies.";
    }
    if (Verb ~= ##Burn or ##Poke) rfalse;
    return JigsUp("The voice of the guardian of the dungeon booms out from the darkness, ~Your disrespect costs you your life!~ and places your head on a sharp pole.");
];

! References: black_book.action

[ BookAction ;	! 56084 / 0xdb14
    if (Verb == ##Open) {
        "The book is already open to page 569.";
    }
    if (Verb == ##Close) {
        "As hard as you try, the book cannot be closed.";
    }
    if (Verb == ##MoveWith || (Verb == ##ReadObjObj && second == number_ob && second_intnum ~= 569)) {
        "Beside page 569, there is only one other page with any legible printing on it. Most of it is unreadable, but the subject seems to be the banishment of evil. Apparently, certain noises, lights, and prayers are efficacious in this regard.";
    }
    if (Verb ~= ##Burn) rfalse;
    Remove(noun);	! not popped
    return JigsUp("A booming voice says ~Wrong, cretin!~ and you notice that you have turned into a pile of dust. How, I can't imagine.");
];

! References: painting.action

[ PaintingAction ;	! 56320 / 0xdc00
    if (Verb ~= ##Poke) rfalse;
    noun.trophy_value = 0;
    noun.description = "There is a worthless piece of canvas here.";
    "Congratulations! Unlike the other vandals, who merely stole the artist's masterpieces, you have destroyed one.";
];

! References: brass_lantern.action

[ LampAction ;	! 56406 / 0xdc56
    if (Verb == ##Throw) {
        print "The lamp has smashed into the floor, and the light has gone out.";
        new_line;
        QueueInterrupt(LampDaemon)-->0 = false;
        Remove(brass_lantern);	! not popped
        move broken_lantern to location;
        rtrue;
    }
    if (Verb == ##SwitchOn) {
        if (brass_lantern has rmungbit) {
            "A burned-out lamp won't light.";
        }
        QueueInterrupt(LampDaemon)-->0 = true;
        rfalse;
    }
    if (Verb == ##SwitchOff) {
        if (brass_lantern has rmungbit) {
            "The lamp has already burned out.";
        }
        QueueInterrupt(LampDaemon)-->0 = false;
        rfalse;
    }
    if (Verb ~= ##Examine) rfalse;
    print "The lamp ";
    if (brass_lantern has rmungbit) {
        print "has burned out.";
    } else if (brass_lantern has light) {
        print "is on.";
    } else {
        print "is turned off.";
    }
    new_line;
    rtrue;
];

! References: small_mailbox.action

[ MailboxAction ;	! 56602 / 0xdd1a
    if (Verb ~= ##Take) rfalse;
    "It is securely anchored.";
];

! References: matchbook.action

[ MatchAction mleft ;	! 56624 / 0xdd30
    if (Verb == ##Burn or ##SwitchOn && noun == matchbook) {
        --Matches_count;
        if (Matches_count <= 0) {
            "I'm afraid that you have run out of matches.";
        }
        if (location == drafty_room or timber_room) {
            "This room is drafty, and the match goes out instantly.";
        }
        give matchbook flame;
        give matchbook light;
        Queue(MatchDaemon,2)-->0 = true;
        print "One of the matches starts to burn.";
        new_line;
        if (Lit) rtrue;
        Lit = true;
        LookSub();	! not popped
        rtrue;
    }
    if (Verb == ##SwitchOff && matchbook has flame) {
        print "The match is out.";
        new_line;
        give matchbook ~flame;
        give matchbook ~light;
        Lit = QueryLight(location);
        if (~~Lit) {
            print "It's pitch black in here!";
            new_line;
        }
        Queue(MatchDaemon,0);	! not popped
        rtrue;
    }
    if (Verb == ##Open or ##Count) {
        print "You have ";
        mleft = Matches_count - 1;
        print mleft, " match";
        if (mleft ~= 1) {
            print "es.";
        } else {
            print ".";
        }
        new_line;
        rtrue;
    }
    if (Verb ~= ##Examine) rfalse;
    if (matchbook has light) {
        print "The match is burning.";
    } else {
        print "The matchbook isn't very interesting, except for what's written on it.";
    }
    new_line;
    rtrue;
];

[ MatchDaemon ;	! 56940 / 0xde6c
    print "The match has gone out.";
    new_line;
    give matchbook ~flame;
    give matchbook ~light;
    Lit = QueryLight(location);
    rtrue;
];

[ LampDaemon len msg_table ;	! 56970 / 0xde8a
    msg_table = Lamp_table;
    len = msg_table-->0;
    Queue(LampDaemon,len)-->0 = true;
    GoDark(brass_lantern,msg_table,len);	! not popped
    if (~~len) rfalse;
    Lamp_table = msg_table + 4;
    return Lamp_table;
];

[ CandleDaemon len msg_table ;	! 57012 / 0xdeb4
    msg_table = Candle_table;
    give pair_of_candles visited;
    len = msg_table-->0;
    Queue(CandleDaemon,len)-->0 = true;
    GoDark(pair_of_candles,msg_table,len);	! not popped
    if (~~len) rfalse;
    Candle_table = msg_table + 4;
    return Candle_table;
];

[ GoDark light_src msg_table time_left ;	! 57058 / 0xdee2
    if (~~time_left) {
        give light_src ~light;
        give light_src rmungbit;
    }
    if ((~~ThingInPlayer(light_src)) && light_src notin location) rfalse;
    if (~~time_left) {
        "You'd better have more light than from the ", (name) light_src, ".";
    }
    print (string) msg_table-->1;
    new_line;
    rtrue;
];

[ Least x y ;	! 57128 / 0xdf28
    if (x < y) {
        return x;
    }
    return y;
];

! References: pair_of_candles.action

[ CandleAction ;	! 57142 / 0xdf36
    if (pair_of_candles hasnt visited) {
        QueueInterrupt(CandleDaemon)-->0 = true;
    }
    if (pair_of_candles == second) rfalse;
    if (Verb == ##Burn or ##SwitchOn) {
        if (pair_of_candles has rmungbit) {
            "Alas, there's not much left of the candles. Certainly not enough to burn.";
        }
        if (~~second) {
            if (matchbook has flame) {
                print "(with the match)";
                new_line;
                Perform(##SwitchOn,pair_of_candles,matchbook);	! not popped
                rtrue;
            }
            print "You should say what to light them with.";
            new_line;
            return 2;
        }
        if (second == matchbook && matchbook has light) {
            print "The candles are ";
            if (pair_of_candles has light) {
                "already lit.";
            }
            give pair_of_candles light;
            print "lit.";
            new_line;
            QueueInterrupt(CandleDaemon)-->0 = true;
            rtrue;
        }
        if (second == torch) {
            if (pair_of_candles has light) {
                "You realize, just in time, that the candles are already lighted.";
            }
            print "The heat from the torch is so intense that the candles are vaporized.";
            new_line;
            return Remove(pair_of_candles);
        }
        "You have to light them with something that's burning, you know.";
    }
    if (Verb == ##Count) {
        "Let's see, how many objects in a pair? Don't tell me, I'll get it.";
    }
    if (Verb == ##SwitchOff) {
        QueueInterrupt(CandleDaemon)-->0 = false;
        if (pair_of_candles has light) {
            print "The flame is extinguished.";
            give pair_of_candles ~light;
            Lit = QueryLight(location);
            if (~~Lit) {
                print " It's really dark in here....";
            }
            new_line;
            rtrue;
        }
        "The candles are not lighted.";
    }
    if (Verb == ##Insert && second has flammable) {
        "That wouldn't be smart.";
    }
    if (Verb ~= ##Examine) rfalse;
    print "The candles are ";
    if (pair_of_candles has light) {
        print "burning.";
    } else {
        print "out.";
    }
    new_line;
    rtrue;
];

! References: cave1.action

[ CaveWindAction rarg ;	! 57642 / 0xe12a
    if (rarg ~= M_BEFORE || pair_of_candles notin player || (~~Probability(50)) || pair_of_candles hasnt light) rfalse;
    QueueInterrupt(CandleDaemon)-->0 = false;
    give pair_of_candles ~light;
    print "A gust of wind blows out your candles!";
    new_line;
    Lit = QueryLight(location);
    if (Lit) rfalse;
    "It is now completely dark.";
];

! References: sword.action

[ SwordAction villainnear ;	! 57734 / 0xe186
    if (Verb == ##Take && player == cretin) {
        Queue(SwordDaemon,65535)-->0 = true;
        rfalse;
    }
    if (Verb ~= ##Examine) rfalse;
    villainnear = sword.trophy_value;
    if (villainnear == 1) {
        "Your sword is glowing with a faint blue glow.";
    }
    if (villainnear ~= 2) rfalse;
    "Your sword is glowing very brightly.";
];

! References: gas_room.action

[ GasRoomAction rarg burn_flag UNUSED ;	! 57826 / 0xe1e2
    if (rarg ~= M_BEFORE) rfalse;
    if (rarg == M_BEFORE && Verb == ##Burn or ##SwitchOn && noun == pair_of_candles or torch or matchbook) {
        burn_flag = true;
    }
    if ((~~ThingInPlayer(pair_of_candles)) || pair_of_candles hasnt light && ((~~ThingInPlayer(torch)) || torch hasnt light) && ((~~ThingInPlayer(matchbook)) || matchbook hasnt light)) rfalse;
    if (burn_flag) {
        print "How sad for an aspiring adventurer to light a ", (name) noun, " in a room which reeks of gas. Fortunately, there is justice in the world.";
        new_line;
    } else {
        print "Oh dear. It appears that the smell coming from this room was coal gas. I would have thought twice about carrying flaming objects in here.";
        new_line;
    }
    return JigsUp("^      ** BOOOOOOOOOOOM **");
];

! References: bat.initial2

[ BatInitial UNUSED ;	! 58054 / 0xe2c6
    if (parent(clove_of_garlic) == player or location) {
        "In the corner of the room on the ceiling is a large vampire bat who is obviously deranged and holding his nose.";
    }
    "A large vampire bat, hanging from the ceiling, swoops down at you!";
];

! References: bat_room.action

[ BatRoomAction rarg ;	! 58172 / 0xe33c
    if (rarg == M_LOOK) {
        "You are in a small room which has doors only to the east and south.";
    }
    if (rarg ~= M_ENTER || Dead || parent(clove_of_garlic) == player or location) rfalse;
    LookSub();	! not popped
    return BatMovesPlayer();
];

! References: machine_room.action

[ MachineRoomAction rarg ;	! 58238 / 0xe37e
    if (rarg ~= M_LOOK) rfalse;
    print "This is a large, cold room whose sole exit is to the north. In one corner there is a machine which is reminiscent of a clothes dryer. On its face is a switch which is labelled ~START~. The switch does not appear to be manipulable by any human hand (unless the fingers are about 1/16 by 1/4 inch). On the front of the machine is a large lid, which is ";
    if (machine has open) {
        print "open.";
    } else {
        print "closed.";
    }
    new_line;
    rtrue;
];

! References: machine.action

[ MachineAction ;	! 58472 / 0xe468
    if (Verb == ##Take) {
        "It is far too large to carry.";
    }
    if (Verb == ##Open) {
        if (machine has open) {
            print (string) ComplexPickOne(Dummy_table);
            new_line;
            rtrue;
        }
        if (child(machine) ~= nothing) {
            print "The lid opens, revealing ";
            PrintContents(machine);	! not popped
            print ".";
            new_line;
            give machine open;
            rtrue;
        }
        print "The lid opens.";
        new_line;
        give machine open;
        rtrue;
    }
    if (Verb == ##Close) {
        if (machine has open) {
            print "The lid closes.";
            new_line;
            give machine ~open;
            rtrue;
        }
        print (string) ComplexPickOne(Dummy_table);
        new_line;
        rtrue;
    }
    if (Verb ~= ##SwitchOn) rfalse;
    if (~~second) {
        "It's not clear how to turn it on with your bare hands.";
    }
    Perform(##MoveWith,switch,second);	! not popped
    rtrue;
];

! References: switch.action

[ SwitchAction obj ;	! 58640 / 0xe510
    if (Verb ~= ##MoveWith) rfalse;
    if (second == screwdriver) {
        if (machine has open) {
            "The machine doesn't seem to want to do anything.";
        }
        print "The machine comes to life (figuratively) with a dazzling display of colored lights and bizarre noises. After a few moments, the excitement abates.";
        new_line;
        if (pile_of_coal in machine) {
            Remove(pile_of_coal);	! not popped
            move huge_diamond to machine;
            rtrue;
        }
      .label58793;
        if ((obj = child(machine)) ~= nothing) {
            Remove(obj);	! not popped
            jump label58793;
        }
        move vitreous_slag to machine;
        rtrue;
    }
    if (~~second) {
        "You can't turn it with your hands...";
    }
    "It seems that a ", (name) second, " won't do.";
];

! References: vitreous_slag.action

[ SlagAction ;	! 58848 / 0xe5e0
    Remove(vitreous_slag);	! not popped
    "The slag was rather insubstantial, and crumbles into dust at your touch.";
];

! References: timber_room.action, drafty_room.action

[ DraftyRoomAction rarg itm ;	! 58898 / 0xe612
    if (rarg ~= M_HANDLED) rfalse;
    itm = child(player);
    Empty_handed = true;
  .label58914;
    if (~~itm) {
        ! no code
    } else if (QueryWeight(itm) > 4) {
        Empty_handed = false;
    } else {
        itm = sibling(itm);
        jump label58914;
    }
    if (location ~= drafty_room || (~~Lit)) rfalse;
    ScoreUPD(Light_shaft);	! not popped
    Light_shaft = 0;
    rfalse;
];

! References: altar.action

[ AltarAction rarg ;	! 58960 / 0xe650
    if (rarg ~= M_HANDLED) rfalse;
    Coffin_held = ((gold_coffin notin player) ? true : false);
    rfalse;
];

! References: beach1.action, beach2.action

[ BeachAction rarg ;	! 58984 / 0xe668
    if (rarg ~= M_BEFORE) rfalse;
    if (magic_boat in player) {
        Deflated = false;
        rtrue;
    }
    Deflated = true;
    rtrue;
];

! References: sceptre.action

[ SceptreAction ;	! 59004 / 0xe67c
    if (Verb ~= ##Raise or ##Wield) rfalse;
    if (location == aragain_falls or end_of_rainbow) {
        if (~~Rainbow_flag) {
            give pot_of_gold ~concealed;
            print "Suddenly, the rainbow appears to become solid and, I venture, walkable (I think the giveaway was the stairs and bannister).";
            new_line;
            if (location == end_of_rainbow) {
                print "A shimmering pot of gold appears at the end of the rainbow.";
                new_line;
            }
            Rainbow_flag = true;
            rtrue;
        }
        Rob(on_the_rainbow,surrounding_wall);	! not popped
        print "The rainbow seems to have become somewhat run-of-the-mill.";
        new_line;
        Rainbow_flag = false;
        rtrue;
    }
    if (location == on_the_rainbow) {
        Rainbow_flag = false;
        return JigsUp("The structural integrity of the rainbow is severely compromised, leaving you hanging in mid-air, supported only by water vapor. Bye.");
    }
    "A dazzling display of color briefly emanates from the sceptre.";
];

! References: aragain_falls.action

[ FallsAction rarg ;	! 59246 / 0xe76e
    if (rarg ~= M_LOOK) rfalse;
    print "You are at the top of Aragain Falls, an enormous waterfall with a drop of about 450 feet. The only path here is on the north end.";
    new_line;
    if (Rainbow_flag) {
        print "A solid rainbow spans the falls.";
    } else {
        print "A beautiful rainbow can be seen over the falls and to the west.";
    }
    new_line;
    rtrue;
];

! References: rainbow.action

[ RainbowAction ;	! 59392 / 0xe800
    if (Verb == ##EnterObj or ##Cross) {
        if (location == canyon_view) {
            "From here?!?";
        }
        if (Rainbow_flag) {
            if (location == aragain_falls) {
                return Goto(end_of_rainbow);
            }
            if (location == end_of_rainbow) {
                return Goto(aragain_falls);
            }
            "You'll have to say which way...";
        }
        "I didn't know you could walk on water vapor.";
    }
    if (Verb ~= ##LookUnder) rfalse;
    "The Frigid River flows under the rainbow.";
];

! References: punctured_boat.action

[ PuncturedBoatAction ;	! 59518 / 0xe87e
    if (Verb == ##PutOn or ##Insert && noun == viscous_material) {
        return RepairBoat();
    }
    if (Verb == ##Fill or ##Inflate) {
        "This boat will not inflate since some moron punctured it.";
    }
    if (Verb ~= ##Fix) rfalse;
    if (second == viscous_material) {
        return RepairBoat();
    }
    return WithTell(second);
];

[ RepairBoat ;	! 59600 / 0xe8d0
    print "Well done. The boat is repaired.";
    new_line;
    move pile_of_plastic to parent(punctured_boat);
    return Remove(punctured_boat);
];

! References: river.action

[ RiverAction ;	! 59638 / 0xe8f6
    if (Verb == ##Insert) {
        if (second ~= river) rfalse;
        if (noun == you) {
            return JigsUp("You splash around for a while, fighting the current, then you drown.");
        }
        if (noun == magic_boat) {
            "You should get in the boat then launch it.";
        }
        if (noun has flammable) {
            Remove(noun);	! not popped
            "The ", (name) noun, " floats for a moment, then sinks.";
        }
        Remove(noun);	! not popped
        "The ", (name) noun, " splashes into the water and is gone forever.";
    }
    if (Verb ~= ##EnterObj or ##Dive) rfalse;
    "A look before leaping reveals that the river is wide and dangerous, with swift currents and large, sharp, half-hidden rocks. You therefore decide to forgo your ill-considered swim.";
];

[ RiverDaemon room ;	! 59876 / 0xe9e4
    if (location ~= river4 or river3 or river2 or frigid_river or river1) {
        QueueInterrupt(RiverDaemon)-->0 = false;
        rtrue;
    }
    room = SearchArray(location,River_next);
    if (room) {
        print "The flow of the river carries you downstream.";
        new_line;
        new_line;
        Goto(room);	! not popped
        Queue(RiverDaemon,SearchArray(location,River_speeds))-->0 = true;
        rtrue;
    }
    return JigsUp("Unfortunately, the magic boat doesn't provide protection from unfriendly rocks and boulders one meets at the bottom of many waterfalls. Including this one.");
];

! References: magic_boat.action

[ BoatAction rarg ;	! 59978 / 0xea4a
    if (rarg == M_ENTER or M_BEFORE or M_LOOK) rfalse;
    if (rarg == M_HANDLED) {
        if (Verb == ##Go) {
            if (noun == mine4 or shore or aragain_falls || (location == reservoir && noun == river1 or on_the_rainbow) || (location == stream && noun == on_the_rainbow)) rfalse;
            "Refer to the label for the boat's operating instructions.";
        }
        if (Verb == ##Launch) {
            if (~~GoNext(Near_water)) rtrue;
            Queue(RiverDaemon,SearchArray(location,River_speeds))-->0 = true;
            rtrue;
        }
        if (Verb == ##Drop && noun has weapon || (Verb == ##Insert && noun has weapon && second == magic_boat) || (Verb == ##Poke or ##Attack && second has weapon)) {
            Remove(magic_boat);	! not popped
            move punctured_boat to location;
            Rob(magic_boat,location);	! not popped
            move player to location;
            print "It seems that the ";
            if (Verb == ##Insert or ##Drop) {
                print (name) noun;
            } else {
                print (name) second;
            }
            print " didn't agree with the boat, as evidenced by the loud hissing noise issuing therefrom. With a pathetic sputter, the boat finishes deflating, leaving you without.";
            new_line;
            if (location hasnt water_room) rtrue;
            new_line;
            JigsUp("In other words, fighting the fierce currents of the Frigid River. You manage to hold your own for a bit, but then you are carried over a large waterfall and into some nasty rocks. Ouch!");	! not popped
            rtrue;
        }
        if (Verb ~= ##Launch) rfalse;
        "You're not in the boat!";
    }
    if (Verb == ##Board) {
        if (sceptre notin player && nasty_knife notin player && sword notin player && rusty_knife notin player && bloody_axe notin player && stiletto notin player) rfalse;
        print "Oops! Something sharp seems to have slipped and punctured the boat. The boat deflates to the sounds of hissing, sputtering, and cursing.";
        new_line;
        Remove(magic_boat);	! not popped
        move punctured_boat to location;
        SetLastObject(punctured_boat);	! not popped
        rtrue;
    }
    if (Verb == ##Fill or ##Inflate) {
        "Inflating it further would probably burst it.";
    }
    if (Verb ~= ##Deflate) rfalse;
    if (parent(player) == magic_boat) {
        "You can't deflate the boat while you're in it.";
    }
    if (magic_boat notin location) {
        "The boat must be on the ground to be deflated.";
    }
    print "The boat deflates.";
    new_line;
    Deflated = true;
    Remove(magic_boat);	! not popped
    move pile_of_plastic to location;
    return SetLastObject(pile_of_plastic);
];

[ BlowUpRaft ;	! 60556 / 0xec8c
    return Perform(##Inflate,noun,blast_of_air);
];

! References: pile_of_plastic.action

[ PlasticAction ;	! 60566 / 0xec96
    if (Verb ~= ##Fill or ##Inflate) rfalse;
    if (pile_of_plastic notin location) {
        "The boat must be on the ground to be inflated.";
    }
    if (second == air_pump) {
        print "The boat inflates and appears seaworthy.";
        new_line;
        if (tan_label hasnt visited) {
            print "A tan label is lying inside the boat.";
            new_line;
        }
        Deflated = false;
        Remove(pile_of_plastic);	! not popped
        move magic_boat to location;
        return SetLastObject(magic_boat);
    }
    if (second == blast_of_air) {
        "You don't have enough lung power to inflate it.";
    }
    "With a ", (name) second, "? Surely you jest!";
];

! References: frigid_river.action

[ River2Action rarg ;	! 60736 / 0xed40
    if (rarg ~= M_BEFORE || red_buoy notin player || (~~Buoy_flag)) rfalse;
    print "You notice something funny about the feel of the buoy.";
    new_line;
    Buoy_flag = false;
    rtrue;
];

! References: sand.action

[ SandFunction ;	! 60786 / 0xed72
    if (Verb ~= ##Dig) rfalse;
    ++Beach_dig;
    if (Beach_dig > 3) {
        Beach_dig = 65535;
        if (scarab in location) {
            give scarab concealed;
        }
        return JigsUp("The hole collapses, smothering you.");
    }
    if (Beach_dig == 3) {
        if (scarab hasnt concealed) rfalse;
        print "You can see a scarab here in the sand.";
        new_line;
        SetLastObject(scarab);	! not popped
        give scarab ~concealed;
        rtrue;
    }
    print (string) Bdigs-->Beach_dig;
    new_line;
    rtrue;
];

! References: up_a_tree.action

[ TreeAction rarg itm ;	! 60866 / 0xedc2
    if (rarg == M_LOOK) {
        print "You are about 10 feet above the ground nestled among some large branches. The nearest branch above you is above your reach.";
        new_line;
        if ((itm = child(forest_path)) == nothing || sibling(itm) == nothing) rfalse;
        print "On the ground below you can see:  ";
        PrintContents(forest_path);	! not popped
        ".";
    }
    if (rarg == M_HANDLED) {
        if (Verb == ##ClimbDown && noun == tree) {
            return PlayerToProp(d_to);
        }
        if (Verb == ##ClimbObj or ##ClimbUp && noun == tree) {
            return PlayerToProp(u_to);
        }
        if (Verb ~= ##Drop) rfalse;
        if (~~Idrop()) rtrue;
        if (noun == birds_nest && jeweled_egg in birds_nest) {
            print "The nest falls to the ground, and the egg spills out of it, seriously damaged.";
            new_line;
            Remove(jeweled_egg);	! not popped
            move broken_egg to forest_path;
            rtrue;
        }
        if (noun == jeweled_egg) {
            print "The egg falls to the ground and springs open, seriously damaged.";
            move jeweled_egg to forest_path;
            BreakEgg();	! not popped
            new_line;
            rtrue;
        }
        if (noun ~= player or tree) {
            move noun to forest_path;
            "The ", (name) noun, " falls to the ground.";
        }
        if (Verb ~= ##Dive) rfalse;
        return JigsUp("That was just a bit too far down.");
    }
    if (rarg ~= M_ENTER) rfalse;
    Queue(SongbirdDaemon,65535)-->0 = true;
    rtrue;
];

! References: jeweled_egg.action

[ EggAction ;	! 61208 / 0xef18
    if (Verb == ##Poke or ##Open && noun == jeweled_egg) {
        if (noun has open) {
            "The egg is already open.";
        }
        if (~~second) {
            "You have neither the tools nor the expertise.";
        }
        if (second == pair_of_hands) {
            "I doubt you could do that without damaging it.";
        }
        if (second has weapon || second has toolbit || Verb == ##Poke) {
            print "The egg is now open, but the clumsiness of your attempt has seriously compromised its esthetic appeal.";
            BreakEgg();	! not popped
            new_line;
            rtrue;
        }
        if (noun has fightbit) {
            "Not to say that using the ", (name) second, " isn't original too...";
        }
        print "The concept of using a ", (name) second, " is certainly original.";
        new_line;
        give noun fightbit;
        rtrue;
    }
    if (Verb == ##Hatch or ##ClimbOn) {
        print "There is a noticeable crunch from beneath you, and inspection reveals that the egg is lying open, badly damaged.";
        BreakEgg();	! not popped
        new_line;
        rtrue;
    }
    if (Verb ~= ##Throw or ##Poke or ##Open) rfalse;
    if (Verb == ##Throw) {
        move noun to location;
    }
    print "Your rather indelicate handling of the egg has caused it some damage, although you have succeeded in opening it.";
    BreakEgg();	! not popped
    new_line;
    rtrue;
];

[ BreakEgg UNUSED ;	! 61632 / 0xf0c0
    if (golden_canary in jeweled_egg) {
        print " ", (string) broken_canary.initial;
    } else {
        Remove(broken_canary);	! not popped
    }
    move broken_egg to parent(jeweled_egg);
    Remove(jeweled_egg);	! not popped
    rtrue;
];

! References: broken_canary.action, golden_canary.action

[ CanaryAction ;	! 61670 / 0xf0e6
    if (Verb ~= ##WindUp) rfalse;
    if (noun == golden_canary) {
        if ((~~Sing_song) && ForestRoom()) {
            print "The canary chirps, slightly off-key, an aria from a forgotten opera. From out of the greenery flies a lovely songbird. It perches on a limb just over your head and opens its beak to sing. As it does so a beautiful brass bauble drops from its mouth, bounces off the top of your head, and lands glimmering in the grass. As the canary winds down, the songbird flies away.";
            new_line;
            Sing_song = true;
            move brass_bauble to ((location == up_a_tree) ? forest_path : location);
            rtrue;
        }
        "The canary chirps blithely, if somewhat tinnily, for a short time.";
    }
    "There is an unpleasant grinding noise from inside the canary.";
];

[ ForestRoom ;	! 62016 / 0xf240
    if (location == forest1 or forest2 or forest4 or forest_path or up_a_tree) rtrue;
    rfalse;
];

[ SongbirdDaemon ;	! 62032 / 0xf250
    if (~~ForestRoom()) {
        QueueInterrupt(SongbirdDaemon)-->0 = false;
        rfalse;
    }
    if (15 <= random(100)) rfalse;
    "You hear in the distance the chirping of a song bird.";
];

! References: clearing2.action, forest_path.action, forest4.action, forest2.action, forest1.action

[ ForestAction rarg ;	! 62096 / 0xf290
    if (rarg == M_ENTER) {
        Queue(SongbirdDaemon,65535)-->0 = true;
        rtrue;
    }
    if (rarg ~= M_HANDLED || Verb ~= ##ClimbUp or ##ClimbObj || noun ~= tree) rfalse;
    return PlayerToProp(u_to);
];

! References: white_cliffs.action

[ CliffAction ;	! 62140 / 0xf2bc
    if (Verb ~= ##ClimbObj or ##ClimbDown or ##ClimbUp) rfalse;
    "The cliff is too steep for climbing.";
];

! References: cliff.action

[ Cliff2Action ;	! 62170 / 0xf2da
    if (Verb == ##Dive || (Verb == ##Insert && noun == you)) {
        "That would be very unwise. Perhaps even fatal.";
    }
    if (second ~= cliff || Verb ~= ##ThrowOver or ##Insert) rfalse;
    print "The ", (name) noun, " tumbles end over end into the river and is seen no more.";
    new_line;
    return Remove(noun);
];

! References: rope.action

[ RopeAction env ;	! 62268 / 0xf33c
    if (location ~= dome_room) {
        Dome_flag = false;
        if (Verb ~= ##TieTo) rfalse;
        "You can't tie the rope to that.";
    }
    if (Verb == ##TieTo) {
        if (second ~= wooden_railing) rfalse;
        if (Dome_flag) {
            "The rope is already tied to it.";
        }
        print "The rope drops over the side and comes within ten feet of the floor.";
        new_line;
        Dome_flag = true;
        give rope scenery;
        env = parent(rope);
        if (env && env in Room_Holder) rtrue;
        move rope to location;
        rtrue;
    }
    if (Verb == ##ClimbDown && noun == rope && Dome_flag) {
        return PlayerToProp(d_to);
    }
    if (Verb == ##TieWith && rope == second) {
        if (noun has animate) {
            if (noun.strength < 0) {
                print "Your attempt to tie up the ", (name) noun, " awakens him.";
                return CheckStrength(noun);
            }
            "The ", (name) noun, " struggles and you cannot tie him up.";
        }
        "Why would you tie up a ", (name) noun, "?";
    }
    if (Verb == ##Untie) {
        if (Dome_flag) {
            Dome_flag = false;
            give rope ~scenery;
            "The rope is now untied.";
        }
        "It is not tied to anything.";
    }
    if (Verb == ##Drop && location == dome_room && (~~Dome_flag)) {
        move rope to torch_room;
        "The rope drops gently to the floor below.";
    }
    if (Verb ~= ##Take || (~~Dome_flag)) rfalse;
    "The rope is tied to the railing.";
];

[ UntieFrom ;	! 62618 / 0xf49a
    if (noun == rope && Dome_flag && second == wooden_railing) {
        return Perform(##Untie,noun);
    }
    "It's not attached to that!";
];

! References: chute.action

[ ChuteAction ;	! 62654 / 0xf4be
    if (Verb ~= ##ClimbDown or ##ClimbUp or ##EnterObj && Verb == ##ClimbObj || (Verb == ##Insert && noun == you)) {
        if (location == cellar) {
            PlayerToProp(w_to);	! not popped
            rtrue;
        }
        print "You tumble down the slide....";
        new_line;
        return Goto(cellar);
    }
    if (Verb ~= ##Insert) rfalse;
    return SlideFunction(noun);
];

[ SlideFunction obj ;	! 62726 / 0xf506
    if (obj has takeable) {
        print "The ", (name) obj, " falls into the slide and is gone.";
        new_line;
        if (obj == quantity_of_water) {
            return Remove(obj);
        }
        move obj to cellar;
        rtrue;
    }
    print (string) ComplexPickOne(Yuks_table);
    new_line;
    rtrue;
];

! References: brown_sack.action

[ SackAction ;	! 62784 / 0xf540
    if (Verb ~= ##Smell || lunch notin noun) rfalse;
    "It smells of hot peppers.";
];

[ SpiritActions rarg UNUSED ;	! 62810 / 0xf55a
    if (Verb == ##Go) {
        if (location ~= timber_room || noun ~= aragain_falls) rfalse;
        "You cannot enter in your condition.";
    }
    if (Verb == ##Superbrief or ##Verbose or ##Brief or ##Restore or ##Save or ##Again or ##Restart or ##Quit) rfalse;
    if (Verb == ##Wake or ##Poke or ##Attack or ##Swing) {
        "All such attacks are vain in your condition.";
    }
    if (Verb == ##Eat or ##Close or ##Open or ##Deflate or ##Inflate or ##Drink or ##TieTo or ##Burn or ##MoveWith or ##Touch or ##Untie) {
        "Even such a simple action is beyond your capabilities.";
    }
    if (Verb == ##Wait) {
        "Might as well. You've got an eternity.";
    }
    if (Verb == ##SwitchOn) {
        "You need no light to guide you.";
    }
    if (Verb == ##Score) {
        "How can you think of your score in your condition?";
    }
    if (Verb == ##Take) {
        "Your hand passes through its object.";
    }
    if (Verb == ##Inventory or ##Throw or ##Drop) {
        "You have no possessions.";
    }
    if (Verb == ##Diagnose) {
        "You are dead.";
    }
    if (Verb == ##Look) {
        print "The room looks strange and unearthly";
        if (child(location) == nothing) {
            print ".";
        } else {
            print " and objects appear indistinct.";
        }
        new_line;
        if (location hasnt light) {
            print "Although there is no light, the room seems dimly illuminated.";
            new_line;
        }
        new_line;
        rfalse;
    }
    if (Verb == ##Pray) {
        if (location == altar) {
            give brass_lantern ~concealed;
            player.action = 0;
            Assigned_but_unused = false;
            Always_lit = false;
            Dead = false;
            if (troll in the_troll_room) {
                Troll_flag = false;
            }
            print "From the distance the sound of a lone trumpet is heard. The room becomes very bright and you feel disembodied. In a moment, the brightness fades and you find yourself rising as if from a long sleep, deep in the woods. In the distance you can faintly hear a songbird and the sounds of the forest.";
            new_line;
            new_line;
            return Goto(forest1);
        }
        "Your prayers are not heard.";
    }
    print "You can't even do that.";
    new_line;
    P_cont = 0;
    return 2;
];

! References: reservoir_south.pseudo, reservoir_north.pseudo

[ PseudoLakeAction ;	! 63464 / 0xf7e8
    if (Low_tide) {
        "There's not much lake left....";
    }
    if (Verb == ##Cross) {
        "It's too wide to cross.";
    }
    if (Verb ~= ##EnterObj) rfalse;
    "You can't swim in this lake.";
];

! References: stream.pseudo, stream_view.pseudo, reservoir.pseudo

[ PseudoStreamAction ;	! 63528 / 0xf828
    if (Verb == ##EnterObj or ##Swim) {
        "You can't swim in the stream.";
    }
    if (Verb ~= ##Cross) rfalse;
    "The other side is a sheer rock cliff.";
];

! References: chasm.pseudo, reservoir_south.pseudo, east_of_chasm.pseudo

[ PseudoChasmAction ;	! 63578 / 0xf85a
    if (Verb == ##Dive || (Verb == ##Insert && noun == you)) {
        "For a change, you look before leaping. You realize you would never survive.";
    }
    if (Verb == ##Cross) {
        "It's too far to jump, and there's no bridge.";
    }
    if (Verb ~= ##ThrowOver or ##Insert || second ~= pseudo) rfalse;
    print "The ", (name) noun, " drops out of sight into the chasm.";
    new_line;
    return Remove(noun);
];

! References: torch_room.pseudo, dome_room.pseudo

[ PseudoDomeAction ;	! 63708 / 0xf8dc
    if (Verb ~= ##Kiss) rfalse;
    "No.";
];

! References: entrance_to_hades.pseudo, entrance_to_hades.pseudo

[ PseudoGateAction ;	! 63718 / 0xf8e6
    if (Verb == ##EnterObj) {
        PlayerToProp(in_to);	! not popped
        rtrue;
    }
    "The gate is protected by an invisible force. It makes your teeth ache to touch it.";
];

! References: studio.pseudo

[ PseudoDoorAction ;	! 63782 / 0xf926
    if (Verb == ##Close or ##Open) {
        "The door won't budge.";
    }
    if (Verb ~= ##EnterObj) rfalse;
    return PlayerToProp(s_to);
];

! References: studio.pseudo

[ PseudoPaintAction ;	! 63812 / 0xf944
    if (Verb ~= ##Poke) rfalse;
    "Some paint chips away, revealing more paint.";
];

! References: smelly_room.pseudo, smelly_room.pseudo, gas_room.pseudo, gas_room.pseudo

[ PseudoGasAction ;	! 63850 / 0xf96a
    if (Verb == ##BlowIn) {
        "There is too much gas to blow away.";
    }
    if (Verb ~= ##Smell) rfalse;
    "It smells like coal gas in here.";
];

[ DoFight len cnt res o oo out ;	! 63902 / 0xf99e
  .label63915;
    cnt = 0;
  .label63918;
    ++cnt;
    if (cnt == len) {
        res = 1;
    } else {
        oo = Villains-->cnt;
        o = oo-->0;
        if (o hasnt fightbit) {
            jump label63918;
        }
        if (o.action(M_HANDLED)) {
            jump label63918;
        }
        res = VillainBlow(oo,out);
        if (~~res) {
            res = 0;
        } else {
            if (res ~= 2) jump label63918;
            out = 1 + random(3);
            jump label63918;
        }
    }
    if ((~~res) || (~~out)) rtrue;
    @dec out;
    if (out) jump label63915;
    rtrue;
];

[ Remark remark_tbl defender weap len cnt text ;	! 64006 / 0xfa06
    len = remark_tbl-->0;
  .label64023;
    if (++cnt > len) {
        ! no code
    } else {
        text = remark_tbl-->cnt;
        if (text == 0) {
            print (name) weap;
            jump label64023;
        }
        if (text == 1) {
            print (name) defender;
            jump label64023;
        }
        print (string) text;
        jump label64023;
    }
    new_line;
    rtrue;
];

[ FightStrength adjust=1 str ;	! 64060 / 0xfa3c
    str = 2 + score / (Max_score / (7 - 2));
    if (adjust) {
        return str + player.strength;
    }
    return str;
];

[ VillainStrength oo villain od tmp ;	! 64096 / 0xfa60
    villain = oo-->0;
    od = villain.strength;
    if (od >= 0) {
        if (villain == thief && Thief_engrossed) {
            if (od > 2) {
                od = 2;
            }
            Thief_engrossed = false;
        }
        if (second && second has weapon && oo-->1 == second) {
            tmp = od - oo-->2;
            if (tmp < 1) {
                tmp = 1;
            }
            od = tmp;
        }
    }
    return od;
];

[ HasWeapon who obj ;	! 64170 / 0xfaaa
    obj = child(who);
    if (~~obj) rfalse;
  .label64182;
    if (obj == stiletto or bloody_axe or sword or nasty_knife or rusty_knife) {
        return obj;
    }
    if ((obj = sibling(obj)) ~= nothing) jump label64182;
    rfalse;
];

[ VillainBlow oo out villain v_msgs p_weapon v_str p_str unused_flag o_p_str tbl result n_weapon ;	! 64204 / 0xfacc
    villain = oo-->0;
    v_msgs = oo-->4;
    give player ~staggered;
    if (villain has staggered) {
        print "The ", (name) villain, " slowly regains his feet.";
        new_line;
        give villain ~staggered;
        rtrue;
    }
    v_str = VillainStrength(oo);
    unused_flag = 1;
    p_str = FightStrength();
    if (p_str <= 0) rtrue;
    o_p_str = FightStrength(0);
    p_weapon = HasWeapon(player);
    if (p_str < 0) {
        result = 3;
    } else {
        if (p_str == 1) {
            if (v_str > 2) {
                v_str = 3;
            }
            tbl = Def1_res-->(v_str - 1);
        } else if (p_str == 2) {
            if (v_str > 3) {
                v_str = 4;
            }
            tbl = Def2_res-->(v_str - 1);
        } else if (p_str > 2) {
            v_str = v_str - p_str;
            if (v_str < 65535) {
                v_str = 65534;
            } else if (v_str > 1) {
                v_str = 2;
            }
            tbl = Def3_res-->(v_str + 2);
        }
        result = tbl-->(random(9) - 1);
        if (out) {
            if (result == 6) {
                result = 8;
            } else {
                result = 9;
            }
        }
        if (result == 6 && p_weapon && Probability(25)) {
            result = 7;
        }
        Remark(PickOne(v_msgs-->(result - 1)),player,p_weapon);	! not popped
    }
    if (result ~= 1) {
        if (result == 8) {
            ! no code
        } else if (result == 2) {
            ! no code
        } else if (result == 3 or 9) {
            p_str = 0;
        } else if (result == 4) {
            --p_str;
            if (p_str < 0) {
                p_str = 0;
            }
            if (Load_max > 50) {
                Load_max = Load_max - 10;
            }
        } else if (result == 5) {
            p_str = p_str - 2;
            if (p_str < 0) {
                p_str = 0;
            }
            if (Load_max > 50) {
                Load_max = Load_max - 20;
            }
        } else if (result == 6) {
            give player staggered;
        } else {
            if (result == 7) {
                ! no code
            }
            move p_weapon to location;
            n_weapon = HasWeapon(player);
            if (n_weapon) {
                print "Fortunately, you still have a ", (name) n_weapon, ".";
                new_line;
            }
        }
    }
    return WinnerResult(p_str,result,o_p_str);
];

[ HeroBlow oo villain nohesitate dweapon att def cnt oa od tbl res UNUSED len ;	! 64602 / 0xfc5a
    len = Villains-->0;
  .label64633;
    ++cnt;
    if (cnt == len) {
        ! no code
    } else {
        oo = Villains-->cnt;
        if (oo-->0 ~= noun) jump label64633;
    }
    give noun fightbit;
    if (player has staggered) {
        print "You are still recovering from that last blow, so your attack is ineffective.";
        new_line;
        give player ~staggered;
        rtrue;
    }
    att = FightStrength();
    if (att < 1) {
        att = 1;
    }
    oa = att;
    villain = oo-->0;
    def = VillainStrength(oo);
    od = true;
    if (~~od) {
        if (noun == player) {
            return JigsUp("Well, you really did it that time. Is suicide painless?");
        }
        "Attacking the ", (name) villain, " is pointless.";
    }
    dweapon = HasWeapon(villain);
    if ((~~dweapon) || def < 0) {
        print "The ";
        if (~~dweapon) {
            print "unarmed";
        } else {
            print "unconscious";
        }
        print " ", (name) villain, " cannot defend himself:  He dies.";
        new_line;
        res = 3;
    } else {
        if (def == 1) {
            if (att > 2) {
                att = 3;
            }
            tbl = Def1_res-->(att - 1);
        } else if (def == 2) {
            if (att > 3) {
                att = 4;
            }
            tbl = Def2_res-->(att - 1);
        } else if (def > 2) {
            att = att - def;
            if (att < 65535) {
                att = 65534;
            } else if (att > 1) {
                att = 2;
            }
            tbl = Def3_res-->(att + 2);
        }
        res = tbl-->(random(9) - 1);
        if (nohesitate) {
            if (res == 6) {
                res = 8;
            } else {
                res = 9;
            }
        }
        if (res == 6 && dweapon && 25 > random(100)) {
            res = 7;
        }
        Remark(PickOne(Hero_melee-->(res - 1)),noun,second);	! not popped
    }
    if (res ~= 1) {
        if (res == 8) {
            ! no code
        } else if (res == 2) {
            def = 0 - def;
        } else if (res == 3 or 9) {
            def = 0;
        } else if (res == 4) {
            --def;
            if (def < 0) {
                def = 0;
            }
        } else if (res == 5) {
            def = def - 2;
            if (def < 0) {
                def = 0;
            }
        } else if (res == 6) {
            give noun staggered;
        } else {
            if (res == 7) {
                ! no code
            }
            give dweapon ~scenery;
            give dweapon weapon;
            move dweapon to location;
            SetLastObject(dweapon);	! not popped
        }
    }
    return VillainResult(noun,def,res);
];

[ WinnerResult def res od ;	! 65114 / 0xfe5a
    player.strength = ((~~def) ? 55536 : (def - od));
    if (def - od < 0) {
        Queue(HealFunction,30)-->0 = true;
    }
    if (FightStrength() <= 0) {
        player.strength = 1 + (0 - FightStrength(0));
        JigsUp("It appears that that last blow was too much for you. I'm afraid you are dead.");	! not popped
        rfalse;
    }
    return res;
];

[ VillainResult villain def res ;	! 65200 / 0xfeb0
    villain.strength = def;
    if (~~def) {
        give villain ~fightbit;
        print "Almost as soon as the ", (name) villain, " breathes his last breath, a cloud of sinister black fog envelops him, and when the fog lifts, the carcass has disappeared.";
        new_line;
        Remove(villain);	! not popped
        villain.action(M_ENTER);	! not popped
        return res;
    }
    if (res == 2) {
        villain.action(M_LOOK);	! not popped
        return res;
    }
    return res;
];

[ TimeToRetreat villain vill_str play_str ;	! 65348 / 0xff44
    vill_str = villain.strength;
    play_str = vill_str - FightStrength();
    if (play_str > 3) {
        if (90 > random(100)) rtrue;
        rfalse;
    }
    if (play_str > 0) {
        if (75 > random(100)) rtrue;
        rfalse;
    }
    if (~~play_str) {
        if (50 > random(100)) rtrue;
        rfalse;
    }
    if (vill_str > 1) {
        if (25 > random(100)) rtrue;
        rfalse;
    }
    if (10 > random(100)) rtrue;
    rfalse;
];

[ HealFunction pstr ;	! 65428 / 0xff94
    pstr = player.strength;
    if (pstr > 0) {
        pstr = 0;
        player.strength = pstr;
    } else if (pstr < 0) {
        ++pstr;
        player.strength = pstr;
    }
    if (pstr < 0) {
        if (Load_max < Load_allowed) {
            Load_max = Load_max + 10;
        }
        Queue(HealFunction,30)-->0 = true;
        rtrue;
    }
    Load_max = Load_allowed;
    QueueInterrupt(HealFunction)-->0 = false;
    rtrue;
];

[ FightDaemon fightp len cnt oo o p ;	! 65504 / 0xffe0
    len = Villains-->0;
    if (Dead) rfalse;
    cnt = 0;
  .label65527;
    ++cnt;
    if (cnt == len) {
        ! no code
    } else {
        oo = Villains-->cnt;
        o = oo-->0;
        if (o in location && o hasnt concealed) {
            if (o == thief && Thief_engrossed) {
                Thief_engrossed = false;
                jump label65527;
            }
            if (o.strength < 0) {
                p = oo-->3;
                if (p && p > random(100)) {
                    oo-->3 = 0;
                    CheckStrength(o);	! not popped
                    jump label65527;
                }
                oo-->3 = p + 25;
                jump label65527;
            }
            if (o hasnt fightbit && (~~o.action(M_FIGHT))) jump label65527;
            fightp = true;
            jump label65527;
        }
        if (o has fightbit) {
            o.action(M_HANDLED);	! not popped
        }
        if (o == thief) {
            Thief_engrossed = false;
        }
        give player ~staggered;
        give o ~staggered;
        give o ~fightbit;
        CheckStrength(o);	! not popped
        jump label65527;
    }
    if (~~fightp) rfalse;
    return DoFight(len);
];

[ CheckStrength villain str ;	! 65688 / 0x10098
    str = villain.strength;
    if (str >= 0) rtrue;
    villain.strength = 0 - str;
    villain.action(M_WAKE);	! not popped
    rtrue;
];

[ SwordDaemon dem g ng p t l ;	! 65720 / 0x100b8
    dem = QueueInterrupt(SwordDaemon);
    g = sword.trophy_value;
    if (sword in cretin) {
        if (Infested(location)) {
            ng = 2;
        } else {
            p = 0;
          .label65767;
            p = get_next_prop(location,p);
            if (~~p) {
                ! no code
            } else {
                if (p < Low_direction) jump label65767;
                t = location.&p;
                l = get_prop_len(t);
                if (l ~= 1 or 4 or 5 || (~~Infested(t->0))) jump label65767;
                ng = 1;
            }
        }
        if (ng == g) rfalse;
        if (ng == 2) {
            print "Your sword has begun to glow very brightly.";
            new_line;
        } else if (ng == 1) {
            print "Your sword is glowing with a faint blue glow.";
            new_line;
        } else if (~~ng) {
            print "Your sword is no longer glowing.";
            new_line;
        }
        sword.trophy_value = ng;
        rtrue;
    }
    dem-->0 = 0;
    rfalse;
];

[ Infested room obj ;	! 65926 / 0x10186
    obj = child(room);
  .label65935;
    if (~~obj) rfalse;
    if (obj has animate && obj hasnt concealed) rtrue;
    if ((obj = sibling(obj)) ~= nothing) jump label65935;
    rfalse;
];

[ ThiefDaemon room robj here once robbed ;	! 65952 / 0x101a0
    room = parent(thief);
  .label65966;
    here = ((thief hasnt concealed) ? true : false);
    if (here) {
        room = parent(thief);
    }
    if (room == treasure_room && room ~= location) {
        if (here) {
            HackTreasures();	! not popped
            here = false;
        }
        ThiefDies(treasure_room);	! not popped
    } else if (room == location && room hasnt light && troll notin location) {
        if (Thief_vs_Adventurer(here)) rtrue;
        if (thief has concealed) {
            here = false;
        }
    } else {
        if (thief in room && thief hasnt concealed) {
            give thief concealed;
            here = false;
        }
        if (room has visited) {
            Rob(room,thief,75);	! not popped
            robbed = ((room has maze_room && location has maze_room) ? (RobMaze(room)) : (StealJunk(room)));
        }
    }
    once = ((~~once) ? true : false);
    if (once && (~~here)) {
        RetreiveStiletto();	! not popped
      .label66126;
        if (room && (room = sibling(room)) ~= nothing) {
            ! no code
        } else {
            room = child(Room_Holder);
        }
        if (room has sacred || room hasnt dry_land) jump label66126;
        move thief to room;
        give thief ~fightbit;
        give thief concealed;
        Thief_here = false;
        jump label65966;
    }
    if (room ~= treasure_room) {
        DropJunk(room);	! not popped
        return robbed;
    }
    return robbed;
];

[ DropJunk room obj nextitem dropflag ;	! 66180 / 0x10284
    obj = child(thief);
  .label66193;
    if (~~obj) {
        return dropflag;
    }
    nextitem = sibling(obj);
    if (obj == stiletto or large_bag) {
        ! no code
    } else if ((~~obj.trophy_value) && Probability(30)) {
        give obj ~concealed;
        move obj to room;
        if ((~~dropflag) && room == location) {
            print "The robber, rummaging through his bag, dropped a few items he found valueless.";
            new_line;
            dropflag = true;
        }
    }
    obj = nextitem;
    jump label66193;
];

[ RetreiveStiletto ;	! 66300 / 0x102fc
    if (stiletto notin parent(thief)) rfalse;
    give stiletto scenery;
    move stiletto to thief;
    rtrue;
];

[ StealJunk room obj nextitem ;	! 66316 / 0x1030c
    obj = child(room);
  .label66327;
    if (~~obj) rfalse;
    nextitem = sibling(obj);
    if ((~~obj.trophy_value) && (obj has takeable && obj hasnt sacred && obj hasnt concealed) && (obj == stiletto || Probability(10))) {
        move obj to thief;
        give obj visited;
        give obj concealed;
        if (obj == rope) {
            Dome_flag = false;
        }
        if (room ~= location) rfalse;
        "You suddenly notice that the ", (name) obj, " vanished.";
    }
    obj = nextitem;
    jump label66327;
];

[ Rob what thief prob nextitem itm robbed ;	! 66424 / 0x10378
    itm = child(what);
  .label66441;
    if (~~itm) {
        return robbed;
    }
    nextitem = sibling(itm);
    if (itm hasnt concealed && itm hasnt sacred && itm.trophy_value > 0 && ((~~prob) || prob > random(100))) {
        move itm to thief;
        give itm visited;
        if (thief == thief) {
            give itm concealed;
        }
        robbed = true;
    }
    itm = nextitem;
    jump label66441;
];

[ DiagnoseSub my_str wounds remaining_str curetime ;	! 66500 / 0x103c4
    my_str = FightStrength(0);
    wounds = player.strength;
    remaining_str = my_str + wounds;
    if (~~QueueInterrupt(HealFunction)-->0) {
        wounds = 0;
    } else {
        wounds = 0 - wounds;
    }
    if (~~wounds) {
        print "You are in perfect health.";
    } else if (wounds == 1) {
        print "You have a light wound,";
    } else if (wounds == 2) {
        print "You have a serious wound,";
    } else if (wounds == 3) {
        print "You have several wounds,";
    } else if (wounds > 3) {
        print "You have serious wounds,";
    }
    if (wounds) {
        print " which will be cured after ";
        curetime = 30 * (wounds - 1);
        print curetime + QueueInterrupt(HealFunction)-->1, " moves.";
    }
    new_line;
    if (~~remaining_str) {
        print "You are at death's door.";
    } else if (remaining_str == 1) {
        print "You can be killed by one more light wound.";
    } else if (remaining_str == 2) {
        print "You can be killed by a serious wound.";
    } else if (remaining_str == 3) {
        print "You can survive one serious wound.";
    } else if (remaining_str > 3) {
        print "You are strong enough to take several wounds.";
    }
    new_line;
    if (~~Deaths) rfalse;
    print "You have been killed ";
    if (Deaths == 1) {
        print "once.";
    } else {
        print "twice.";
    }
    new_line;
    rtrue;
];

[ ScoreSub ask=true ;	! 66898 / 0x10552
    print "Your score ";
    if (ask) {
        print "would be ";
    } else {
        print "is ";
    }
    print score, " (total of 350 points), in ", turns;
    if (turns == 1) {
        print " move.";
    } else {
        print " moves.";
    }
    new_line;
    print "This score gives you the rank of ";
    if (score == 350) {
        print "Master Adventurer";
    } else if (score > 330) {
        print "Wizard";
    } else if (score > 300) {
        print "Master";
    } else if (score > 200) {
        print "Adventurer";
    } else if (score > 100) {
        print "Junior Adventurer";
    } else if (score > 50) {
        print "Novice Adventurer";
    } else if (score > 25) {
        print "Amateur Adventurer";
    } else {
        print "Beginner";
    }
    print ".";
    new_line;
    return score;
];

[ JigsUp deathmsg playerp ;	! 67142 / 0x10646
    if (Dead) {
        print "^It takes a talented person to be killed while already dead. YOU are such a talent. Unfortunately, it takes a talented person to deal with it. I am not such a talent. Sorry.";
        new_line;
        LeaveGame();	! not popped
    }
    print (string) deathmsg;
    new_line;
    if (~~Lucky) {
        print "Bad luck, huh?";
        new_line;
    }
    ScoreUPD(65526);	! not popped
    print " ^   ****  You have died  **** ^^";
    if (parent(player) has vehicle) {
        move player to location;
    }
    if (Deaths >= 2) {
        print "You clearly are a suicidal maniac. We don't allow psychotics in the cave, since they may harm other adventurers. Your remains will be installed in the Land of the Living Dead, where your fellow adventurers may gloat over them.";
        new_line;
        return LeaveGame();
    }
    ++Deaths;
    move player to location;
    if (altar has visited) {
        print "As you take your last breath, you feel relieved of your burdens. The feeling passes as you find yourself before the gates of Hell, where the spirits jeer at you and deny you entry. Your senses are disturbed. The objects in the dungeon appear indistinct, bleached of color, even unreal.";
        new_line;
        new_line;
        Dead = true;
        Troll_flag = true;
        Assigned_but_unused = true;
        Always_lit = true;
        player.action = SpiritActions;
        Goto(entrance_to_hades);	! not popped
    } else {
        print "Now, let's take a look here... Well, you probably deserve another chance. I can't quite fix you up completely, but you can't have everything.";
        new_line;
        new_line;
        Goto(forest1);	! not popped
    }
    give trap_door ~visited;
    P_cont = 0;
    RandomizeObjects();	! not popped
    return KillInterrupts();
];

[ RandomizeObjects room itm nextitem len ;	! 67786 / 0x108ca
    if (brass_lantern in player) {
        move brass_lantern to living_room;
    }
    if (gold_coffin in player) {
        move gold_coffin to egyptian_room;
    }
    sword.trophy_value = 0;
    nextitem = child(player);
    len = Above_ground-->0;
  .label67822;
    itm = nextitem;
    if (~~itm) rtrue;
    nextitem = sibling(itm);
    if (itm.trophy_value > 0) {
      .label67840;
        if (~~room) {
            room = child(Room_Holder);
        }
        if (room has dry_land && room hasnt light && 50 > random(100)) {
            move itm to room;
            jump label67822;
        }
        room = sibling(room);
        jump label67840;
    }
    move itm to Above_ground-->random(len);
    jump label67822;
];

[ KillInterrupts ;	! 67890 / 0x10932
    QueueInterrupt(ExorcismDaemon)-->0 = false;
    QueueInterrupt(Exorcism2Daemon)-->0 = false;
    QueueInterrupt(CyclopsDaemon)-->0 = false;
    QueueInterrupt(LampDaemon)-->0 = false;
    QueueInterrupt(CandleDaemon)-->0 = false;
    QueueInterrupt(SwordDaemon)-->0 = false;
    QueueInterrupt(SongbirdDaemon)-->0 = false;
    QueueInterrupt(MatchDaemon)-->0 = false;
    rtrue;
];

! References: bag_of_coins.action

[ CoinBagAction ;	! 67988 / 0x10994
    return DoNotEmpty(bag_of_coins,"coins");
];

! References: trunk_of_jewels.action

[ TrunkAction ;	! 67998 / 0x1099e
    return DoNotEmpty(trunk_of_jewels,"jewels");
];

[ DoNotEmpty obj ob_name ;	! 68008 / 0x109a8
    if (Verb == ##Close or ##Open) {
        "The ", (string) ob_name, " are safely inside; there's no need to do that.";
    }
    if (Verb == ##Examine or ##LookIn) {
        "There are lots of ", (string) ob_name, " in there.";
    }
    if (Verb ~= ##Insert || second ~= obj) rfalse;
    "Don't be silly. It wouldn't be a ", (name) obj, " anymore.";
];

! References: pedestal.action

[ PedestalAction ;	! 68122 / 0x10a1a
    if (Verb == ##LookIn or ##Close or ##Open) {
        "You can't do that.";
    }
    if (Verb ~= ##Examine) rfalse;
    "It looks pretty much like a ", (name) noun, ".";
];

! References: clove_of_garlic.action

[ GarlicAction ;	! 68168 / 0x10a48
    if (Verb ~= ##Eat) rfalse;
    Remove(noun);	! not popped
    "What the heck! You won't make friends this way, but nobody around here is too friendly anyhow. Gulp!";
];

! References: shaft_room.pseudo, drafty_room.pseudo

[ PseudoChainAction ;	! 68238 / 0x10a8e
    if (Verb == ##Move or ##Take) {
        "The chain is secure.";
    }
    if (Verb == ##Lower or ##Raise) {
        "Perhaps you should do that to the basket.";
    }
    if (Verb ~= ##Examine) rfalse;
    "The chain secures a basket within the shaft.";
];

! References: the_troll_room.action

[ TrollRoomAction rarg ;	! 68320 / 0x10ae0
    if (rarg ~= M_ENTER || troll notin location) rfalse;
    return SetLastObject(troll);
];

! StringArea 0x10af2 0x14b8a

! 68338 (0x10af2): "Lying in one corner of the room is a beautifully carved crystal skull. It appears to be grinning at you rather nastily."
! 68408 (0x10b38): "From the chain is suspended a basket."
! 68432 (0x10b50): "At the end of the chain is a basket."
! 68454 (0x10b66): "A hot pepper sandwich is here."
! 68474 (0x10b7a): "On the ground is a red hot bell."
! 68492 (0x10b8c): "On the altar is a large black book, open to page 569."
! 68526 (0x10bae): "Commandment #12592^^Oh ye who go about saying unto each:  ~Hello sailor~:^Dost thou know the magnitude of thy sin before the gods?^Yea, verily, thou shalt be ground between two stones.^Shall the angry gods cast thy body into the whirlpool?^Surely, thy eye shall be put out with a sharp stick!^Even unto the ends of the earth shalt thou wander and^Unto the land of the dead shalt thou be sent at last.^Surely thou shalt repent of thy cunning."
! 68810 (0x10cca): "An ornamented sceptre, tapering to a sharp point, is here."
! 68848 (0x10cf0): "A sceptre, possibly that of ancient Egypt itself, is in the coffin. The sceptre is ornamented with colored enamel, and tapers to a sharp point."
! 68934 (0x10d46): "On the table is an elongated brown sack, smelling of hot peppers."
! 68976 (0x10d70): "There is a silver chalice, intricately engraved, here."
! 69008 (0x10d90): "On the shore lies Poseidon's own crystal trident."
! 69042 (0x10db2): "A bottle is sitting on the table."
! 69062 (0x10dc6): "The solid-gold coffin used for the burial of Ramses II is here."
! 69100 (0x10dec): "There is an enormous diamond (perfectly cut) here."
! 69130 (0x10e0a): "There is an exquisite jade figurine here."
! 69154 (0x10e22): "On a table is a nasty-looking knife."
! 69176 (0x10e38): "The deceased adventurer's useless lantern is here."
! 69208 (0x10e58): "An old leather bag, bulging with coins, is here."
! 69238 (0x10e76): "A battery-powered brass lantern is on the trophy case."
! 69274 (0x10e9a): "There is a brass lantern (battery-powered) here."
! 69304 (0x10eb8): "A small leaflet is on the ground."
! 69322 (0x10eca): "~WELCOME TO ZORK!^^ZORK is a game of adventure, danger, and low cunning. In it you will explore some of the most amazing territory ever seen by mortals. No computer should be without one!~^"
! 69458 (0x10f52): "There is a matchbook whose cover says ~Visit Beautiful FCD#3~ here."
! 69502 (0x10f7e): "^(Close cover before striking)^^YOU too can make BIG MONEY in the exciting field of PAPER SHUFFLING!^^Mr. Anderson of Muddle, Mass. says: ~Before I took this course I was a lowly bit twiddler. Now with what I learned at GUE Tech I feel really important and can obfuscate and confuse with the best.~^^Dr. Blank had this to say: ~Ten short days ago all I could look forward to was a dead-end job as a doctor. Now I have a promising future and make really big Zorkmids.~^^GUE Tech can't promise these fantastic results to everyone. But when you earn your degree from GUE Tech, your future will be brighter.^"
! 69912 (0x11118): "Fortunately, there is still one chance for you to be a vandal, for on the far wall is a painting of unparalleled beauty."
! 69974 (0x11156): "A painting by a neglected genius is here."
! 70000 (0x11170): "On the two ends of the altar are burning candles."
! 70030 (0x1118e): "On the ground is a pile of leaves."
! 70048 (0x111a0): "There is a folded pile of plastic here which has a small valve attached."
! 70086 (0x111c6): "On the ground is a large platinum bar."
! 70106 (0x111da): "At the end of the rainbow is a pot of gold."
! 70132 (0x111f4): "The prayer is inscribed in an ancient script, rarely used today. It seems to be a philippic against small insects, absent-mindedness, and the picking up and dropping of small objects. The final verse consigns trespassers to the land of the dead. All evidence indicates that the beliefs of the ancient Zorkers were obscure."
! 70320 (0x112b0): "There is a red buoy here (probably a warning)."
! 70344 (0x112c8): "A large coil of rope is lying in the corner."
! 70368 (0x112e0): "Beside the skeleton is a rusty knife."
! 70392 (0x112f8): "The engravings translate to ~This space intentionally left blank.~"
! 70434 (0x11322): "Above the trophy case hangs an elvish sword of great antiquity."
! 70476 (0x1134c): "In the trophy case is an ancient parchment which appears to be a map."
! 70514 (0x11372): "The map shows a forest with three clearings. The largest clearing contains a house. Three paths leave the large clearing. One of these paths, leading southwest, is marked ~To Stone Barrow~."
! 70632 (0x113e8): "@{9}  !!!! @{9}FROBOZZ MAGIC BOAT COMPANY  !!!!^^Hello, Sailor!^^Instructions for use:^^   To get into a body of water, say ~Launch~.^   To get to shore, say ~Land~ or the direction in which you want to maneuver the boat.^^Warranty:^^  This boat is guaranteed against all defects for a period of 76 milliseconds from date of purchase or until first used, whichever comes first.^^Warning:^   This boat is made of thin plastic.^   Good Luck!^"
! 70950 (0x11526): "There is a suspicious-looking individual, holding a large bag, leaning against one wall. He is armed with a deadly stiletto."
! 71022 (0x1156e): "Sitting on the pedestal is a flaming torch, made of ivory."
! 71060 (0x11594): "Some guidebooks entitled ~Flood Control Dam #3~ are on the reception desk."
! 71112 (0x115c8): "~@{9}Flood Control Dam #3^^FCD#3 was constructed in year 783 of the Great Underground Empire to harness the mighty Frigid River. This work was supported by a grant of 37 million zorkmids from your omnipotent local tyrant Lord Dimwit Flathead the Excessive. This impressive structure is composed of 370,000 cubic feet of concrete, is 256 feet tall at the center, and 193 feet wide at the top. The lake created behind the dam has a volume of 1.7 billion cubic feet, an area of 12 million square feet, and a shore line of 36 thousand feet.^^We will now point out some of the more interesting features of FCD#3 as we conduct you on a guided tour of the facilities:^        1) You start your tour here in the Dam Lobby. You will notice on your right that...."
! 71596 (0x117ac): "A nasty-looking troll, brandishing a bloody axe, blocks all passages out of the room."
! 71642 (0x117da): "Lying half buried in the mud is an old trunk, bulging with jewels."
! 71682 (0x11802): "There is an old trunk here, bulging with assorted jewels."
! 71714 (0x11822): "There is an object which looks like a tube of toothpaste here."
! 71748 (0x11844): "---> Frobozz Magic Gunk Company <---^@{9}  All-Purpose Gunk"
! 71802 (0x1187a): "There are old engravings on the walls here."
! 71824 (0x11890): "The engravings were incised in the living rock of the cave wall by an unknown hand. They depict, in symbolic form, the beliefs of the ancient Zorkers. Skillfully interwoven with the bas reliefs are excerpts illustrating the major religious tenets of that time. Unfortunately, a later age seems to have considered them blasphemous and just as skillfully excised them."
! 72038 (0x11966): "Loosely attached to a wall is a small piece of paper."
! 72068 (0x11984): "^Congratulations!^^You are the privileged owner of ZORK I: The Great Underground Empire, a self-contained and self-maintaining universe. If used and maintained in accordance with normal operating practices for small universes, ZORK will provide many months of trouble-free operation.^"
! 72254 (0x11a3e): "Beside you on the branch is a small bird's nest."
! 72282 (0x11a5a): "In the bird's nest is a large egg encrusted with precious jewels, apparently scavenged by a childless songbird. The egg is covered with fine gold inlay, and ornamented in lapis lazuli and mother-of-pearl. Unlike most eggs, this one is hinged and closed with a delicate looking clasp. The egg appears extremely fragile."
! 72466 (0x11b12): "There is a somewhat ruined egg here."
! 72486 (0x11b26): "There is a golden clockwork canary nestled in the egg. It has ruby eyes and a silver beak. Through a crystal window below its left wing you can see intricate machinery inside. It appears to have wound down."
! 72606 (0x11b9e): "There is a golden clockwork canary nestled in the egg. It seems to have recently had a bad experience. The mountings for its jewel-like eyes are empty, and its silver beak is crumpled. Through a cracked crystal window below its left wing you can see the remains of intricate machinery. It is not clear what result winding it would have, as the mainspring seems sprung."
! 72822 (0x11c76): "The door is boarded and you can't remove the boards."
! 72848 (0x11c90): "You are standing in front of a massive barrow of stone. In the east face is a huge stone door which is open. You cannot see into the dark of the tomb."
! 72926 (0x11cde): "You are facing the north side of a white house. There is no door here, and all the windows are boarded up. To the north a narrow path winds through the trees."
! 73000 (0x11d28): "The windows are all boarded."
! 73018 (0x11d3a): "You are facing the south side of a white house. There is no door here, and all the windows are boarded."
! 73070 (0x11d6e): "This is a forest, with trees in all directions. To the east, there appears to be sunlight."
! 73118 (0x11d9e): "There is no tree here suitable for climbing."
! 73142 (0x11db6): "You would need a machete to go further west."
! 73168 (0x11dd0): "This is a dimly lit forest, with large trees all around."
! 73198 (0x11dee): "The forest becomes impenetrable to the north."
! 73226 (0x11e0a): "The forest thins out, revealing impassable mountains."
! 73262 (0x11e2e): "The mountains are impassable."
! 73280 (0x11e40): "The rank undergrowth prevents eastward movement."
! 73312 (0x11e60): "Storm-tossed trees block your way."
! 73336 (0x11e78): "This is a path winding through a dimly lit forest. The path heads north-south here. One particularly large tree with some low branches stands at the edge of the path."
! 73424 (0x11ed0): "You cannot climb any higher."
! 73440 (0x11ee0): "You are in a small clearing in a well marked forest path that extends to the east and west."
! 73486 (0x11f0e): "Only Santa Claus climbs down chimneys."
! 73514 (0x11f2a): "This is the attic. The only exit is a stairway leading down."
! 73544 (0x11f48): "The door is nailed shut."
! 73558 (0x11f56): "You try to ascend the ramp, but it is impossible, and you slide back down."
! 73600 (0x11f80): "This is a small room with passages to the east and south and a forbidding hole leading west. Bloodstains and deep scratches (perhaps made by an axe) mar the walls."
! 73682 (0x11fd2): "The troll fends you off with a menacing gesture."
! 73708 (0x11fec): "You are on the east edge of a chasm, the bottom of which cannot be seen. A narrow passage goes north, and the path you are on continues to the east."
! 73774 (0x1202e): "The chasm probably leads straight to the infernal regions."
! 73806 (0x1204e): "This is an art gallery. Most of the paintings have been stolen by vandals with exceptional taste. The vandals left through either the north or west exits."
! 73890 (0x120a2): "This appears to have been an artist's studio. The walls and floors are splattered with paints of 69 different colors. Strangely enough, nothing of value is hanging here. At the south end of the room is an open door (also covered with paint). A dark and narrow chimney leads up from a fireplace; although you might be able to get up it, it seems unlikely you could get back down."
! 74100 (0x12174): "This is part of a maze of twisty little passages, all alike."
! 74138 (0x1219a): "You have come to a dead end in the maze."
! 74160 (0x121b0): "This is part of a maze of twisty little passages, all alike. A skeleton, probably the remains of a luckless adventurer, lies here."
! 74236 (0x121fc): "The grating is closed."
! 74244 (0x12204): "The east wall is solid rock."
! 74258 (0x12212): "The cyclops doesn't look like he'll let you past."
! 74282 (0x1222a): "This is a long passage. To the west is one entrance. On the east there is an old wooden door, with a large opening in it (about cyclops sized)."
! 74354 (0x12272): "This is a large room, whose east wall is solid granite. A number of discarded bags, which crumble at your touch, are scattered about on the floor. There is an exit down a staircase."
! 74448 (0x122d0): "You would drown."
! 74456 (0x122d8): "The dam blocks your way."
! 74470 (0x122e6): "You are standing on a path beside a gently flowing stream. The path follows the stream, which flows from west to east."
! 74532 (0x12324): "The stream emerges from a spot too small for you to enter."
! 74562 (0x12342): "You are on the gently flowing stream. The upstream route is too narrow to navigate, and the downstream route is invisible due to twisting walls. There is a narrow beach to land on."
! 74658 (0x123a2): "The channel is too narrow."
! 74674 (0x123b2): "This is a tiny cave with entrances west and north, and a staircase leading down."
! 74710 (0x123d6): "This is a tiny cave with entrances west and north, and a dark, forbidding staircase leading down."
! 74758 (0x12406): "This is a cold and damp corridor where a long east-west passageway turns into a southward path."
! 74814 (0x1243e): "This is a long and narrow corridor where a long north-south passageway briefly narrows even further."
! 74872 (0x12478): "This is a winding passage. It seems that there are only exits on the east and north."
! 74912 (0x124a0): "This is an ancient room, long under water. There is an exit to the south and a staircase leading up."
! 74956 (0x124cc): "This is a narrow east-west passageway. There is a narrow stairway leading down at the north end of the room."
! 75004 (0x124fc): "This is a circular stone room with passages in all directions. Several of them have unfortunately been blocked by cave-ins."
! 75074 (0x12542): "This cave has exits to the west and east, and narrows to a crack toward the south. The earth is particularly damp here."
! 75140 (0x12584): "It is too narrow for most insects."
! 75156 (0x12594): "This is a high north-south passage, which forks to the northeast."
! 75192 (0x125b8): "A chasm runs southwest to northeast and the path follows it. You are on the south side of the chasm, where a crack opens into a passage."
! 75262 (0x125fe): "Are you out of your mind?"
! 75276 (0x1260c): "Some invisible force prevents you from passing through the gate."
! 75312 (0x12630): "You have entered the Land of the Living Dead. Thousands of lost souls can be heard weeping and moaning. In the corner are stacked the remains of dozens of previous adventurers less fortunate than yourself. A passage exits to the north."
! 75450 (0x126ba): "You have entered a low cave with passages leading northwest and east."
! 75480 (0x126d8): "This is a room which looks like an Egyptian tomb. There is an ascending staircase to the west."
! 75526 (0x12706): "You cannot go down without fracturing many bones."
! 75554 (0x12722): "You cannot reach the rope."
! 75566 (0x1272e): "This is the north end of a large temple. On the east wall is an ancient inscription, probably a prayer in a long-forgotten language. Below the prayer is a staircase leading down. The west wall is solid granite. The exit to the north end of the room is through huge marble pillars."
! 75702 (0x127b6): "This is the south end of a large temple. In front of you is what appears to be an altar. In one corner is a small hole in the floor which leads into darkness. You probably could not get back up it."
! 75800 (0x12818): "You haven't a prayer of getting the coffin down there."
! 75832 (0x12838): "This room appears to have been the waiting room for groups touring the dam. There are open doorways here to the north and east marked ~Private~, and there is an path leading south over the top of the dam."
! 75924 (0x12894): "This is what appears to have been the maintenance room for Flood Control Dam #3. Apparently, this room has been ransacked recently, for most of the valuable equipment is gone. On the wall in front of you is a group of buttons colored blue, yellow, brown, and red. There are doorways to the west and south."
! 76094 (0x1293e): "You are at the base of Flood Control Dam #3, which looms above you and to the north. The river Frigid is flowing by here. Along the river are the White Cliffs which seem to form giant walls stretching from north to south along the shores of the river as it winds its way downstream."
! 76242 (0x129d2): "You are on the Frigid River in the vicinity of the Dam. The river flows quietly here. There is a landing on the west shore."
! 76302 (0x12a0e): "You cannot go upstream due to strong currents."
! 76328 (0x12a28): "The White Cliffs prevent your landing here."
! 76354 (0x12a42): "The river turns a corner here making it impossible to see the Dam. The White Cliffs loom on the east bank and large rocks prevent landing on the west."
! 76432 (0x12a90): "There is no safe landing spot here."
! 76452 (0x12aa4): "Just in time you steer away from the rocks."
! 76478 (0x12abe): "The river descends here into a valley. There is a narrow beach on the west shore below the cliffs. In the distance a faint rumbling can be heard."
! 76554 (0x12b0a): "You are on a narrow strip of beach which runs along the base of the White Cliffs. There is a narrow path heading south along the Cliffs and a tight passage leading west into the cliffs themselves."
! 76648 (0x12b68): "The path is too narrow."
! 76660 (0x12b74): "You are on a rocky, narrow strip of beach beside the Cliffs. A narrow path leads north along the shore."
! 76712 (0x12ba8): "The river is running faster here and the sound ahead appears to be that of rushing water. On the east shore is a sandy beach. A small area of beach can also be seen below the cliffs on the west shore."
! 76816 (0x12c10): "You can land either to the east or the west."
! 76838 (0x12c26): "The sound of rushing water is nearly unbearable here. On the east shore is a large landing area."
! 76890 (0x12c5a): "You are on the east shore of the river. The water here seems somewhat treacherous. A path travels from north to south here, the south end quickly turning around a sharp corner."
! 76976 (0x12cb0): "You are on a large sandy beach on the east shore of the river, which is flowing quickly by. A path runs beside the river to the south here, and a passage is partially buried in sand to the northeast."
! 77072 (0x12d10): "This is a sand-filled cave whose exit is to the southwest."
! 77106 (0x12d32): "It's a long way..."
! 77118 (0x12d3e): "You are on top of a rainbow (I bet you never thought you would walk on a rainbow), with a magnificent view of the Falls. The rainbow travels east-west here."
! 77208 (0x12d98): "You are on a small, rocky beach on the continuation of the Frigid River past the Falls. The beach is narrow due to the presence of the White Cliffs. The river canyon opens here and sunlight shines in from above. A rainbow crosses over the falls to the east and a narrow path continues to the southwest."
! 77366 (0x12e36): "You are beneath the walls of the river canyon which may be climbable here. The lesser part of the runoff of Aragain Falls flows by below. To the north is a narrow path."
! 77454 (0x12e8e): "You are on a ledge about halfway up the wall of the river canyon. You can see from here that the main flow from Aragain Falls twists along a passage which it is impossible to enter. Below you is the canyon bottom. Above you is more cliff, which appears climbable."
! 77580 (0x12f0c): "You are at the top of the Great Canyon on its west wall. From here there is a marvelous view of the canyon and parts of the Frigid River upstream. Across the canyon, the walls of the White Cliffs join the mighty ramparts of the Flathead Mountains to the east. Following the Canyon upstream to the north, Aragain Falls may be seen, complete with rainbow. The mighty Frigid River flows out from a great dark cavern. To the west and south can be seen an immense forest, stretching for miles around. A path leads northwest. It is possible to climb down into the canyon from here."
! 77902 (0x1304e): "Nice view, lousy place to jump."
! 77924 (0x13064): "You are standing at the entrance of what might have been a coal mine. The shaft enters the west wall, and there is another exit on the south end of the room."
! 78002 (0x130b2): "You are in a small room. Strange squeaky sounds may be heard coming from the passage at the north end. You may also escape to the east."
! 78072 (0x130f8): "This is a large room, in the middle of which is a small shaft descending through the floor into darkness below. To the west and the north are exits from this room. Constructed over the top of the shaft is a metal framework to which a heavy iron chain is attached."
! 78200 (0x13178): "You wouldn't fit and would die if you could."
! 78224 (0x13190): "This is a small non-descript room. However, from the direction of a small descending staircase a foul odor can be detected. To the south is a narrow tunnel."
! 78302 (0x131de): "This is a small room which smells strongly of coal gas. There is a short climb up some stairs and a narrow tunnel leading east."
! 78366 (0x1321e): "This is a very small room. In the corner is a rickety wooden ladder, leading downward. It might be safe to descend. There is also a staircase leading upward."
! 78446 (0x1326e): "This is a rather wide room. On one side is the bottom of a narrow wooden ladder. To the west and the south are passages leaving the room."
! 78512 (0x132b0): "You have come to a dead end in the mine."
! 78534 (0x132c6): "This is a long and narrow passage, which is cluttered with broken timbers. A wide passage comes from the east and turns at the west end of the room into a very narrow passageway. From the west comes a strong draft."
! 78640 (0x13330): "You cannot fit through this passage with that load."
! 78656 (0x13340): "This is a small drafty room in which is the bottom of a long shaft. To the south is a passageway and to the east a very narrow passage. In the shaft can be seen a heavy iron chain."
! 78748 (0x1339c): "This is a non-descript part of a coal mine."
! 78776 (0x133b8): "This is a small chamber, which appears to have been part of a coal mine. On the south wall of the chamber the letters ~Granite Wall~ are etched in the rock. To the east is a long passage, and there is a steep metal slide twisting downward. To the north is a small opening."
! 78920 (0x13448): "F"
! 78922 (0x1344a): "If you insist.... Poof, you're dead!"
! 78950 (0x13466): " catches fire. Unfortunately, you were holding it at the time."
! 78982 (0x13486): "Kicking the "
! 78990 (0x1348e): "You should have looked before you leaped."
! 79010 (0x134a2): "In the movies, your life would be passing before your eyes."
! 79040 (0x134c0): "Geronimo..."
! 79050 (0x134ca): "Playing in this way with the "
! 79064 (0x134d8): "Pushing the "
! 79072 (0x134e0): "Fiddling with the "
! 79082 (0x134ea): "Very good. Now you can go to the second grade."
! 79110 (0x13506): "Are you enjoying yourself?"
! 79128 (0x13518): "Wheeeeeeeeee!!!!!"
! 79144 (0x13528): "Do you expect me to applaud?"
! 79162 (0x1353a): " hits you squarely in the head. Normally, this wouldn't do much damage, but by incredible mischance, you fall over backwards trying to duck, and break your neck, justice being swift and merciful in the Great Underground Empire."
! 79298 (0x135c2): "Oh, no! You have walked into the slavering fangs of a lurking grue!"
! 79338 (0x135ea): "Waving the "
! 79346 (0x135f2): "  "
! 79348 (0x135f4): "    "
! 79352 (0x135f8): "      "
! 79356 (0x135fc): "        "
! 79362 (0x13602): "          "
! 79370 (0x1360a): " doesn't seem to work."
! 79382 (0x13616): " isn't notably helpful."
! 79400 (0x13628): " has no effect."
! 79410 (0x13632): " and devoured you!"
! 79422 (0x1363e): "You can't swim in the dungeon."
! 79438 (0x1364e): "Hello."
! 79444 (0x13654): "Good day."
! 79452 (0x1365c): "Nice weather we've been having lately."
! 79480 (0x13678): "Goodbye."
! 79488 (0x13680): "A valiant attempt."
! 79502 (0x1368e): "You can't be serious."
! 79512 (0x13698): "An interesting idea..."
! 79530 (0x136aa): "What a concept!"
! 79542 (0x136b6): "Look around."
! 79552 (0x136c0): "Too late for that."
! 79564 (0x136cc): "Have your eyes checked."
! 79580 (0x136dc): "Well, you seem to have been brushing your teeth with some sort of glue. As a result, your mouth gets glued together (with your nose) and you die of respiratory failure."
! 79678 (0x1373e): "With great effort, you open the window far enough to allow entry."
! 79720 (0x13768): "The window closes (more easily than it opened)."
! 79752 (0x13788): "The door reluctantly opens to reveal a rickety staircase descending into darkness."
! 79796 (0x137b4): "The door swings shut and closes."
! 79814 (0x137c6): "A nasty-looking troll, brandishing a bloody axe, blocks all passages out of the room."
! 79860 (0x137f4): "A pathetically babbling troll is here."
! 79882 (0x1380a): "An unconscious troll is sprawled on the floor. All passages out of the room are open."
! 79926 (0x13836): "A troll is here."
! 79934 (0x1383e): "The leaves burn, and so do you."
! 79954 (0x13852): "The grating opens."
! 79962 (0x1385a): "The grating opens to reveal trees above you."
! 79986 (0x13872): "As the knife approaches its victim, your mind is submerged by an overmastering will. Slowly, your hand turns, until the rusty blade is an inch from your neck. The knife seems to sing as it savagely slits your throat."
! 80110 (0x138ee): "I'm afraid that the leap you attempted has done you in."
! 80142 (0x1390e): "You are lifted up by the rising river! You try to swim, but the currents are too strong. You come closer, closer to the awesome structure of Flood Control Dam #3. The dam beckons to you. The roar of the water nearly deafens you, but you remain conscious as you tumble over the dam toward your certain doom among the rocks at its base."
! 80334 (0x139ce): "up to your ankles."
! 80344 (0x139d8): "up to your shin."
! 80354 (0x139e2): "up to your knees."
! 80364 (0x139ec): "up to your hips."
! 80374 (0x139f6): "up to your waist."
! 80384 (0x13a00): "up to your chest."
! 80394 (0x13a0a): "up to your neck."
! 80404 (0x13a14): "over your head."
! 80412 (0x13a1c): "high in your lungs."
! 80424 (0x13a28): "The room is full of water and cannot be entered."
! 80446 (0x13a3e): "I'm afraid you have done drowned yourself."
! 80474 (0x13a5a): "The rising water lifts the boat and carries it through the door, past the lobby, and over the falls. Tsk, tsk."
! 80530 (0x13a92): "The cyclops, tired of all of your games and trickery, grabs you firmly. As he licks his chops, he says ~Mmm. Just like Mom used to make 'em.~ It's nice to be appreciated."
! 80638 (0x13afe): "The cyclops seems somewhat agitated."
! 80656 (0x13b10): "The cyclops appears to be getting more agitated."
! 80678 (0x13b26): "The cyclops is moving about the room, looking for something."
! 80702 (0x13b3e): "The cyclops was looking for salt and pepper. I think he is gathering condiments for his upcoming snack."
! 80754 (0x13b72): "The cyclops is moving toward you in an unfriendly manner."
! 80784 (0x13b90): "You have two choices: 1. Leave  2. Become dinner."
! 80818 (0x13bb2): "There is a suspicious-looking individual, holding a bag, leaning against one wall. He is armed with a vicious-looking stiletto."
! 80892 (0x13bfc): "There is a suspicious-looking individual lying unconscious on the ground."
! 80934 (0x13c26): "You cannot damage this door."
! 80948 (0x13c34): "The door is still under warranty."
! 80968 (0x13c48): "The voice of the guardian of the dungeon booms out from the darkness, ~Your disrespect costs you your life!~ and places your head on a sharp pole."
! 81048 (0x13c98): "A booming voice says ~Wrong, cretin!~ and you notice that you have turned into a pile of dust. How, I can't imagine."
! 81118 (0x13cde): "There is a worthless piece of canvas here."
! 81142 (0x13cf6): "The lamp appears a bit dimmer."
! 81158 (0x13d06): "The lamp is definitely dimmer now."
! 81180 (0x13d1c): "The lamp is nearly out."
! 81194 (0x13d2a): "The candles grow shorter."
! 81206 (0x13d36): "The candles are becoming quite short."
! 81226 (0x13d4a): "The candles won't last long now."
! 81240 (0x13d58): "^      ** BOOOOOOOOOOOM **"
! 81276 (0x13d7c): "The structural integrity of the rainbow is severely compromised, leaving you hanging in mid-air, supported only by water vapor. Bye."
! 81358 (0x13dce): "You splash around for a while, fighting the current, then you drown."
! 81400 (0x13df8): "Unfortunately, the magic boat doesn't provide protection from unfriendly rocks and boulders one meets at the bottom of many waterfalls. Including this one."
! 81484 (0x13e4c): "In other words, fighting the fierce currents of the Frigid River. You manage to hold your own for a bit, but then you are carried over a large waterfall and into some nasty rocks. Ouch!"
! 81584 (0x13eb0): "The hole collapses, smothering you."
! 81608 (0x13ec8): "You seem to be digging a hole here."
! 81628 (0x13edc): "The hole is getting deeper, but that's about it."
! 81654 (0x13ef6): "You are surrounded by a wall of sand on all sides."
! 81682 (0x13f12): "That was just a bit too far down."
! 81704 (0x13f28): "Well, you really did it that time. Is suicide painless?"
! 81740 (0x13f4c): "It appears that that last blow was too much for you. I'm afraid you are dead."
! 81782 (0x13f76): "Your "
! 81784 (0x13f78): " misses the "
! 81792 (0x13f80): " by an inch."
! 81800 (0x13f88): "A good slash, but it misses the "
! 81818 (0x13f9a): " by a mile."
! 81826 (0x13fa2): "You charge, but the "
! 81836 (0x13fac): " jumps nimbly aside."
! 81850 (0x13fba): "Clang! Crash! The "
! 81864 (0x13fc8): " parries."
! 81872 (0x13fd0): "A quick stroke, but the "
! 81886 (0x13fde): " is on guard."
! 81894 (0x13fe6): "A good stroke, but it's too slow; the "
! 81918 (0x13ffe): " dodges."
! 81924 (0x14004): " crashes down, knocking the "
! 81942 (0x14016): " into dreamland."
! 81952 (0x14020): "The "
! 81954 (0x14022): " is battered into unconsciousness."
! 81976 (0x14038): "A furious exchange, and the "
! 81992 (0x14048): " is knocked out!"
! 82004 (0x14054): "The haft of your "
! 82012 (0x1405c): " knocks out the "
! 82018 (0x14062): "."
! 82020 (0x14064): "It's curtains for the "
! 82030 (0x1406e): " as your "
! 82034 (0x14072): " removes his head."
! 82046 (0x1407e): "The fatal blow strikes the "
! 82062 (0x1408e): " square in the heart:  He dies."
! 82082 (0x140a2): " takes a fatal blow and slumps to the floor dead."
! 82112 (0x140c0): " is struck on the arm; blood begins to trickle down."
! 82146 (0x140e2): " pinks the "
! 82152 (0x140e8): " on the wrist, but it's not serious."
! 82174 (0x140fe): "Your stroke lands, but it was only the flat of the blade."
! 82206 (0x1411e): "The blow lands, making a shallow gash in the "
! 82234 (0x1413a): "'s arm!"
! 82240 (0x14140): " receives a deep gash in his side."
! 82262 (0x14156): "A savage blow on the thigh! The "
! 82282 (0x1416a): " is stunned but can still fight!"
! 82302 (0x1417e): "Slash! Your blow lands! That one hit an artery, it could be serious!"
! 82346 (0x141aa): "Slash! Your stroke connects! This could be serious!"
! 82378 (0x141ca): " is staggered, and drops to his knees."
! 82400 (0x141e0): " is momentarily disoriented and can't fight back."
! 82430 (0x141fe): "The force of your blow knocks the "
! 82444 (0x1420c): " back, stunned."
! 82456 (0x14218): " is confused and can't fight back."
! 82476 (0x1422c): "The quickness of your thrust knocks the "
! 82494 (0x1423e): "'s weapon is knocked to the floor, leaving him unarmed."
! 82530 (0x14262): " is disarmed by a subtle feint past his guard."
! 82560 (0x14280): "The Cyclops misses, but the backwash almost knocks you over."
! 82588 (0x1429c): "The Cyclops rushes you, but runs into the wall."
! 82610 (0x142b2): "The Cyclops sends you crashing to the floor, unconscious."
! 82640 (0x142d0): "The Cyclops raises his arms and crushes your skull."
! 82666 (0x142ea): "The Cyclops breaks your neck with a massive smash."
! 82692 (0x14304): "A quick punch, but it was only a glancing blow."
! 82722 (0x14322): "A glancing blow from the Cyclops' fist."
! 82748 (0x1433c): "The monster smashes his huge fist into your chest, breaking several ribs."
! 82792 (0x14368): "The Cyclops almost knocks the wind out of you with a quick punch."
! 82822 (0x14386): "A flying drop kick breaks your jaw."
! 82844 (0x1439c): "The Cyclops lands a punch that knocks the wind out of you."
! 82870 (0x143b6): "Heedless of your weapons, the Cyclops tosses you against the rock wall of the room."
! 82912 (0x143e0): "The Cyclops grabs your "
! 82920 (0x143e8): ", tastes it, and throws it to the ground in disgust."
! 82948 (0x14404): "The monster grabs you on the wrist, squeezes, and you drop your "
! 82982 (0x14426): " in pain."
! 82988 (0x1442c): "The Cyclops seems unable to decide whether to broil or stew his dinner."
! 83026 (0x14452): "The Cyclops, no sportsman, dispatches his unconscious victim."
! 83066 (0x1447a): "The troll swings his axe, but it misses."
! 83086 (0x1448e): "The troll's axe barely misses your ear."
! 83106 (0x144a2): "The axe sweeps past as you jump aside."
! 83130 (0x144ba): "The axe crashes against the rock, throwing sparks!"
! 83162 (0x144da): "The flat of the troll's axe hits you delicately on the head, knocking you out."
! 83204 (0x14504): "The troll neatly removes your head."
! 83222 (0x14516): "The troll's axe stroke cleaves you from the nave to the chops."
! 83252 (0x14534): "The troll's axe removes your head."
! 83268 (0x14544): "The axe gets you right in the side. Ouch!"
! 83292 (0x1455c): "The flat of the troll's axe skins across your forearm."
! 83320 (0x14578): "The troll's swing almost knocks you over as you barely parry in time."
! 83354 (0x1459a): "The troll swings his axe, and it nicks your arm as you dodge."
! 83386 (0x145ba): "The troll charges, and his axe slashes you on your "
! 83410 (0x145d2): " arm."
! 83414 (0x145d6): "An axe stroke makes a deep wound in your leg."
! 83444 (0x145f4): "The troll's axe swings down, gashing your shoulder."
! 83472 (0x14610): "The troll hits you with a glancing blow, and you are momentarily stunned."
! 83510 (0x14636): "The troll swings; the blade turns on your armor but crashes broadside into your head."
! 83556 (0x14664): "You stagger back under a hail of axe strokes."
! 83586 (0x14682): "The troll's mighty blow drops you to your knees."
! 83610 (0x1469a): "The axe hits your "
! 83620 (0x146a4): " and knocks it spinning."
! 83632 (0x146b0): "The troll swings, you parry, but the force of his blow knocks your "
! 83662 (0x146ce): " away."
! 83668 (0x146d4): "The axe knocks your "
! 83676 (0x146dc): " out of your hand. It falls to the floor."
! 83698 (0x146f2): "The troll hesitates, fingering his axe."
! 83720 (0x14708): "The troll scratches his head ruminatively:  Might you be magically protected, he wonders?"
! 83774 (0x1473e): "Conquering his fears, the troll puts you to death."
! 83802 (0x1475a): "The thief stabs nonchalantly with his stiletto and misses."
! 83832 (0x14778): "You dodge as the thief comes in low."
! 83852 (0x1478c): "You parry a lightning thrust, and the thief salutes you with a grim nod."
! 83892 (0x147b4): "The thief tries to sneak past your guard, but you twist away."
! 83924 (0x147d4): "Shifting in the midst of a thrust, the thief knocks you unconscious with the haft of his stiletto."
! 83974 (0x14806): "The thief knocks you out."
! 83984 (0x14810): "Finishing you off, the thief inserts his blade into your heart."
! 84018 (0x14832): "The thief comes in from the side, feints, and inserts the blade into your ribs."
! 84058 (0x1485a): "The thief bows formally, raises his stiletto, and with a wry grin, ends the battle and your life."
! 84110 (0x1488e): "A quick thrust pinks your left arm, and blood starts to trickle down."
! 84154 (0x148ba): "The thief draws blood, raking his stiletto across your arm."
! 84186 (0x148da): "The stiletto flashes faster than you can follow, and blood wells from your leg."
! 84230 (0x14906): "The thief slowly approaches, strikes like a snake, and leaves you wounded."
! 84274 (0x14932): "The thief strikes like a snake! The resulting wound is serious."
! 84312 (0x14958): "The thief stabs a deep cut in your upper arm."
! 84336 (0x14970): "The stiletto touches your forehead, and the blood obscures your vision."
! 84376 (0x14998): "The thief strikes at your wrist, and suddenly your grip is slippery with blood."
! 84418 (0x149c2): "The butt of his stiletto cracks you on the skull, and you stagger back."
! 84456 (0x149e8): "The thief rams the haft of his blade into your stomach, leaving you out of breath."
! 84498 (0x14a12): "The thief attacks, and you fall back desperately."
! 84526 (0x14a2e): "A long, theatrical slash. You catch it on your "
! 84554 (0x14a4a): ", but the thief twists his knife, and the "
! 84574 (0x14a5e): " goes flying."
! 84584 (0x14a68): "The thief neatly flips your "
! 84598 (0x14a76): " out of your hands, and it drops to the floor."
! 84622 (0x14a8e): "You parry a low thrust, and your "
! 84640 (0x14aa0): " slips out of your hand."
! 84654 (0x14aae): "The thief, a man of superior breeding, pauses for a moment to consider the propriety of finishing you off."
! 84718 (0x14aee): "The thief amuses himself by searching your pockets."
! 84748 (0x14b0c): "The thief entertains himself by rifling your pack."
! 84776 (0x14b28): "The thief, forgetting his essentially genteel upbringing, cuts your throat."
! 84822 (0x14b56): "The thief, a pragmatist, dispatches you as a threat to his livelihood."
! 84866 (0x14b82): "coins"
! 84870 (0x14b86): "jewels"
